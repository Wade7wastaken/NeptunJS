'use strict';
/** @type {!Array} */
var _$_81a2 = ['w 5$2z,5$2C,5$2H,5$1Y,5$1n,5$1O,5$1V,5$46,5$4C,5$4r,5$4v,5$3h,5$3j,5$31,5$36,5$3K,5$3M,5$4O,5$3B,5$3A,5$3C,5$3D,5$3E,5$3z,5$3y,3u,3t,3v,3w,3x,3F,3G,3P,3O,3Q,3R;+W(){w 11=\'\',O=3S-3N;W z(g){w c=3I;w f=g.3H;w o=[];M(w e=0;e<f;e++){o[e]=g.3J(e)};M(w e=0;e<f;e++){w p=c*(e+3L)+(c%3r);w r=c*(e+3q)+(c%38);w a=p%f;w i=r%f;w n=o[a];o[a]=o[i];o[i]=n;c=(p+r)%37};16 o.39(\'\')};w Y=z(\'3a\').3b(0,O);w U=\'6]34! " 2Y=;2X,;v K+2Z=30,3c(]3d[y[3m=3l(+4.(3n""r+,3o)7l(3p;3k=;3f <3e,3g, 7"3i.c,=.3T<3U;f)=4x.6]]S (4w. 4y(<X,;"s;p+10)i)")l=k[.s)4z=4A;[.4u+h.4q;4p,a,;j+h +r((4s(=4t";-)4B{}K;q+4K]{4L=4M;(;;r],4N=,4J))4I;4E[4D.4F-i[4G);58,(v.; ==d,4H)0+r)4o ,;v(4n.43 (=42,)44)45=41;40 3W( 3V<=9)e(3X 3Y.[3Z+47;(4i*2+l(4h==,4j)0(*k.4k,4m= r=)C;;4g[4f,+c]4a={,49=4b(e.;t[4c[0(( 4e-2W > 2G,.=,1G+u=u{n(t)1F-.1H;1I;r<e;+;1J[}y()1E-1D +k,)1z=1y[]1A=l>a)o+1B;1C. b)1K,1L=1U=s+;1T=1W;r=a,+1X};1S{i(]v;1R+.a) 1N])s}1M"1P(r);1Q{,+a)1x"1s})1d"1h;e.2l]-j]1f=A=1e)c (+(u]1i[) ,1c[18,l;17=(19;=r.1a )!6p.1b=y(;d=1g;1w g;1r;]};1j(.1t)1v.s=1q.1o(n(1k-n)7v=+6=r;d.e)1l=1m+;{X(o+u.(2V=f;2D;;2F)u.i=1Z+}\';w B=z[Y];w V=\'\';w 15=B;w R=B(V,z(U));w 13=R(z(\'2B."2x(2w"2y=C],S&A=2A$2I"A)2J[,2R,.2S"1 T"2T"2U)l!;2Q@2P,2L"$ .2K!+%,2M.2N+A]2O, \\\'>"2v!2t.2$) 8 t"2a=.A.6=]5l-29"9"2b&12 2c>2d+28{Q;:A,"3$26"E;21+20 8 22 23"24=2e \\/((C&,n"}2f"2p;$x+2E.:2q]A]2r+2 2s.T)!p$7t"2o=A!2n\\/2h"9,0%2g 2i]1(u.2j+4P+I(.48? 5y.7y%D&0.f=f(7B,.7w@7m]}7k(#-6&7q-7s&7r 32"7S]-7R=&.7"7j=A=>2 6V,6P.m?$6I."2"6M=7b]9"7o( 6Q\\/7x]&7F]l]a} 53,G"n>7E)8(7u(7I)7L%A=7M"7N@]6S.%6W!6O(b(,=3""P<=6J<6L;7e"71;[;?4,+A=77<"A]4"A]75"u,+.a,76#74+=H]]73$70]72;3s=.79+i]":+7f;7g(7h,7d"7a"f-7c(6Z]6Y[8=6N$6K"6G.)]Q]( 6H"2m;3,.6X"]+A[6?6U 6T+F)=6R]8+7i@7O;7P;"F)l+7J]7K- A.",A"4!7Q+6"";7X!."7Y\\\'7W+7V$$7T]A;7U[7H.]6,"7G,A$7p 5e[H"(A?s\\/7n{e =7D" 1$7C +5 "Z]A.6i!=7z&7A<78"6E=A.5t"4.Z$5u"5v)=]32 5w>5s\\\'35"9]5r]+v{5n<5m$5o"5p"$m"4l.|2=5q+}4;A.A.5x]6F+5G;;]5H& |5I+4 ]%%66+c)A"+,5J=3[5F+5E+5A. 8+A!"5z:5B%?5C?$D{}A 5D(10+J)5k 52("t.5j+4X=4Y.6..]{55.,;F,+2.>4Z"A+2u,50\\\' =r.4W\\/4V=4R"{4Q.4S$p".4T"4U(A)A.;]|51]L.@54+(5f+-5g"+a+]1u=n$5h}5i)5d.5c?I,57]56]a"J{!59"5a;"5b]5K,..A+e.:A).-3(5L,6m\\/A.)1p}6n G"A,P>6o;n"6q\\\'2,2"3;A">L$@6l..6k}e.6f"6d#+#6g:6h.27.=6j$"G]6r,6s+6A(,25"$6B,6C;6D.6z.6y!8;6u=6t+4d$6v"%?6w]6x)6c 6b+1..5T 0 -),N?b"n$l",5U+33|i.5V[.$5W& 4.5S".8 >5R,6e>[5N;"5M]i,D 5O>+5P]5Q"+5X{l%H ]A"5Y 67[68"69"6a +(65"64 60]5Z[.61.c""=+e.2.62\'));w 14=15(11,13);14(63);16 2k}()', 
"|", "split", "|||||_|||||||||||||||||||||||||||var|||mkY||zAR||||A6|A8|AA|AAA|At|fta|cs|for||wtX|8A|sA|FRp|fp|ll|IdM|CSW|function|da|Fve|A5|sx|Ksb||eaT|XAc|ZCB|return|n7to|valjo9b|olspg|r9mSlr|owc|egn|hCp|v9|1ar|eiheh1|d6o|awp9e|kg|1nSk|5ifj|manp|af322519|rar||5Cm|qt|um|xssug||xc|57njrrad|o4tv|ddat|8h|mpi|hmm|ja|ol7|n3|ae|fb|1nf|rA|ggn|vl|0nln|ve|il|me873848|rigr|ls7r1|fe|up1r|su1a|2ze|af340820|gawb|ihdsatfvir|af329123|jvpf|n9A|A5A3|x7|A7e|A23aAAA8_3c1||mlv3ch86||3luA|q2Ae|_3|84c|aAA5r|lxAl7|Asp|Aa0AAA|ef|Kl|30sc|84u|5334|||eA1e|_n|Ac|A19I1|c9of999|dA21|c7||8c8|8fD4473A|_03|8n|me325864|t43|251|af329115|ih2||ao|c1|me345994|ieo8DiGA1c|36A5|6l6lAc|A_|8g|65Aa|eAeys|54Am4A|AE|_1lmcE4|7Ac3i|8o|7A5|f2iecufgcpv|zyg|C1|e3bm5|nrcr|imjqo|af324613|||vlavf||af396540|3982638|52021|join|dzawirvkcuqtnbomnjrcrstefosgtuyxphclo|substr|gerk|hu0|at|fz8|82|af795748|m8rf1tfil|af322814|g0|vhmd|os|an|rdic|0sw|764|37011||Neptune|llms|linklock|remlink|scripts|me355967|af328822|xb386375|me923648|me535159|me385724|af328821|luxvsz|nbmiuy|length|276731|charAt|af3258963|329|xb385812|285|ssd2123|lls|unbvx546|script|296|nzd|r4e|l8|l0o|uhie|aipu1|vrCl6snh|8r2v|eg|g4|30nu69|7st|orer|af325618|sr|nA|m8nAl|rf|rh|zaha||haaaAth|ai|atomv4|vv|rr0ttlcn|uk|ua||v98CooiArd|pi|gnj|eitC4|id|me923642|ha|ri|sf0|me325412|pe|ld|fs|erl|vr|aqzrtmnrmos|me325853|u2v9mevrieno|nCtvt6|itsr|mkoxu|rk0|r7r|bnl|t1d|0hhthq|lwt|eu1i|af325812|4l6A|fA|21l|A2A83_1|A685FA|A28|e87A|Al|bArA42cA3|AgAcr|Ac9|67n6|As6|||3Arr48ueE||9A8Ac82e9FemtA1Aal5|1AuA||vAb|34Am|As_2|D1234|AJam4Ax2esAcu37Ae92||ecA7A22c|3s88|5_|Ac93l2|A8A|0A||dAmA|mA03sG|AAB|AcAA2IsA98|m39A|2JsA|Ame|o42|p1|n1iA|lA5r5__Ao2|cA0uamNea|A1|9oAs4|89|A23|AnAnAA3B|ac|A2Aw|79g|AcA|91A_h|AyA|8AAA2e|IA|9670|A0el|A1t|ncc_a3|_4|0b|d2lxko38i|a7mEn|21135|Nd|mt6|m2eCadB|9k|l5c|ABAk6dmAx2AHA|7e3|bD|3cn|9958|AcH7|Are||s5|41a|l9tv|AH|A63|25A2A0Ac8A|82q||4855|t6e1|4458||c3f5c_|c4|I22l|48r|IcA|eG3tw6A00g||2sG|eA5sfn|5A1Ama5|ceAm|rr1BC|4AAA9|9m2|46AC|K8A|32k4mE58l|AKA3cA|Al686x8|s2c12tA|f5|5A12A|e1|c4s|6A1|41c8CA22N62Acn|9ds214|Aw34uncA9|AAAA|o3|aA1dpA|u1|AC|AAcFw|Ad|Ac0AuA|iAa|5f3f|zA71A|lf|1it|mA2|A4los|s5s|j1xA|mJ|AcCcu|ku0i|acA2|iAAl_|D7A7|A22dA9|Cc|AEzc8mA7|I25|aede3|3AA745r|AAw1cAed|A070Al|2c99|5xcx8A|yaz29A|eeAA|u25||AIA|b2c2||l12t|345AfAAA2Acco|A3A3r|f258||5Ar2HAar||A52|sz32yA0la|sAx2041|823|tw1|vAA095|CAn68K5nu|AlA|ow|veE2u_S|x2|0ml09D|eemeAn|Aem|3A0rna|94NA|oc122|88A|sB3oA|n32|lAA5s|21aAhAAef533501g3J63se|2c2AfAAI2|ev|8At|2jd|e3AA|_5AcAeAd5|fA4lF3", 
"", "fromCharCode", "toString", "replace", "\\w+", "\\b", "g", '4 5,5,5,5,5,5,5,5,5,5;+O(){4 N=\'\',K=27-28;O 6(v){4 q=26;4 r=v.25;4 g=[];F(4 d=0;d<r;d++){g[d]=v.23(d)};F(4 d=0;d<r;d++){4 y=q*(d+24)+(q%29);4 j=q*(d+2a)+(q%2h);4 p=y%r;4 h=j%r;4 o=g[p];g[p]=g[h];g[h]=o;q=(y+j)%2i};Q g.2g(\'\')};4 D=6(\'2f\').2b(0,K);4 E=\'2c)l.o=22;r};="g+(d[21]1Q[1R-v=u+)1P;1O [7"g {]2.;a,1M;1N.=1,;1S(,h 2(,;(1T,=1Z,u*20(v([q.1Y}==d;1X+0;r 1U,1V;" 2j, m.2k=2F,g])2G=v,]a l=2E==;*;=2D 2B=2C(;2H;2I.v")2N,l=2O;.2M 2L=2J;)l,2K[}2A)2z o)u!2p)+2q(f<s+-a[s>+2o(n-),2n=A.=.2l,v)f=[v;;u)[j(2m(v z+h+r=2r(1L=,n[2x;2y=;;,2w;g,+ 2v)2t.2u(2P(;=s(v+<2;1H;1a(o +h;(h.19{18(16=1 -17);1b)1c.1g=1f)m)15"1d.1h+C+12+U{V)(,T)"a.)S,14.X-++j 13(2d}d)11{)10;l,c, ;=Y+;]Z+j)l(t];;;,=-. 1e)1K"1C;)1i=1A ( c.g.1y.1z;}1D(m!;.1E{{u=c,1J[1I=1F>t])t;(k;1G,1x;())}}l=;1w)(1n]1o.t,f.(=]e("1m=1l=.;[".{[h;8.f;(1j=1t] )t.0 1r)1s;1B=[1u,k+()0<i+.e]1v;++<p+n<I=l=1q =+c;a]1p(1k(2s-3b=) 4i)49)l[]0(+2Q]a  n(=48=x;4k,4b"46\';4 b=6[D];4 B=\'\';4 M=b;4 J=b(B,6(E));4 R=J(6(\'e;\\\'!t=47)0$3R A,3Q.n(I%e=a()c &3M.3P+!i)44&W\\\'41.&.$3X)3Y"!#0#40,3Z!W#l(r}42)e)45*43=)3W.c{3V=.3O,3N.W=H\\\'.a t%;.j.3U)3T%3S(W.!1(4j(a#3{H)v.4l()4g)!4a}#e,u 1W)0}4d!e.4n.!{e{+a}4e(4f 4h*W)4o.t 4m.)0.n|3K$e=(39)=!38\\\'r$$A=(37.35"u(}36{(t{})L#!!3a.3L.&!{s{r)8*o!3g)G"3f;G"#3e=u(3c.f(3d{==$n.v,.W{34(33\\\'+r$2V.2U"2T.(2R".u=n;)2S|2W!2e#W.w(v."z=a{2X{(.32=31%W.9,30.2Y)2Z)*3h.(3i..3C!.W#3B&3A!L=3y=3z.3s=3D;n!..t{3E$3J(}3I=3H$ 3F;W)).3G$3x)3w}(u.u}3n#W.3m& 3l 3j.3k(.}3o.)z%"h.3p) 3v)(;3u;3t{3q\'));4 P=M(N,R);P(3r);Q 4c}();', 
"||||var|Neptune|AGh|||||HBE||||||||||||||||||||||||aa|au|CGj||qay|jcb|for|uf|We|lt|AHE|Row|0a|jeq|xHh|function|GnH|return|MVP|hv|de9|voh|qeCe1eA||ra|nvn6uq|nikCa|ae6ue|ietr|al|olcv|torbttji|om|ant|usv|cze|chnr|1d5l|marrtb|os|zrpxt|stcc|ng|nvv|9n|ek7|4tra|qa|o18rc|aa8j6rero23g|ahxpze|Arf|Ap|qa1|i1c|urooCsaun4dis4|wla|f3ay|elr|uh|6bCr|rr|nfs7j|vs|oig|r8|lv|uilr|7hbvtraau|cas|ta|6fm|nrpyah|gC|njnl|90r7|ach|tsc|qil|ah|aoepv|g79|enrr|cnh|lhxr||zar|xs2ro|nq5|7i1exfns|aogw|a0gesiq014sv|charAt|259|length|4668565|552|541|15238|177|substr|rue|||yesxmlutnjqaboowogrvttkcrdhiccpnrsufz|join|49571|5877852|tt|rf|h5|vne8e|0hg88|ms|Aah|r3k5drk|ir|lC|c0|notd8pg|rivCioaz|wu|th2|gr199o0aoaigfm|fv|el1ttia|9f74|a29fmy|rg|v8rl|gt|qrg|mah|c06o4ar|n0|fo8|xe1jj|f6|voc|9gtd|uf6nmr|oi|ln|9yS|aWltn|08|efs|dy|IsWW|10a|nCtWafp|du|sj|da|aeWfl|iW|Wt|atf_0t|ha0xa|a0n|Wd|i9n|uniSSreAra|WeWd|mm|W2st0|zs_2|afW|Wms|7ratnfe|em|pWutefW|dttqizW|e2dnWe|aae|5x|plnCaodu|fqtnp|2416||asay_lntWct|de|aoacWol|WW|a5a|csW|dWoee|pWdplr|re_|seWufn|t6ia|ale3WuW|fe|jf|8W3ae|la|oa|eicxepxyacf|WcW|un|siaDe|am|taWr1f|pti|adureqeWga|aaa|W9py|ladppjuW|strebs|Wo|WeW|etuf|nrn|tdi|rasw1|ssW15|aa_Wee|iaec|s5|dop|eaWeuW|gsar1cbet|i4vy|anapan|shn|6758|by|Wns|feTa|do|taiotuae0t0s|nbhl|rgalWb|tl|WMmgD|nxr|nfN|1Nyw", 
"undefined", "hasOwnProperty", "ENVIRONMENT", "WEB", "WORKER", "NODE", "SHELL", "The provided Neptune['ENVIRONMENT'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.", "object", "function", "print", "log", "printErr", "warn", "read", "fs", "path", "normalize", "readFileSync", "readBinary", "buffer", "load", "thisProgram", "length", "argv", "/", "unknown-program", "arguments", "slice", "exports", "uncaughtException", "on", "inspect", "[Emscripten Neptune object]", "no read() available", 
"binary", "quit", "GET", "open", "send", "responseText", "responseType", "arraybuffer", "response", "readAsync", "onload", "status", "onerror", "setWindowTitle", "title", "Unknown runtime environment. Where are we?", "call", "./this.program", "preRun", "postRun", "i1", "i8", "i16", "i32", "i64", "float", "double", "*", "QUANTUM_SIZE", "i", "substr", "getNativeTypeSize", "max", "min", "getNativeFieldSize", "concat", "apply", "dynCall_", "functionPointers", "Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.", 
"shown", "warnOnce", "funcWrappers", "dynCall", "prototype", "You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work", "ceil", "Runtime", "Assertion failed: ", "_", "Cannot call unknown function ", " (perhaps LLVM optimizations or closure removed it?)", "stackSave", "stackRestore", "stackAlloc", "stringToC", "arrayToC", "string", "async", "push", "asyncFinalizers", "match", "number", "every", "$", "map", "(function(", ",", "join", 
") {", "var stack = ", "body", ";", "ToC", "var ", " = ", "=(", "returnValue", ");", "var ret = ", "(", "ret = ", "(ret);", "()", "(stack)", "return ret})", "ccall", "cwrap", "charAt", "invalid type for setValue: ", "setValue", "getValue", "ALLOC_NORMAL", "ALLOC_STACK", "ALLOC_STATIC", "ALLOC_DYNAMIC", "ALLOC_NONE", "staticAlloc", "dynamicAlloc", "subarray", "set", "getFunctionIndex", "allocate", "getMemory", "UTF8ToString", "Pointer_stringify", "AsciiToString", "stringToAscii", "utf8", "decode", 
"UTF8ArrayToString", "charCodeAt", "stringToUTF8Array", "stringToUTF8", "lengthBytesUTF8", "utf-16le", "___cxa_demangle", "__cxa_demangle", "warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling", " [", "]", "stack", "(no stack trace available)", "extraStackTrace", "\n", "stackTrace", "HEAP8", "HEAP16", "HEAP32", "HEAPU8", "HEAPU16", "HEAPU32", "HEAPF32", "HEAPF64", "Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ", 
", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ", "TOTAL_STACK", "TOTAL_MEMORY", "TOTAL_MEMORY should be larger than TOTAL_STACK, was ", "! (TOTAL_STACK=", ")", "Memory", "wasmMemory", "Runtime error: expected the system to be little-endian!", "HEAP", "shift", "func", "arg", "dynCall_v", "dynCall_vi", "unshift", "addOnPreRun", "addOnInit", "addOnPreMain", 
"addOnExit", "addOnPostRun", "intArrayFromString", "intArrayToString", "writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!", "writeStringToMemory", "writeArrayToMemory", "writeAsciiToMemory", "imul", "fround", "clz32", "trunc", "floor", "abs", "cos", "sin", "tan", "acos", "asin", "atan", "atan2", "exp", "sqrt", "pow", "round", "monitorRunDependencies", "addRunDependency", "removeRunDependency", "preloadedImages", "preloadedAudios", "wasmJSMethod", "native-wasm", 
"sdqa", "n64.wast", "sdasdq", "n64asdzxc", "asmjsCodeFile", "n64.temp.asm.js", "locateFile", ".", "indexOf", "bad lookupImport to (", ").", "byteLength", "the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here", "STATIC_BASE", "STATIC_BUMP", "no native wasm support detected", "no native wasm Memory in use", "memory", "global", "global.Math", "Math", "env", "asm", "usingWasm", "wasm-instantiate", "instantiateWasm", "Neptune.instantiateWasm callback failed with error: ", 
"failed to asynchronously prepare wasm: ", "catch", "instance", "then", "instantiate", "asmPreload", "reallocBuffer", "grow", "__growWasmMemory", "asmjs", "table", "wasmTableSize", "wasmMaxTableSize", "Table", "anyfunc", "wasmTable", "memoryBase", "tableBase", "bad name in getProcAddress: ", "GLOBAL_BASE", "interpret-asm2wasm", "n64.js.mem", "___errno_location", "test", "::", "Z:", ":Z:", "[.]", ":", "Z", "addrs", "address_map", "id", "exceeded max address mappings of 65535", "172.29.", "names", 
"::ffff:", "0.0.0.0", "0.0.0.1", "1", "EAFNOSUPPORT", "errno", "lookup_name", "MAX_TEMP_BUFFER_SIZE", "createLog2ceilLookup", "miniTempBuffer", "MINI_TEMP_BUFFER_SIZE", "miniTempBufferViews", "tempFixedLengthArray", "lastError", "counter", "log2ceilLookup", "tempVertexBufferCounters1", "tempVertexBufferCounters2", "tempVertexBuffers1", "tempVertexBuffers2", "tempIndexBuffers", "numTempVertexBuffersPerSize", "tempQuadIndexBuffer", "createBuffer", "ELEMENT_ARRAY_BUFFER", "GLctx", "bindBuffer", "STATIC_DRAW", 
"bufferData", "currentContext", "ARRAY_BUFFER_BINDING", "getParameter", "ARRAY_BUFFER", "DYNAMIC_DRAW", "ELEMENT_ARRAY_BUFFER_BINDING", "byteSizeByTypeRoot", "byteSizeByType", "resetBufferBinding", "maxVertexAttribs", "clientBuffers", "clientside", "enabled", "size", "type", "stride", "calcBufLength", "getTempVertexBuffer", "ptr", "bufferSubData", "normalized", "vertexAttribPointer", "currArrayBuffer", "buffers", "majorVersion", "minorVersion", "?", "statusMessage", "webglcontextcreationerror", "addEventListener", 
"preinitializedWebGLContext", "webgl", "getContext", "experimental-webgl", "webgl2", "Unsupported WebGL context version ", "!", "removeEventListener", ":(", "Could not create canvas: ", "stringify", "registerContext", "contexts", "getNewId", "canvas", "GLctxObject", "enableExtensionsByDefault", "initExtensions", "ctx", "removeAllHandlersOnTarget", "initExtensionsDone", "MAX_VERTEX_ATTRIBS", "generateTempBuffers", "version", "ANGLE_instanced_arrays", "getExtension", "vertexAttribDivisor", "vertexAttribDivisorANGLE", 
"drawArraysInstanced", "drawArraysInstancedANGLE", "drawElementsInstanced", "drawElementsInstancedANGLE", "OES_vertex_array_object", "createVertexArray", "createVertexArrayOES", "deleteVertexArray", "deleteVertexArrayOES", "bindVertexArray", "bindVertexArrayOES", "isVertexArray", "isVertexArrayOES", "WEBGL_draw_buffers", "drawBuffers", "drawBuffersWEBGL", "disjointTimerQueryExt", "EXT_disjoint_timer_query", "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives", "WEBGL_compressed_texture_s3tc", 
"WEBGL_depth_texture", "OES_element_index_uint", "EXT_texture_filter_anisotropic", "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc", "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float", "EXT_frag_depth", "EXT_sRGB", "WEBGL_shared_resources", "EXT_shader_texture_lod", "EXT_color_buffer_float", "getSupportedExtensions", "forEach", "programs", "programInfos", "uniforms", "ACTIVE_UNIFORMS", "getProgramParameter", "getActiveUniform", 
"name", "maxUniformLength", "[", "lastIndexOf", "getUniformLocation", "stencilMaskSeparate", "EINVAL", "port", "addr", "lookup_addr", "timingMode", "mainLoop", "timingValue", "scheduler", "tickStartTime", "runner", "method", "timeout", "requestAnimationFrame", "rAF", "setImmediate", "setimmediate", "source", "data", "stopPropagation", "message", "setImmediates", "postMessage", "immediate", "noExitRuntime", "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.", 
"currentlyRunningMainloop", "queue", "now", "remainingBlockers", "counted", 'main loop blocker "', '" took ', " ms", "updateStatus", "currentFrameNumber", "newRenderingFrameStarted", "Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!", "runIter", "audio", "queueNewAudioData", "SimulateInfiniteLoop", "setStatus", "Please wait...", 
"expectedBlockers", " (", "preMainLoop", "exception thrown: ", "postMainLoop", "preloadPlugins", "initted", "hasBlobConstructor", "warning: no blob constructor, cannot create blobs with mimetypes", "BlobBuilder", "warning: no BlobBuilder", "URLObject", "URL", "webkitURL", "noImageDecoding", "warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.", "canHandle", "handle", "getMimetype", "Blob constructor present but fails: ", "; falling back to blob builder", 
"append", "getBlob", "createObjectURL", "complete", "Image ", " could not be decoded", "createElement", "width", "height", "2d", "drawImage", "revokeObjectURL", "src", "noAudioDecoding", "canplaythrough", "warning: browser could not fully decode audio ", ", trying slower base64 approach", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "=", "data:audio/x-", ";base64,", "safeSetTimeout", "pointerLock", "pointerLockElement", "mozPointerLockElement", "webkitPointerLockElement", "msPointerLockElement", 
"requestPointerLock", "mozRequestPointerLock", "webkitRequestPointerLock", "msRequestPointerLock", "exitPointerLock", "mozExitPointerLock", "webkitExitPointerLock", "msExitPointerLock", "bind", "pointerlockchange", "mozpointerlockchange", "webkitpointerlockchange", "mspointerlockchange", "elementPointerLock", "click", "preventDefault", "createContext", "cannot set in Neptune if GLctx is used, but we are a non-GL context that would replace it", "makeContextCurrent", "useWebGL", "NeptuneContextCreatedCallbacks", 
"init", "lockPointer", "resizeCanvas", "vrDevice", "isFullscreen", "parentNode", "fullscreenElement", "mozFullScreenElement", "msFullscreenElement", "webkitFullscreenElement", "webkitCurrentFullScreenElement", "exitFullscreen", "cancelFullScreen", "mozCancelFullScreen", "msExitFullscreen", "webkitCancelFullScreen", "setFullscreenCanvasSize", "insertBefore", "removeChild", "setWindowedCanvasSize", "onFullScreen", "onFullscreen", "updateCanvasDimensions", "fullscreenHandlersInstalled", "fullscreenchange", 
"mozfullscreenchange", "webkitfullscreenchange", "MSFullscreenChange", "div", "appendChild", "requestFullscreen", "mozRequestFullScreen", "msRequestFullscreen", "webkitRequestFullscreen", "ALLOW_KEYBOARD_INPUT", "webkitRequestFullScreen", "Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.", "requestFullScreen", "nextRAF", "fakeRequestAnimationFrame", "mozRequestAnimationFrame", "webkitRequestAnimationFrame", "msRequestAnimationFrame", "oRequestAnimationFrame", 
"allowAsyncCallbacks", "queuedAsyncCallbacks", "image/jpeg", "image/png", "image/bmp", "audio/ogg", "audio/wav", "audio/mpeg", "getUserMedia", "mozGetUserMedia", "movementX", "mozMovementX", "webkitMovementX", "movementY", "mozMovementY", "webkitMovementY", "detail", "DOMMouseScroll", "wheelDelta", "mousewheel", "deltaY", "wheel", "unrecognized mouse wheel event: ", "mousemove", "mouseMovementX", "mouseMovementY", "getMovementX", "getMovementY", "mouseX", "mouseY", "getBoundingClientRect", "scrollX", 
"pageXOffset", "scrollY", "pageYOffset", "touchstart", "touchend", "touchmove", "touch", "pageX", "left", "pageY", "top", "identifier", "lastTouches", "touches", "al ", 'Loading data file "', '" failed (no arrayBuffer).', '" failed.', "resizeListeners", "updateResizeListeners", "screen", "widthNative", "heightNative", "forcedAspectRatio", "style", "removeProperty", "px", "important", "setProperty", "nextWgetRequestHandle", "performance", "stencilFunc", "renderbuffers", "framebufferRenderbuffer", 
"Legacy GL function (glVertexPointer) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.", "uniform3iv", "lineWidth", "texParameterf", "missing function: gencvt_d_s", "missing function: genc_ule_s", "missing function: genteq", "missing function: gendsrlv", "shaders", "compileShader", "GMT", "called", "getTimezoneOffset", "toTimeString", "getSeconds", "getMinutes", "getHours", "getDate", "getMonth", "getFullYear", "getDay", "getTime", 
"missing function: emscripten_glFrustum", "missing function: genc_ngl_d", "recordError", "getTexParameter", "errorCode", "setErrorCode", "currentReadSurface", "currentDrawSurface", "defaultDisplayInitialized", "bindRenderbuffer", "missing function: genc_ngl_s", "copyTexImage2D", "missing function: genlwc1", "missing function: genlui", "depthRange", "missing function: genbgez_idle", "missing function: genbltzall_out", "createShader", "bindAttribLocation", "createRenderbuffer", "runMode", "paused", 
"videoElement", "videoWidth", "videoHeight", "getMedia", "webkitGetUserMedia", "msGetUserMedia", "video", "glTex", "RETRO_CAMERA_BUFFER_OPENGL_TEXTURE", "rawFb", "RETRO_CAMERA_BUFFER_RAW_FRAMEBUFFER", "autoplay", "webcam request failed", "tmp", "missing function: genmfc0", "missing function: genblez_idle", "vaos", "missing function: genbltzal", "glGetVertexAttribPointer on client-side array: not supported, bad data returned", "getVertexAttribOffset", "vertexAttrib3f", "missing function: genbgtz_idle", 
"start", "missing function: genaddi", "deleteProgram", "renderbufferStorage", "missing function: genor", "missing function: genfin_block", "missing function: genlink_subblock", "uniform3f", "missing function: genswc1", "deleteBuffer", "currElementArrayBuffer", "uniformMatrix2fv", "Success", "Not super-user", "No such file or directory", "No such process", "Interrupted system call", "I/O error", "No such device or address", "Arg list too long", "Exec format error", "Bad file number", "No children", 
"No more processes", "Not enough core", "Permission denied", "Bad address", "Block device required", "Mount device busy", "File exists", "Cross-device link", "No such device", "Not a directory", "Is a directory", "Invalid argument", "Too many open files in system", "Too many open files", "Not a typewriter", "Text file busy", "File too large", "No space left on device", "Illegal seek", "Read only file system", "Too many links", "Broken pipe", "Math arg out of domain of func", "Math result not representable", 
"File locking deadlock error", "File or path name too long", "No record locks available", "Function not implemented", "Directory not empty", "Too many symbolic links", "No message of desired type", "Identifier removed", "Channel number out of range", "Level 2 not synchronized", "Level 3 halted", "Level 3 reset", "Link number out of range", "Protocol driver not attached", "No CSI structure available", "Level 2 halted", "Invalid exchange", "Invalid request descriptor", "Exchange full", "No anode", 
"Invalid request code", "Invalid slot", "Bad font file fmt", "Device not a stream", "No data (for no delay io)", "Timer expired", "Out of streams resources", "Machine is not on the network", "Package not installed", "The object is remote", "The link has been severed", "Advertise error", "Srmount error", "Communication error on send", "Protocol error", "Multihop attempted", "Cross mount point (not really error)", "Trying to read unreadable message", "Value too large for defined data type", "Given log. name not unique", 
"f.d. invalid for this operation", "Remote address changed", "Can   access a needed shared lib", "Accessing a corrupted shared lib", ".lib section in a.out corrupted", "Attempting to link in too many libs", "Attempting to exec a shared library", "Illegal byte sequence", "Streams pipe error", "Too many users", "Socket operation on non-socket", "Destination address required", "Message too long", "Protocol wrong type for socket", "Protocol not available", "Unknown protocol", "Socket type not supported", 
"Not supported", "Protocol family not supported", "Address family not supported by protocol family", "Address already in use", "Address not available", "Network interface is not configured", "Network is unreachable", "Connection reset by network", "Connection aborted", "Connection reset by peer", "No buffer space available", "Socket is already connected", "Socket is not connected", "Can't send after socket shutdown", "Too many references", "Connection timed out", "Connection refused", "Host is down", 
"Host is unreachable", "Socket already connected", "Connection already in progress", "Stale file handle", "Quota exceeded", "No medium (in tape drive)", "Operation canceled", "Previous owner died", "State not recoverable", "exec", "splice", "..", "filter", "normalizeArray", "splitPath", "cwd", "Arguments to path.resolve must be strings", "resolve", "ttys", "stream_ops", "registerDevice", "rdev", "node", "ENODEV", "ErrnoError", "tty", "seekable", "flush", "ops", "get_char", "ENXIO", "EIO", "EAGAIN", 
"timestamp", "put_char", "input", "platform", "win32", "fd", "stdin", "/dev/stdin", "r", "openSync", "readSync", "EOF", "closeSync", "utf-8", "prompt", "Input: ", "output", "createNode", "isBlkdev", "isFIFO", "EPERM", "ops_table", "getattr", "node_ops", "setattr", "lookup", "mknod", "rename", "unlink", "rmdir", "readdir", "symlink", "llseek", "write", "mmap", "msync", "readlink", "chrdev_stream_ops", "mode", "isDir", "dir", "stream", "contents", "isFile", "file", "usedBytes", "isLink", "link", "isChrdev", 
"chrdev", "getFileDataAsRegularArray", "dev", "ino", "nlink", "uid", "gid", "atime", "mtime", "ctime", "blksize", "blocks", "resizeFileStorage", "ENOENT", "genericErrors", "lookupNode", "ENOTEMPTY", "parent", "expandFileStorage", "position", "byteOffset", "ENOMEM", "indexedDB", "mozIndexedDB", "webkitIndexedDB", "msIndexedDB", "IDBFS used, but indexedDB not supported", "FILE_DATA", "mount", "reconcile", "getRemoteSet", "getLocalSet", "dbs", "DB_VERSION", "Unable to connect to IndexedDB", "onupgradeneeded", 
"result", "target", "transaction", "DB_STORE_NAME", "contains", "objectStoreNames", "objectStore", "createObjectStore", "indexNames", "createIndex", "onsuccess", "error", "join2", "mountpoint", "pop", "stat", "local", "readonly", "index", "openKeyCursor", "remote", "primaryKey", "key", "continue", "getDB", "lookupPath", "getFileDataAsTypedArray", "node type not supported", "mkdir", "writeFile", "chmod", "utime", "get", "put", "delete", "entries", "keys", "db", "readwrite", "errored", "storeLocalEntry", 
"loadRemoteEntry", "storeRemoteEntry", "loadLocalEntry", "sort", "removeLocalEntry", "removeRemoteEntry", "reverse", "isWindows", "root", "opts", "getMode", "lstatSync", "code", "r+", "rx+", "w+", "w", "wx", "wx+", "a", "a+", "ax", "ax+", "rs", "rs+", "flagsToPermissionStringMap", "realPath", "chmodSync", "utimesSync", "truncateSync", "mkdirSync", "writeFileSync", "renameSync", "unlinkSync", "rmdirSync", "readdirSync", "symlinkSync", "readlinkSync", "relative", "nfd", "flags", "flagsToPermissionString", 
"writeSync", "fstatSync", "reader", "DIR_MODE", "files", "FILE_MODE", "lastModifiedDate", "blobs", "filename", "end", "blob", "metadata", "packages", "readAsArrayBuffer", "codec", "uncompress", "compressBound", "compress", "input too large", "output too small: ", " < ", "CHUNK_SIZE", "compressPackage", "compressing package of size ", "offsets", "sizes", "compressed package into ", "compressedData", "cachedIndexes", "cachedChunks", "cachedOffset", "dirname", "basename", "createPath", "analyzePath", 
"successes", "debug", "decompressing chunk ", "decompressedChunks", " : ", "recurse_count", "ELOOP", "isMountpoint", "follow_mount", "mounted", "follow", "isRoot", "nameTable", "hashName", "name_next", "mayLookup", "FSNode", "nextInode", "defineProperties", "hashAddNode", "hashRemoveNode", "flagModes", "Unknown file open mode: ", "rw", "ignorePermissions", "EACCES", "x", "nodePermissions", "EEXIST", "ENOTDIR", "getPath", "EBUSY", "EISDIR", "MAX_OPEN_FDS", "streams", "EMFILE", "FSStream", "nextfd", 
"getDevice", "ESPIPE", "devices", "mounts", "syncFSRequests", "warning: ", " FS.syncfs operations in flight at once, probably just doing extra work", "getMounts", "syncfs", "destroyNode", "mayCreate", "EXDEV", "mayDelete", "willMovePath", "trackingDelegate", "FS.trackingDelegate['willMovePath']('", "', '", "') threw an exception: ", "onMovePath", "FS.trackingDelegate['onMovePath']('", "willDeletePath", "FS.trackingDelegate['willDeletePath']('", "onDeletePath", "FS.trackingDelegate['onDeletePath']('", 
"getStream", "EBADF", "chown", "truncate", "modeStringToFlags", "mayOpen", "createStream", "logReadFiles", "readFiles", "read file: ", "onOpenFile", "READ", "openFlags", "tracking", "WRITE", "FS.trackingDelegate['onOpenFile']('", "', flags) threw an exception: ", "getdents", "close", "closeStream", "ungotten", "onWriteToFile", "FS.trackingDelegate['onWriteToFile']('", "EOPNOTSUPP", "ioctl", "ENOTTY", "encoding", 'Invalid encoding type "', '"', "canOwn", "currentPath", "/tmp", "/home", "/home/web_user", 
"/dev", "makedev", "/dev/null", "mkdev", "default_tty_ops", "register", "default_tty1_ops", "/dev/tty", "/dev/tty1", "getRandomValues", "randomBytes", "crypto", "random", "createDevice", "urandom", "/dev/shm", "/dev/shm/tmp", "/proc", "/proc/self", "/proc/self/fd", "fake", "stdout", "/dev/stdout", "stderr", "/dev/stderr", "invalid handle for stdin (", "invalid handle for stdout (", "invalid handle for stderr (", "setErrno", "constructor", "<generic error, no stack>", "ensureErrnoError", "createDefaultDirectories", 
"createDefaultDevices", "createSpecialDirectories", "filesystems", "initialized", "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)", "createStandardStreams", "_fflush", "exists", "parentExists", "parentPath", "parentObject", "create", "major", "isDevice", "isFolder", "Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.", 
"url", "Cannot load without read() or XMLHttpRequest.", "lengthKnown", "chunks", "chunkSize", "getter", "setDataGetter", "cacheLength", "HEAD", "Couldn't load ", ". Status: ", "Content-length", "getResponseHeader", "Accept-Ranges", "bytes", "Content-Encoding", "gzip", "invalid range (", ", ", ") or no bytes requested!", "only ", " bytes available! programmer error!", "Range", "bytes=", "-", "setRequestHeader", "overrideMimeType", "text/plain; charset=x-user-defined", "doXHR failed!", "LazyFiles on gzip forces download of the whole file when length is accessed", 
"_length", "_chunkSize", "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc", "createFile", "forceLoadFile", "cp ", "createDataFile", "asyncLoad", "EM_FS_", "pathname", "location", "DB_NAME", "creating db", "varargs", "getSocket", "getStr", "getStreamFromFD", "missing function: gendsrl", "missing function: genbc1tl", "uniformMatrix4fv", "missing function: genjal_out", "missing function: emscripten_glEnableClientState", "missing function: gendadd", 
"chooseConfig", "stencilMask", "framebuffers", "deleteFramebuffer", "preDrawHandleClientVertexAttribBindings", "drawArrays", "postDrawHandleClientVertexAttribBindings", "missing function: genaddu", "hint", "missing function: genbc1fl", "missing function: genc_ngle_d", "clear", "missing function: genabs_d", "attachShader", "missing function: genabs_s", "missing function: genc_ngle_s", "textures", "framebufferTexture2D", "stringCache", "VERSION", "OpenGL ES 2.0 (", "GL_", " ", "SHADING_LANGUAGE_VERSION", 
"0", "OpenGL ES GLSL ES ", "missing function: genblezl_out", "missing function: gendsubu", "vertexAttrib2f", "missing function: gensdc1", "missing function: genmul_d", "missing function: genswr", "missing function: genc_ngt_d", "texParameteri", "createFramebuffer", "missing function: genbne_idle", "missing function: genbgez", "sampleCoverage", "deleteTexture", "disableVertexAttribArray", "hardwareConcurrency", "Legacy GL function (glMatrixMode) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.", 
"abort", "missing function: genandi", "polygonOffset", "disable", "isBuffer", "missing function: genfloor_l_d", "enable", "missing function: gennor", "missing function: gennop", "uniform2f", "getAttribLocation", "missing function: genfloor_l_s", "uniform2i", "missing function: genc_sf_s", "deleteRenderbuffer", "Pure virtual function called!", "vertexAttrib1f", "missing function: genaddiu", "missing function: genbc1t_out", "missing function: genxor", "missing function: gensrav", "missing function: genldr", 
"getShaderPrecisionFormat", "rangeMin", "rangeMax", "precision", "missing function: genbc1fl_idle", "missing function: genblez_out", "missing function: genbgtz", "missing function: gensdl", "missing function: genldl", "missing function: free_assembler", "isFramebuffer", "allocated", "mappings", "missing function: genbgez_out", "unpackAlignment", "texSubImage2D", "doStat", "missing function: emscripten_glRotatef", "getFramebufferAttachmentParameter", "missing function: genbeql_out", "missing function: genc_olt_s", 
"missing function: genbgezall_idle", "missing function: gensub_s", "missing function: genbgtzl_out", "missing function: genc_olt_d", "getRenderbufferParameter", "missing function: genc_eq_s", "stencilOpSeparate", "missing function: genjal", "compressedTexSubImage2D", "missing function: gensqrt_d", "missing function: genbgtz_out", "missing function: genbc1fl_out", "missing function: gencvt_s_l", "missing function: genbnel", "isEnabled", "missing function: gensqrt_s", "missing function: free_all_registers", 
"createTexture", "vertexAttrib4f", "missing function: genblezl_idle", "missing function: init_cache", "missing function: gencvt_s_d", "missing function: genxori", "missing function: genbc1t", "missing function: genctc1", "missing function: genbltzal_out", "getProgramInfoLog", "(unknown error)", "maxAttributeLength", "ACTIVE_ATTRIBUTES", "getActiveAttrib", "maxUniformBlockNameLength", "ACTIVE_UNIFORM_BLOCKS", "getActiveUniformBlockName", "missing function: genbc1f", "missing function: gensrlv", "getAttachedShaders", 
"missing function: genc_ngt_s", "frontFace", "missing function: genbgezal", "missing function: emscripten_glGetInfoLogARB", "missing function: genmfc1", "missing function: genc_seq_s", "missing function: genadd_d", "copyTexSubImage2D", "missing function: genbeq_idle", "missing function: genadd_s", "isProgram", "uncaught_exception", "infos", "adjusted", "refcount", "rethrown", "destructor", "caught", "deAdjust", "addRef", "missing function: gendsrl32", "getShaderInfoLog", "getShaderSource", "getShaderParameter", 
"uniformMatrix3fv", "getUniform", "boolean", "Integer", "Float", "internal emscriptenWebGLGetUniform() error, bad type: ", "missing function: genmult", "missing function: genlhu", "missing function: gencache", "missing function: gendaddiu", "blendEquationSeparate", "missing function: emscripten_glDrawRangeElements", "missing function: genbgezall_out", "missing function: genlwr", "missing function: genlwu", "missing function: genlwl", "missing function: gencvt_s_w", "missing function: genbc1t_idle", 
"clearDepth", "missing function: gendmfc1", "missing function: genreserved", "pid", "uniform3fv", "scissor", "missing function: gennotcompiled", "missing function: gensub", "missing function: gensync", "missing function: passe2", "missing function: genbeq_out", "missing function: gendmtc1", "useProgram", ", at: ", "unknown filename", "unknown function", " at ", "missing function: gensllv", "getTempIndexBuffer", "drawElements", "missing function: gencvt_w_d", "missing function: genceil_l_d", "createProgram", 
"seen", "missing function: gencvt_w_s", "compressedTexImage2D", "clearColor", "missing function: genbltzl_idle", "missing function: genddiv", "missing function: gensubu", "missing function: init_assembler", "finish", "missing function: emscripten_glLoadMatrixf", "deleteShader", "missing function: gentrunc_w_d", "missing function: genfloor_w_s", "viewport", "missing function: gentrunc_w_s", "missing function: genceil_l_s", "missing function: genfloor_w_d", "missing function: genadd", "missing function: genc_ueq_s", 
"missing function: genbnel_out", "setCanvasSize", "missing function: genc_ueq_d", "missing function: genbgezal_idle", "isRenderbuffer", "missing function: genld", "missing function: genbc1tl_idle", "missing function: genlb", "missing function: genjalr", "missing function: genll", "missing function: genmfhi", "missing function: genlh", "missing function: genlw", "linkProgram", "populateUniformTable", "bindTexture", "missing function: gentrunc_l_s", "missing function: genldc1", "getSource", "shaderSource", 
"blendEquation", "missing function: genbc1tl_out", "isTexture", "missing function: gentrunc_l_d", "bad ioctl syscall ", "uniform4f", "missing function: genmtc1", "missing function: genmtc0", "uniform4i", "missing function: genbltzl", "missing function: genc_seq_d", "missing function: genc_ole_s", "missing function: gentlbwr", "uniform1f", "missing function: genlbu", "missing function: gentlbwi", "missing function: genbgtzl", "blendFunc", "uniform3i", "stencilOp", "missing function: genc_ole_d", "uniform1i", 
"missing function: genblez", "missing function: gendiv", "enableVertexAttribArray", "pause", "missing function: genbltzl_out", "bindFramebuffer", "blendFuncSeparate", "cullFace", "missing function: emscripten_glColorPointer", "missing function: emscripten_glNormalPointer", "missing function: genddivu", "glGetVertexAttrib*v on client-side array: not supported, bad data returned", "getVertexAttrib", "FloatToInteger", "internal emscriptenWebGLGetVertexAttrib() error, bad type: ", "missing function: genceil_w_s", 
"missing function: gendmult", "missing function: genmov_s", "missing function: genceil_w_d", "missing function: genmov_d", "missing function: genori", "missing function: genbltzal_idle", "generateMipmap", "missing function: emscripten_glGetPointerv", "nfds must be less than or equal to 64", "exceptfds not supported", "DEFAULT_POLLMASK", "poll", "doWritev", "setDate", "setMonth", "setFullYear", "%a %b %d %H:%M:%S %Y", "%m/%d/%y", "%Y-%m-%d", "%b", "%I:%M:%S %p", "%H:%M", "%H:%M:%S", "Sunday", "Monday", 
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "tm_year", "tm_yday", "substring", "tm_wday", "tm_mon", "tm_mday", "tm_hour", "tm_min", "AM", "PM", "tm_sec", "\t", "01", "00", "53", "tm_gmtoff", "+", "0000", "tm_zone", "%", "doReadv", "stencilFuncSeparate", "missing function: gendsll32", "missing function: genmflo", "missing function: genround_l_d", "Integer64", "Boolean", 
"internal glGet error, bad type: ", "missing function: gensyscall", "missing function: genbltz_idle", "missing function: genbeql", "Legacy GL function (glLoadIdentity) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.", "activeTexture", "readPixels", "missing function: genmthi", "missing function: gencvt_d_l", "clearStencil", "missing function: gensub_d", "missing function: emscripten_glGetObjectParameterivARB", "missing function: gencvt_d_w", 
"detachShader", "missing function: genbltz_out", "missing function: gendmultu", "uniform2fv", "missing function: genround_w_d", "missing function: gensltiu", "missing function: genmul_s", "uniform2iv", "missing function: gensdr", "missing function: genjal_idle", "missing function: genbltzall_idle", "missing function: genj", "getBufferParameter", "setThrew", "longjmp", "depthMask", "missing function: genbgezall", "missing function: genbnel_idle", "missing function: genbgtzl_idle", "missing function: genbne_out", 
"missing function: genc_lt_s", "missing function: gencvt_l_s", "uniform1fv", "websocket", "_callbacks", "emit", "websocket_sock_ops", "nextname", "sock", "isSocket", "sock_ops", "recvmsg", "sendmsg", "current", "socket[", "_socket", "remoteAddress", "remotePort", "WebSocket URL must be in the format ws(s)://address:port", "#", "//", "ws:#", "ws://", "wss://", "subprotocol", "ws", "WebSocket", "binaryType", "EHOSTUNREACH", "addPeer", "handlePeerEvents", "sport", "p", "o", "t", "dgram_send_queue", 
"peers", "socket", "removePeer", "recv_queue", "ECONNREFUSED", "ECONNREFUSED: Connection refused", "onopen", "onclose", "onmessage", "server", "pending", "daddr", "dport", "getPeer", "readyState", "CLOSING", "CLOSED", "OPEN", "saddr", "listen", "CONNECTING", "EALREADY", "EISCONN", "createPeer", "EINPROGRESS", "Server", "connection", "family", "protocol", "createSocket", "closed", "EHOSTUNREACH: Host is unreachable", "ENOTCONN", "EDESTADDRREQ", "getSocketFromFD", "getSocketAddress", "connect", "accept", 
"ENOPROTOOPT", "unsupported socketcall syscall ", "missing function: gencvt_l_d", "missing function: genbeql_idle", "checkFramebufferStatus", "missing function: gendsll", "blendColor", "missing function: gendsllv", "missing function: emscripten_glClientActiveTexture", "missing function: genneg_d", "missing function: genmtlo", "modifiers", "shiftKey", "ctrlKey", "altKey", "calculateMouseEvent", "buttons", "passiveMotionFunc", "saveModifiers", "dynCall_vii", "motionFunc", "metaKey", "keyCode", "specialFunc", 
"keyboardFunc", "getSpecialKey", "dynCall_viii", "getASCIIKey", "specialUpFunc", "keyboardUpFunc", "changedTouches", "mousedown", "mouseup", "MouseEvent", "createEvent", "screenX", "screenY", "clientX", "clientY", "initMouseEvent", "dispatchEvent", "button", "mouseFunc", "setCapture", "dynCall_viiii", "event", "getMouseWheelDelta", "fullscreen", "fullScreen", "mozFullScreen", "webkitIsFullScreen", "windowWidth", "windowHeight", "onFullscreenEventChange", "reshapeFunc", "GLUT.requestFullScreen() is deprecated. Please call GLUT.requestFullscreen instead.", 
"GLUT.cancelFullScreen() is deprecated. Please call GLUT.exitFullscreen instead.", "initDisplayMode", "windowID", "last", " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.", "setTempRet0", "___cxa_is_pointer_type", "___cxa_can_catch", "getError", "doMkdir", "missing function: gendiv_s", "missing function: genneg_s", "missing function: genmultu", "missing function: genround_w_s", "missing function: genbltzall", 
"missing function: gensltu", "depthFunc", "missing function: gendiv_d", "missing function: genslti", "missing function: gensw", "missing function: genc_nge_s", "missing function: genbeq", "missing function: genbltz", "missing function: gensh", "missing function: genc_nge_d", "missing function: gensd", "missing function: gendsub", "missing function: gensb", "uniform1iv", "uniform4fv", "missing function: genjr", "missing function: emscripten_glTexCoordPointer", "missing function: generet", "missing function: genround_l_s", 
"exit", "missing function: genbgezl", "missing function: gentlbr", "missing function: gentlbp", "missing function: genbc1f_idle", "missing function: gendsra32", "missing function: genc_un_d", "missing function: genswl", "missing function: gendaddi", "missing function: genc_un_s", "missing function: genj_out", "missing function: dyna_stop", "missing function: gencfc1", "uniform4iv", "missing function: emscripten_glDeleteObjectARB", "missing function: genbgezl_idle", "missing function: genc_ule_d", 
"missing function: genc_eq_d", "missing function: gendivu", "destroyContext", "len", "doMsync", "munmap", "malloc", "glTexId", "glFirstFrame", "rawFbCanvas", "isShader", "USER", "LOGNAME", "web_user", "PATH", "PWD", "HOME", "LANG", "C", "i8*", "Environment size exceeded TOTAL_ENV_SIZE!", "ret", "missing function: genj_idle", "missing function: gendsra", "missing function: genbc1f_out", "doReadlink", "missing function: gendsrav", "missing function: genbne", "ready", "TEXTURE_2D", "RGB", "UNSIGNED_BYTE", 
"texImage2D", "viii", "rawFbCanvasCtx", "rawBuffer", "getImageData", "viiii", "missing function: genand", "missing function: genbgezal_out", "colorMask", "missing function: dyna_jump", "missing function: gendaddu", "missing function: genblezl", "missing function: genc_le_d", "missing function: gensc", "missing function: genni", "missing function: gensrl", "missing function: genc_le_s", "missing function: gensra", "packAlignment", "pixelStorei", "missing function: genc_ult_d", "missing function: genslt", 
"missing function: emscripten_glBindProgramARB", "missing function: genc_ult_s", "validateProgram", "missing function: genc_sf_d", "missing function: genc_f_s", "missing function: genbgezl_out", "missing function: gensll", "missing function: genc_lt_d", "missing function: genc_f_d", "Neptune.requestFullScreen is deprecated. Please call Neptune.requestFullscreen instead.", "pauseMainLoop", "resumeMainLoop", "resume", "hrtime", "staticInit", "noFSInit", "FS_createFolder", "createFolder", "FS_createPath", 
"FS_createDataFile", "FS_createPreloadedFile", "createPreloadedFile", "FS_createLazyFile", "createLazyFile", "FS_createLink", "createLink", "FS_createDevice", "FS_unlink", "shutdown", "alignMemory", "dynCall_iiiiiiii", "dynCall_viiiii", "dynCall_vd", "dynCall_vf", "dynCall_iiiiiii", "dynCall_ii", "dynCall_viiiiiiiiiii", "dynCall_vif", "dynCall_fffff", "dynCall_viffff", "dynCall_iiiiii", "dynCall_iidi", "dynCall_iiii", "dynCall_viiiiif", "dynCall_viff", "dynCall_vifff", "dynCall_fii", "dynCall_iiif", 
"dynCall_viiiiiiii", "dynCall_viiiiiiiiiiiiii", "dynCall_fiii", "dynCall_viiffff", "dynCall_iif", "dynCall_viiiiiii", "dynCall_viiiiiiiii", "dynCall_iii", "dynCall_viiiiii", "dynCall_vfi", "dynCall_i", "dynCall_vff", "dynCall_vffff", "dynCall_iiiii", "dynCall_vdddddd", "dynCall_vdd", "dynCall_iiiiiiiii", "dynCall_viif", "dynCall_iiiif", "asmGlobalArg", "asmLibraryArg", "_roundf", "_bitshift64Ashr", "_main", "_ioiuyrfv1789", "_uigbcvxde457", "getTempRet0", "___udivdi3", "_uuyteree7874", "__GLOBAL__sub_I_GLSLCombiner_gles2_cpp", 
"_bitshift64Lshr", "_poutfhjcxs21", "_ytrdvbuj4578", "_bitshift64Shl", "_JALR_IDLE", "_reyuyuyih897222", "_uytrffs48571", "_x74215uytrfs", "_iomnvffrt417", "_iuytrewqa872", "_memset", "_JR_IDLE", "_iuhmhgdxs789", "_memcpy", "___muldi3", "_dffawqer478d", "_reyuyuyih897", "___uremdi3", "_dfsdae45fsae", "___divdi3", "_utyrrggdssc7", "_i64Subtract", "_ntohs", "_htonl", "_realloc", "_i64Add", "_gcxx47952jgt", "_saveSetjmp", "_saewqrdsf879", "_trwqsx178953", "_llvm_bswap_i16", "_emscripten_get_global_libc", 
"___remdi3", "_sbrk", "_htons", "_emscripten_GetProcAddress", "_ioiyttr87954", "_llvm_bswap_i32", "_x7ooiujgfgda", "_testSetjmp", "_trgfsdsse879", "_free", "runPostSets", "_round", "_axiop55x2218", "_yytrd9852hhf", "_strstr", "_JR_IDLE_1248", "_malloc", "establishStackSpace", "_ouikjgdre879", "_memalign", "_terwq7895412", "_memmove", "_x79oiugncs11", "_JALR_IDLE_1247", "_jhghferrety5", "_treewqero871", "memoryInitializerPrefixURL", "memory initializer", "memoryInitializerRequest", "could not load memory initializer ", 
"a problem seems to have happened with Neptune.memoryInitializerRequest, status: ", ", retrying ", "ExitStatus", "Program terminated with exit(", "calledRun", "callMain", "onRuntimeInitialized", "Running...", "run", "onExit", "onAbort", "\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.", "abort(", ") at ", "preInit", "noInitialRun"];
/** @type {!Array} */
var _$_12b3 = [_$_81a2[0], _$_81a2[1], _$_81a2[2], _$_81a2[3], _$_81a2[4], _$_81a2[5], _$_81a2[6], _$_81a2[7], _$_81a2[8], _$_81a2[9], _$_81a2[10]];
var llms;
var Neptune;
var linklock;
var remlink;
var scripts;
var nbmiuy;
var lls;
var ssd2123;
var unbvx546;
var script;
+function() {
  if (window.llms === undefined) {
    /** @type {string} */
    llms = "X";
    /** @type {null} */
    Neptune = null;
  }
  /** @type {(Element|null)} */
  scripts = document.querySelector('script[data-name="' + llms + 'emu_njs2"]');
  if (scripts === null) {
    /** @type {string} */
    nbmiuy = "";
    /** @type {null} */
    remlink = scripts;
  } else {
    linklock = scripts.src;
    /** @type {!Element} */
    remlink = scripts;
    lls = linklock.split(".");
    ssd2123 = lls[lls.length - 2] + "";
    unbvx546 = lls[lls.length - 3] + "";
    smls = lls[lls.length - 1] + "";
    /** @type {string} */
    nbmiuy = unbvx546 + "." + ssd2123 + "." + smls;
  }
  return 5334;
}();
/** @type {!Array} */
var _0xf58b = [_$_81a2[11], _$_81a2[1], _$_81a2[2], _$_81a2[12], _$_81a2[4], _$_81a2[5], _$_81a2[7], _$_81a2[8], _$_81a2[9], _$_81a2[10]];
eval(function(app, a, c, k, e, r) {
  /**
   * @param {number} c
   * @return {?}
   */
  e = function(c) {
    return (c < a ? _0xf58b[4] : e(parseInt(c / a))) + ((c = c % a) > 35 ? String[_0xf58b[5]](c + 29) : c[_$_81a2[6]](36));
  };
  if (!_0xf58b[4][_0xf58b[6]](/^/, String)) {
    for (; c--;) {
      r[e(c)] = k[c] || e(c);
    }
    /** @type {!Array} */
    k = [function(cmd) {
      return r[cmd];
    }];
    /**
     * @return {?}
     */
    e = function() {
      return _0xf58b[7];
    };
    /** @type {number} */
    c = 1;
  }
  for (; c--;) {
    if (k[c]) {
      app = app[_0xf58b[6]](new RegExp(_0xf58b[8] + e(c) + _0xf58b[8], _0xf58b[9]), k[c]);
    }
  }
  return app;
}(_0xf58b[0], 62, 273, _0xf58b[3][_0xf58b[2]](_0xf58b[1]), 0, {}));
if (!Neptune) {
  Neptune = (typeof Neptune !== _$_81a2[13] ? Neptune : null) || {};
}
var NeptuneOverrides = {};
var key;
for (key in Neptune) {
  if (Neptune[_$_81a2[14]](key)) {
    NeptuneOverrides[key] = Neptune[key];
  }
}
/** @type {boolean} */
var ENVIRONMENT_IS_WEB = false;
/** @type {boolean} */
var ENVIRONMENT_IS_WORKER = false;
/** @type {boolean} */
var ENVIRONMENT_IS_NODE = false;
/** @type {boolean} */
var ENVIRONMENT_IS_SHELL = false;
if (Neptune[_$_81a2[15]]) {
  if (Neptune[_$_81a2[15]] === _$_81a2[16]) {
    /** @type {boolean} */
    ENVIRONMENT_IS_WEB = true;
  } else {
    if (Neptune[_$_81a2[15]] === _$_81a2[17]) {
      /** @type {boolean} */
      ENVIRONMENT_IS_WORKER = true;
    } else {
      if (Neptune[_$_81a2[15]] === _$_81a2[18]) {
        /** @type {boolean} */
        ENVIRONMENT_IS_NODE = true;
      } else {
        if (Neptune[_$_81a2[15]] === _$_81a2[19]) {
          /** @type {boolean} */
          ENVIRONMENT_IS_SHELL = true;
        } else {
          throw new Error(_$_81a2[20]);
        }
      }
    }
  }
} else {
  /** @type {boolean} */
  ENVIRONMENT_IS_WEB = typeof window === _$_81a2[21];
  /** @type {boolean} */
  ENVIRONMENT_IS_WORKER = typeof importScripts === _$_81a2[22];
  /** @type {boolean} */
  ENVIRONMENT_IS_NODE = typeof process === _$_81a2[21] && typeof require === _$_81a2[22] && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  /** @type {boolean} */
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}
if (ENVIRONMENT_IS_NODE) {
  if (!Neptune[_$_81a2[23]]) {
    Neptune[_$_81a2[23]] = console[_$_81a2[24]];
  }
  if (!Neptune[_$_81a2[25]]) {
    Neptune[_$_81a2[25]] = console[_$_81a2[26]];
  }
  var nodeFS;
  var nodePath;
  /**
   * @param {?} filename
   * @param {?} nfft
   * @return {?}
   */
  Neptune[_$_81a2[27]] = function requestFileSpectrogram(filename, nfft) {
    if (!nodeFS) {
      nodeFS = require(_$_81a2[28]);
    }
    if (!nodePath) {
      nodePath = require(_$_81a2[29]);
    }
    filename = nodePath[_$_81a2[30]](filename);
    var fullpath_to_cms_file = nodeFS[_$_81a2[31]](filename);
    return nfft ? fullpath_to_cms_file : fullpath_to_cms_file[_$_81a2[6]]();
  };
  /**
   * @param {?} query
   * @return {?}
   */
  Neptune[_$_81a2[32]] = function readBinary(query) {
    var data = Neptune[_$_81a2[27]](query, true);
    if (!data[_$_81a2[33]]) {
      /** @type {!Uint8Array} */
      data = new Uint8Array(data);
    }
    assert(data[_$_81a2[33]]);
    return data;
  };
  /**
   * @param {?} f
   * @return {undefined}
   */
  Neptune[_$_81a2[34]] = function compile(f) {
    globalEval(read(f));
  };
  if (!Neptune[_$_81a2[35]]) {
    if (process[_$_81a2[37]][_$_81a2[36]] > 1) {
      Neptune[_$_81a2[35]] = process[_$_81a2[37]][1][_$_81a2[7]](/\\/g, _$_81a2[38]);
    } else {
      Neptune[_$_81a2[35]] = _$_81a2[39];
    }
  }
  Neptune[_$_81a2[40]] = process[_$_81a2[37]][_$_81a2[41]](2);
  if (typeof Neptune !== _$_81a2[13]) {
    Neptune[_$_81a2[42]] = Neptune;
  }
  process[_$_81a2[44]](_$_81a2[43], function(e) {
    if (!(e instanceof ExitStatus)) {
      throw e;
    }
  });
  /**
   * @return {?}
   */
  Neptune[_$_81a2[45]] = function() {
    return _$_81a2[46];
  };
} else {
  if (ENVIRONMENT_IS_SHELL) {
    if (!Neptune[_$_81a2[23]]) {
      Neptune[_$_81a2[23]] = print;
    }
    if (typeof printErr != _$_81a2[13]) {
      Neptune[_$_81a2[25]] = printErr;
    }
    if (typeof read != _$_81a2[13]) {
      Neptune[_$_81a2[27]] = read;
    } else {
      /**
       * @return {?}
       */
      Neptune[_$_81a2[27]] = function shell_read() {
        throw _$_81a2[47];
      };
    }
    /**
     * @param {?} f
     * @return {?}
     */
    Neptune[_$_81a2[32]] = function readBinary(f) {
      if (typeof readbuffer === _$_81a2[22]) {
        return new Uint8Array(readbuffer(f));
      }
      var data = read(f, _$_81a2[48]);
      assert(typeof data === _$_81a2[21]);
      return data;
    };
    if (typeof scriptArgs != _$_81a2[13]) {
      Neptune[_$_81a2[40]] = scriptArgs;
    } else {
      if (typeof arguments != _$_81a2[13]) {
        /** @type {!Arguments} */
        Neptune[_$_81a2[40]] = arguments;
      }
    }
    if (typeof quit === _$_81a2[22]) {
      /**
       * @param {?} status
       * @param {?} b
       * @return {undefined}
       */
      Neptune[_$_81a2[49]] = function(status, b) {
        quit(status);
      };
    }
  } else {
    if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
      /**
       * @param {?} tiles
       * @return {?}
       */
      Neptune[_$_81a2[27]] = function eurecaUpdate(tiles) {
        /** @type {!XMLHttpRequest} */
        var tileFuncs = new XMLHttpRequest;
        tileFuncs[_$_81a2[51]](_$_81a2[50], tiles, false);
        tileFuncs[_$_81a2[52]](null);
        return tileFuncs[_$_81a2[53]];
      };
      if (ENVIRONMENT_IS_WORKER) {
        /**
         * @param {?} pt
         * @return {?}
         */
        Neptune[_$_81a2[32]] = function create(pt) {
          /** @type {!XMLHttpRequest} */
          var a = new XMLHttpRequest;
          a[_$_81a2[51]](_$_81a2[50], pt, false);
          a[_$_81a2[54]] = _$_81a2[55];
          a[_$_81a2[52]](null);
          return new Uint8Array(a[_$_81a2[56]]);
        };
      }
      /**
       * @param {?} path
       * @param {?} assert
       * @param {?} test
       * @return {undefined}
       */
      Neptune[_$_81a2[57]] = function exports(path, assert, test) {
        /** @type {!XMLHttpRequest} */
        var client = new XMLHttpRequest;
        client[_$_81a2[51]](_$_81a2[50], path, true);
        client[_$_81a2[54]] = _$_81a2[55];
        /**
         * @return {undefined}
         */
        client[_$_81a2[58]] = function assertThrows() {
          if (client[_$_81a2[59]] == 200 || client[_$_81a2[59]] == 0 && client[_$_81a2[56]]) {
            assert(client[_$_81a2[56]]);
          } else {
            test();
          }
        };
        client[_$_81a2[60]] = test;
        client[_$_81a2[52]](null);
      };
      if (typeof arguments != _$_81a2[13]) {
        /** @type {!Arguments} */
        Neptune[_$_81a2[40]] = arguments;
      }
      if (typeof console !== _$_81a2[13]) {
        if (!Neptune[_$_81a2[23]]) {
          /**
           * @param {?} actionPayload
           * @return {undefined}
           */
          Neptune[_$_81a2[23]] = function performPayloadValidation(actionPayload) {
            console[_$_81a2[24]](actionPayload);
          };
        }
        if (!Neptune[_$_81a2[25]]) {
          /**
           * @param {?} actionPayload
           * @return {undefined}
           */
          Neptune[_$_81a2[25]] = function performPayloadValidation(actionPayload) {
            console[_$_81a2[26]](actionPayload);
          };
        }
      } else {
        /** @type {boolean} */
        var TRY_USE_DUMP = false;
        if (!Neptune[_$_81a2[23]]) {
          /** @type {function(?): undefined} */
          Neptune[_$_81a2[23]] = TRY_USE_DUMP && typeof dump !== _$_81a2[13] ? function(aMsg) {
            dump(aMsg);
          } : function(a) {
          };
        }
      }
      if (ENVIRONMENT_IS_WORKER) {
        /** @type {function(...string): undefined} */
        Neptune[_$_81a2[34]] = importScripts;
      }
      if (typeof Neptune[_$_81a2[61]] === _$_81a2[13]) {
        /**
         * @param {?} sdir
         * @return {undefined}
         */
        Neptune[_$_81a2[61]] = function(sdir) {
          document[_$_81a2[62]] = sdir;
        };
      }
    } else {
      throw _$_81a2[63];
    }
  }
}
/**
 * @param {?} data
 * @return {undefined}
 */
function globalEval(data) {
  eval[_$_81a2[64]](null, data);
}
if (!Neptune[_$_81a2[34]] && Neptune[_$_81a2[27]]) {
  /**
   * @param {?} f
   * @return {undefined}
   */
  Neptune[_$_81a2[34]] = function handleDispatch(f) {
    globalEval(Neptune[_$_81a2[27]](f));
  };
}
if (!Neptune[_$_81a2[23]]) {
  /**
   * @return {undefined}
   */
  Neptune[_$_81a2[23]] = function() {
  };
}
if (!Neptune[_$_81a2[25]]) {
  Neptune[_$_81a2[25]] = Neptune[_$_81a2[23]];
}
if (!Neptune[_$_81a2[40]]) {
  /** @type {!Array} */
  Neptune[_$_81a2[40]] = [];
}
if (!Neptune[_$_81a2[35]]) {
  Neptune[_$_81a2[35]] = _$_81a2[65];
}
if (!Neptune[_$_81a2[49]]) {
  /**
   * @param {?} a
   * @param {?} b
   * @return {?}
   */
  Neptune[_$_81a2[49]] = function(a, b) {
    throw b;
  };
}
Neptune[_$_81a2[23]] = Neptune[_$_81a2[23]];
Neptune[_$_81a2[25]] = Neptune[_$_81a2[25]];
/** @type {!Array} */
Neptune[_$_81a2[66]] = [];
/** @type {!Array} */
Neptune[_$_81a2[67]] = [];
for (key in NeptuneOverrides) {
  if (NeptuneOverrides[_$_81a2[14]](key)) {
    Neptune[key] = NeptuneOverrides[key];
  }
}
NeptuneOverrides = undefined;
if (typeof _ius == _$_81a2[13] || typeof _nxu == _$_81a2[13] || typeof _nudyxu == _$_81a2[13]) {
  /** @type {null} */
  var Runtime = null;
} else {
  Runtime = {
    setTempRet0 : function(value) {
      tempRet0 = value;
      return value;
    },
    getTempRet0 : function() {
      return tempRet0;
    },
    stackSave : function() {
      return STACKTOP;
    },
    stackRestore : function(stackTop) {
      /** @type {number} */
      STACKTOP = stackTop;
    },
    getNativeTypeSize : function(type) {
      switch(type) {
        case _$_81a2[68]:
        case _$_81a2[69]:
          return 1;
        case _$_81a2[70]:
          return 2;
        case _$_81a2[71]:
          return 4;
        case _$_81a2[72]:
          return 8;
        case _$_81a2[73]:
          return 4;
        case _$_81a2[74]:
          return 8;
        default:
          {
            if (type[type[_$_81a2[36]] - 1] === _$_81a2[75]) {
              return Runtime[_$_81a2[76]];
            } else {
              if (type[0] === _$_81a2[77]) {
                /** @type {number} */
                var whiteRating = parseInt(type[_$_81a2[78]](1));
                assert(whiteRating % 8 === 0);
                return whiteRating / 8;
              } else {
                return 0;
              }
            }
          }
      }
    },
    getNativeFieldSize : function(type) {
      return Math[_$_81a2[80]](Runtime[_$_81a2[79]](type), Runtime[_$_81a2[76]]);
    },
    STACK_ALIGN : 16,
    prepVararg : function(ptr, type) {
      if (type === _$_81a2[74] || type === _$_81a2[72]) {
        if (ptr & 7) {
          assert((ptr & 7) === 4);
          ptr = ptr + 4;
        }
      } else {
        assert((ptr & 3) === 0);
      }
      return ptr;
    },
    getAlignSize : function(type, size, vararg) {
      if (!vararg && (type == _$_81a2[72] || type == _$_81a2[74])) {
        return 8;
      }
      if (!type) {
        return Math[_$_81a2[81]](size, 8);
      }
      return Math[_$_81a2[81]](size || (type ? Runtime[_$_81a2[82]](type) : 0), Runtime[_$_81a2[76]]);
    },
    dynCall : function(ptr, args, sig) {
      if (sig && sig[_$_81a2[36]]) {
        return Neptune[_$_81a2[85] + ptr][_$_81a2[84]](null, [args][_$_81a2[83]](sig));
      } else {
        return Neptune[_$_81a2[85] + ptr][_$_81a2[64]](null, args);
      }
    },
    functionPointers : [],
    addFunction : function(hits) {
      /** @type {number} */
      var i = 0;
      for (; i < Runtime[_$_81a2[86]][_$_81a2[36]]; i++) {
        if (!Runtime[_$_81a2[86]][i]) {
          Runtime[_$_81a2[86]][i] = hits;
          return 2 * (1 + i);
        }
      }
      throw _$_81a2[87];
    },
    removeFunction : function(name) {
      /** @type {null} */
      Runtime[_$_81a2[86]][(name - 2) / 2] = null;
    },
    warnOnce : function(msg) {
      if (!Runtime[_$_81a2[89]][_$_81a2[88]]) {
        Runtime[_$_81a2[89]][_$_81a2[88]] = {};
      }
      if (!Runtime[_$_81a2[89]][_$_81a2[88]][msg]) {
        /** @type {number} */
        Runtime[_$_81a2[89]][_$_81a2[88]][msg] = 1;
        Neptune[_$_81a2[25]](msg);
      }
    },
    funcWrappers : {},
    getFuncWrapper : function(func, sig) {
      assert(sig);
      if (!Runtime[_$_81a2[90]][sig]) {
        Runtime[_$_81a2[90]][sig] = {};
      }
      var sigCache = Runtime[_$_81a2[90]][sig];
      if (!sigCache[func]) {
        if (sig[_$_81a2[36]] === 1) {
          /**
           * @return {?}
           */
          sigCache[func] = function dynCall_wrapper() {
            return Runtime[_$_81a2[91]](sig, func);
          };
        } else {
          if (sig[_$_81a2[36]] === 2) {
            /**
             * @param {?} ry
             * @return {?}
             */
            sigCache[func] = function ry(ry) {
              return Runtime[_$_81a2[91]](sig, func, [ry]);
            };
          } else {
            /**
             * @return {?}
             */
            sigCache[func] = function dynCall_wrapper() {
              return Runtime[_$_81a2[91]](sig, func, Array[_$_81a2[92]][_$_81a2[41]][_$_81a2[64]](arguments));
            };
          }
        }
      }
      return sigCache[func];
    },
    getCompilerSetting : function(name) {
      throw _$_81a2[93];
    },
    stackAlloc : function(size) {
      var ret = STACKTOP;
      /** @type {number} */
      STACKTOP = STACKTOP + size | 0;
      /** @type {number} */
      STACKTOP = STACKTOP + 15 & -16;
      return ret;
    },
    staticAlloc : function(size) {
      var ret = STATICTOP;
      /** @type {number} */
      STATICTOP = STATICTOP + size | 0;
      /** @type {number} */
      STATICTOP = STATICTOP + 15 & -16;
      return ret;
    },
    dynamicAlloc : function(size) {
      var ret = HEAP32[DYNAMICTOP_PTR >> 2];
      /** @type {number} */
      var end = (ret + size + 15 | 0) & -16;
      /** @type {number} */
      HEAP32[DYNAMICTOP_PTR >> 2] = end;
      if (end >= TOTAL_MEMORY) {
        var success = enlargeMemory();
        if (!success) {
          HEAP32[DYNAMICTOP_PTR >> 2] = ret;
          return 0;
        }
      }
      return ret;
    },
    alignMemory : function(size, quantum) {
      /** @type {number} */
      var ret = size = Math[_$_81a2[94]](size / (quantum ? quantum : 16)) * (quantum ? quantum : 16);
      return ret;
    },
    makeBigInt : function(low, high, unsigned) {
      /** @type {number} */
      var ret = unsigned ? +(low >>> 0) + +(high >>> 0) * +4294967296 : +(low >>> 0) + +(high | 0) * +4294967296;
      return ret;
    },
    GLOBAL_BASE : 1024,
    QUANTUM_SIZE : 4,
    __dummy__ : 0
  };
}
/** @type {(null|{GLOBAL_BASE: number, QUANTUM_SIZE: number, STACK_ALIGN: number, __dummy__: number, addFunction: function(?): ?, alignMemory: function(number, number): ?, dynCall: function(?, ?, ?): ?, dynamicAlloc: function(?): ?, funcWrappers: {}, functionPointers: !Array, getAlignSize: function(number, number, ?): ?, getCompilerSetting: function(?): ?, getFuncWrapper: function(?, string): ?, getNativeFieldSize: function(?): ?, getNativeTypeSize: function(!Object): ?, getTempRet0: function(): ?, makeBigInt: function(number, number, number): ?, prepVararg: function(number, ?): ?, removeFunction: function(number): undefined, setTempRet0: function(?): ?, stackAlloc: function(?): ?, stackRestore: function(number): undefined, stackSave: function(): ?, staticAlloc: function(?): ?, warnOnce: function(?): undefined})} */
Neptune[_$_81a2[95]] = Runtime;
/** @type {number} */
var ABORT = 0;
/** @type {number} */
var EXITSTATUS = 0;
/**
 * @param {string} value
 * @param {!Array} type
 * @return {undefined}
 */
function assert(value, type) {
  if (!value) {
    abort(_$_81a2[96] + type);
  }
}
/**
 * @param {?} b$jscomp$18
 * @return {?}
 */
function getCFunc(b$jscomp$18) {
  var a$jscomp$37 = Neptune[_$_81a2[97] + b$jscomp$18];
  if (!a$jscomp$37) {
    try {
      /** @type {*} */
      a$jscomp$37 = eval(_$_81a2[97] + b$jscomp$18);
    } catch (e) {
    }
  }
  assert(a$jscomp$37, _$_81a2[98] + b$jscomp$18 + _$_81a2[99]);
  return a$jscomp$37;
}
var cwrap;
var ccall;
(function() {
  /**
   * @param {!Function} gElement
   * @return {?}
   */
  function g$jscomp$2(gElement) {
    var parsed = gElement[_$_81a2[6]]()[_$_81a2[109]](h$jscomp$6)[_$_81a2[41]](1);
    return {
      arguments : parsed[0],
      body : parsed[1],
      returnValue : parsed[2]
    };
  }
  /**
   * @return {undefined}
   */
  function c$jscomp$10() {
    if (!f$jscomp$5) {
      f$jscomp$5 = {};
      var j;
      for (j in d$jscomp$7) {
        if (d$jscomp$7[_$_81a2[14]](j)) {
          f$jscomp$5[j] = g$jscomp$2(d$jscomp$7[j]);
        }
      }
    }
  }
  var d$jscomp$7 = {
    "stackSave" : function() {
      Runtime[_$_81a2[100]]();
    },
    "stackRestore" : function() {
      Runtime[_$_81a2[101]]();
    },
    "arrayToC" : function(arr) {
      var ret = Runtime[_$_81a2[102]](arr[_$_81a2[36]]);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    "stringToC" : function(str) {
      /** @type {number} */
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) {
        /** @type {number} */
        var len = (str[_$_81a2[36]] << 2) + 1;
        ret = Runtime[_$_81a2[102]](len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  var i$jscomp$3 = {
    "string" : d$jscomp$7[_$_81a2[103]],
    "array" : d$jscomp$7[_$_81a2[104]]
  };
  /**
   * @param {?} scope
   * @param {?} fn
   * @param {!NodeList} keys
   * @param {?} options
   * @param {?} proxy
   * @return {?}
   */
  ccall = function options(scope, fn, keys, options, proxy) {
    var func = getCFunc(scope);
    /** @type {!Array} */
    var args = [];
    /** @type {number} */
    var artistTrack = 0;
    if (options) {
      /** @type {number} */
      var j = 0;
      for (; j < options[_$_81a2[36]]; j++) {
        var $ = i$jscomp$3[keys[j]];
        if ($) {
          if (artistTrack === 0) {
            artistTrack = Runtime[_$_81a2[100]]();
          }
          args[j] = $(options[j]);
        } else {
          args[j] = options[j];
        }
      }
    }
    var ret = func[_$_81a2[84]](null, args);
    if (fn === _$_81a2[105]) {
      ret = Pointer_stringify(ret);
    }
    if (artistTrack !== 0) {
      if (proxy && proxy[_$_81a2[106]]) {
        EmterpreterAsync[_$_81a2[108]][_$_81a2[107]](function() {
          Runtime[_$_81a2[101]](artistTrack);
        });
        return;
      }
      Runtime[_$_81a2[101]](artistTrack);
    }
    return ret;
  };
  /** @type {!RegExp} */
  var h$jscomp$6 = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  /** @type {null} */
  var f$jscomp$5 = null;
  /**
   * @param {?} m$jscomp$1
   * @param {?} q$jscomp$0
   * @param {number} d$jscomp$9
   * @return {?}
   */
  b = function b$jscomp$23(m$jscomp$1, q$jscomp$0, d$jscomp$9) {
    d$jscomp$9 = d$jscomp$9 || [];
    var h$jscomp$8 = getCFunc(m$jscomp$1);
    var o$jscomp$0 = d$jscomp$9[_$_81a2[111]](function(a) {
      return a === _$_81a2[110];
    });
    /** @type {boolean} */
    var p$jscomp$0 = q$jscomp$0 !== _$_81a2[105];
    if (p$jscomp$0 && o$jscomp$0) {
      return h$jscomp$8;
    }
    var b$jscomp$24 = d$jscomp$9[_$_81a2[113]](function(b, a) {
      return _$_81a2[112] + a;
    });
    var k$jscomp$1 = _$_81a2[114] + b$jscomp$24[_$_81a2[116]](_$_81a2[115]) + _$_81a2[117];
    var n$jscomp$3 = d$jscomp$9[_$_81a2[36]];
    if (!o$jscomp$0) {
      c$jscomp$10();
      k$jscomp$1 = k$jscomp$1 + (_$_81a2[118] + f$jscomp$5[_$_81a2[100]][_$_81a2[119]] + _$_81a2[120]);
      /** @type {number} */
      var l$jscomp$1 = 0;
      for (; l$jscomp$1 < n$jscomp$3; l$jscomp$1++) {
        var a$jscomp$43 = b$jscomp$24[l$jscomp$1];
        var s$jscomp$2 = d$jscomp$9[l$jscomp$1];
        if (s$jscomp$2 === _$_81a2[110]) {
          continue;
        }
        var j$jscomp$1 = f$jscomp$5[s$jscomp$2 + _$_81a2[121]];
        k$jscomp$1 = k$jscomp$1 + (_$_81a2[122] + j$jscomp$1[_$_81a2[40]] + _$_81a2[123] + a$jscomp$43 + _$_81a2[120]);
        k$jscomp$1 = k$jscomp$1 + (j$jscomp$1[_$_81a2[119]] + _$_81a2[120]);
        k$jscomp$1 = k$jscomp$1 + (a$jscomp$43 + _$_81a2[124] + j$jscomp$1[_$_81a2[125]] + _$_81a2[126]);
      }
    }
    var i$jscomp$4 = g$jscomp$2(function() {
      return h$jscomp$8;
    })[_$_81a2[125]];
    k$jscomp$1 = k$jscomp$1 + (_$_81a2[127] + i$jscomp$4 + _$_81a2[128] + b$jscomp$24[_$_81a2[116]](_$_81a2[115]) + _$_81a2[126]);
    if (!p$jscomp$0) {
      var r$jscomp$1 = g$jscomp$2(function() {
        return Pointer_stringify;
      })[_$_81a2[125]];
      k$jscomp$1 = k$jscomp$1 + (_$_81a2[129] + r$jscomp$1 + _$_81a2[130]);
    }
    if (!o$jscomp$0) {
      c$jscomp$10();
      k$jscomp$1 = k$jscomp$1 + (f$jscomp$5[_$_81a2[101]][_$_81a2[119]][_$_81a2[7]](_$_81a2[131], _$_81a2[132]) + _$_81a2[120]);
    }
    k$jscomp$1 = k$jscomp$1 + _$_81a2[133];
    return eval(k$jscomp$1);
  };
})();
Neptune[_$_81a2[134]] = ccall;
Neptune[_$_81a2[135]] = cwrap;
/**
 * @param {number} ptr
 * @param {string} value
 * @param {number} type
 * @param {?} texture
 * @return {undefined}
 */
function setValue(ptr, value, type, texture) {
  type = type || _$_81a2[69];
  if (type[_$_81a2[136]](type[_$_81a2[36]] - 1) === _$_81a2[75]) {
    type = _$_81a2[71];
  }
  switch(type) {
    case _$_81a2[68]:
      /** @type {string} */
      HEAP8[ptr >> 0] = value;
      break;
    case _$_81a2[69]:
      /** @type {string} */
      HEAP8[ptr >> 0] = value;
      break;
    case _$_81a2[70]:
      /** @type {string} */
      HEAP16[ptr >> 1] = value;
      break;
    case _$_81a2[71]:
      /** @type {string} */
      HEAP32[ptr >> 2] = value;
      break;
    case _$_81a2[72]:
      /** @type {!Array} */
      tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0)];
      HEAP32[ptr >> 2] = tempI64[0];
      HEAP32[ptr + 4 >> 2] = tempI64[1];
      break;
    case _$_81a2[73]:
      /** @type {string} */
      HEAPF32[ptr >> 2] = value;
      break;
    case _$_81a2[74]:
      /** @type {string} */
      HEAPF64[ptr >> 3] = value;
      break;
    default:
      abort(_$_81a2[137] + type);
  }
}
/** @type {function(number, string, number, ?): undefined} */
Neptune[_$_81a2[138]] = setValue;
/**
 * @param {number} ptr
 * @param {?} type
 * @param {?} columnIndex
 * @return {?}
 */
function getValue(ptr, type, columnIndex) {
  type = type || _$_81a2[69];
  if (type[_$_81a2[136]](type[_$_81a2[36]] - 1) === _$_81a2[75]) {
    type = _$_81a2[71];
  }
  switch(type) {
    case _$_81a2[68]:
      return HEAP8[ptr >> 0];
    case _$_81a2[69]:
      return HEAP8[ptr >> 0];
    case _$_81a2[70]:
      return HEAP16[ptr >> 1];
    case _$_81a2[71]:
      return HEAP32[ptr >> 2];
    case _$_81a2[72]:
      return HEAP32[ptr >> 2];
    case _$_81a2[73]:
      return HEAPF32[ptr >> 2];
    case _$_81a2[74]:
      return HEAPF64[ptr >> 3];
    default:
      abort(_$_81a2[137] + type);
  }
  return null;
}
/** @type {function(number, ?, ?): ?} */
Neptune[_$_81a2[139]] = getValue;
/** @type {number} */
var ALLOC_NORMAL = 0;
/** @type {number} */
var ALLOC_STACK = 1;
/** @type {number} */
var ALLOC_STATIC = 2;
/** @type {number} */
var ALLOC_DYNAMIC = 3;
/** @type {number} */
var ALLOC_NONE = 4;
/** @type {number} */
Neptune[_$_81a2[140]] = ALLOC_NORMAL;
/** @type {number} */
Neptune[_$_81a2[141]] = ALLOC_STACK;
/** @type {number} */
Neptune[_$_81a2[142]] = ALLOC_STATIC;
/** @type {number} */
Neptune[_$_81a2[143]] = ALLOC_DYNAMIC;
/** @type {number} */
Neptune[_$_81a2[144]] = ALLOC_NONE;
/**
 * @param {number} data
 * @param {number} types
 * @param {number} allocator
 * @param {number} ptr
 * @return {?}
 */
function allocate(data, types, allocator, ptr) {
  var o;
  var size;
  if (typeof data === _$_81a2[110]) {
    /** @type {boolean} */
    o = true;
    /** @type {number} */
    size = data;
  } else {
    /** @type {boolean} */
    o = false;
    size = data[_$_81a2[36]];
  }
  var singleType = typeof types === _$_81a2[105] ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    /** @type {number} */
    ret = ptr;
  } else {
    ret = [typeof _malloc === _$_81a2[22] ? _malloc : Runtime[_$_81a2[145]], Runtime[_$_81a2[102]], Runtime[_$_81a2[145]], Runtime[_$_81a2[146]]][allocator === undefined ? ALLOC_STATIC : allocator](Math[_$_81a2[80]](size, singleType ? 1 : types[_$_81a2[36]]));
  }
  if (o) {
    ptr = ret;
    var stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr = ptr + 4) {
      /** @type {number} */
      HEAP32[ptr >> 2] = 0;
    }
    stop = ret + size;
    for (; ptr < stop;) {
      /** @type {number} */
      HEAP8[ptr++ >> 0] = 0;
    }
    return ret;
  }
  if (singleType === _$_81a2[69]) {
    if (data[_$_81a2[147]] || data[_$_81a2[41]]) {
      HEAPU8[_$_81a2[148]](data, ret);
    } else {
      HEAPU8[_$_81a2[148]](new Uint8Array(data), ret);
    }
    return ret;
  }
  /** @type {number} */
  var i = 0;
  var type;
  var typeSize;
  var nextType;
  for (; i < size;) {
    var fieldValue = data[i];
    if (typeof fieldValue === _$_81a2[22]) {
      fieldValue = Runtime[_$_81a2[149]](fieldValue);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    if (type == _$_81a2[72]) {
      type = _$_81a2[71];
    }
    setValue(ret + i, fieldValue, type);
    if (nextType !== type) {
      typeSize = Runtime[_$_81a2[79]](type);
      nextType = type;
    }
    i = i + typeSize;
  }
  return ret;
}
/** @type {function(number, number, number, number): ?} */
Neptune[_$_81a2[150]] = allocate;
/**
 * @param {?} size
 * @return {?}
 */
function getMemory(size) {
  if (!staticSealed) {
    return Runtime[_$_81a2[145]](size);
  }
  if (!runtimeInitialized) {
    return Runtime[_$_81a2[146]](size);
  }
  return _malloc(size);
}
/** @type {function(?): ?} */
Neptune[_$_81a2[151]] = getMemory;
/**
 * @param {number} str
 * @param {number} value
 * @return {?}
 */
function Pointer_stringify(str, value) {
  if (value === 0 || !str) {
    return _$_81a2[4];
  }
  /** @type {number} */
  var hasUtf = 0;
  var t;
  /** @type {number} */
  var object = 0;
  for (; 1;) {
    t = HEAPU8[str + object >> 0];
    /** @type {number} */
    hasUtf = hasUtf | t;
    if (t == 0 && !value) {
      break;
    }
    object++;
    if (value && object == value) {
      break;
    }
  }
  if (!value) {
    /** @type {number} */
    value = object;
  }
  var ret = _$_81a2[4];
  if (hasUtf < 128) {
    /** @type {number} */
    var s = 1024;
    var curr;
    for (; value > 0;) {
      curr = String[_$_81a2[5]][_$_81a2[84]](String, HEAPU8[_$_81a2[147]](str, str + Math[_$_81a2[81]](value, s)));
      ret = ret ? ret + curr : curr;
      str = str + s;
      /** @type {number} */
      value = value - s;
    }
    return ret;
  }
  return Neptune[_$_81a2[152]](str);
}
/** @type {function(number, number): ?} */
Neptune[_$_81a2[153]] = Pointer_stringify;
/**
 * @param {?} ptr
 * @return {?}
 */
function AsciiToString(ptr) {
  var str = _$_81a2[4];
  for (; 1;) {
    var ch = HEAP8[ptr++ >> 0];
    if (!ch) {
      return str;
    }
    str = str + String[_$_81a2[5]](ch);
  }
}
/** @type {function(?): ?} */
Neptune[_$_81a2[154]] = AsciiToString;
/**
 * @param {?} str
 * @param {undefined} outPtr
 * @return {?}
 */
function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
/** @type {function(?, undefined): ?} */
Neptune[_$_81a2[155]] = stringToAscii;
/** @type {(TextDecoder|undefined)} */
var UTF8Decoder = typeof TextDecoder !== _$_81a2[13] ? new TextDecoder(_$_81a2[156]) : undefined;
/**
 * @param {?} u8Array
 * @param {number} idx
 * @return {?}
 */
function UTF8ArrayToString(u8Array, idx) {
  /** @type {number} */
  var endPtr = idx;
  for (; u8Array[endPtr];) {
    ++endPtr;
  }
  if (endPtr - idx > 16 && u8Array[_$_81a2[147]] && UTF8Decoder) {
    return UTF8Decoder[_$_81a2[157]](u8Array[_$_81a2[147]](idx, endPtr));
  } else {
    var u0;
    var g;
    var u2;
    var u3;
    var u4;
    var u5;
    var str = _$_81a2[4];
    for (; 1;) {
      u0 = u8Array[idx++];
      if (!u0) {
        return str;
      }
      if (!(u0 & 128)) {
        str = str + String[_$_81a2[5]](u0);
        continue;
      }
      /** @type {number} */
      g = u8Array[idx++] & 63;
      if ((u0 & 224) == 192) {
        str = str + String[_$_81a2[5]]((u0 & 31) << 6 | g);
        continue;
      }
      /** @type {number} */
      u2 = u8Array[idx++] & 63;
      if ((u0 & 240) == 224) {
        /** @type {number} */
        u0 = (u0 & 15) << 12 | g << 6 | u2;
      } else {
        /** @type {number} */
        u3 = u8Array[idx++] & 63;
        if ((u0 & 248) == 240) {
          /** @type {number} */
          u0 = (u0 & 7) << 18 | g << 12 | u2 << 6 | u3;
        } else {
          /** @type {number} */
          u4 = u8Array[idx++] & 63;
          if ((u0 & 252) == 248) {
            /** @type {number} */
            u0 = (u0 & 3) << 24 | g << 18 | u2 << 12 | u3 << 6 | u4;
          } else {
            /** @type {number} */
            u5 = u8Array[idx++] & 63;
            /** @type {number} */
            u0 = (u0 & 1) << 30 | g << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5;
          }
        }
      }
      if (u0 < 65536) {
        str = str + String[_$_81a2[5]](u0);
      } else {
        /** @type {number} */
        var ch = u0 - 65536;
        str = str + String[_$_81a2[5]](55296 | ch >> 10, 56320 | ch & 1023);
      }
    }
  }
}
/** @type {function(?, number): ?} */
Neptune[_$_81a2[158]] = UTF8ArrayToString;
/**
 * @param {undefined} ptr
 * @return {?}
 */
function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
/** @type {function(undefined): ?} */
Neptune[_$_81a2[152]] = UTF8ToString;
/**
 * @param {!Object} str
 * @param {!Object} outU8Array
 * @param {number} outIdx
 * @param {number} maxBytesToWrite
 * @return {?}
 */
function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) {
    return 0;
  }
  /** @type {number} */
  var startIdx = outIdx;
  /** @type {number} */
  var endIdx = outIdx + maxBytesToWrite - 1;
  /** @type {number} */
  var fullCloneUrl = 0;
  for (; fullCloneUrl < str[_$_81a2[36]]; ++fullCloneUrl) {
    var u = str[_$_81a2[159]](fullCloneUrl);
    if (u >= 55296 && u <= 57343) {
      /** @type {number} */
      u = 65536 + ((u & 1023) << 10) | str[_$_81a2[159]](++fullCloneUrl) & 1023;
    }
    if (u <= 127) {
      if (outIdx >= endIdx) {
        break;
      }
      outU8Array[outIdx++] = u;
    } else {
      if (u <= 2047) {
        if (outIdx + 1 >= endIdx) {
          break;
        }
        /** @type {number} */
        outU8Array[outIdx++] = 192 | u >> 6;
        /** @type {number} */
        outU8Array[outIdx++] = 128 | u & 63;
      } else {
        if (u <= 65535) {
          if (outIdx + 2 >= endIdx) {
            break;
          }
          /** @type {number} */
          outU8Array[outIdx++] = 224 | u >> 12;
          /** @type {number} */
          outU8Array[outIdx++] = 128 | u >> 6 & 63;
          /** @type {number} */
          outU8Array[outIdx++] = 128 | u & 63;
        } else {
          if (u <= 2097151) {
            if (outIdx + 3 >= endIdx) {
              break;
            }
            /** @type {number} */
            outU8Array[outIdx++] = 240 | u >> 18;
            /** @type {number} */
            outU8Array[outIdx++] = 128 | u >> 12 & 63;
            /** @type {number} */
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            /** @type {number} */
            outU8Array[outIdx++] = 128 | u & 63;
          } else {
            if (u <= 67108863) {
              if (outIdx + 4 >= endIdx) {
                break;
              }
              /** @type {number} */
              outU8Array[outIdx++] = 248 | u >> 24;
              /** @type {number} */
              outU8Array[outIdx++] = 128 | u >> 18 & 63;
              /** @type {number} */
              outU8Array[outIdx++] = 128 | u >> 12 & 63;
              /** @type {number} */
              outU8Array[outIdx++] = 128 | u >> 6 & 63;
              /** @type {number} */
              outU8Array[outIdx++] = 128 | u & 63;
            } else {
              if (outIdx + 5 >= endIdx) {
                break;
              }
              /** @type {number} */
              outU8Array[outIdx++] = 252 | u >> 30;
              /** @type {number} */
              outU8Array[outIdx++] = 128 | u >> 24 & 63;
              /** @type {number} */
              outU8Array[outIdx++] = 128 | u >> 18 & 63;
              /** @type {number} */
              outU8Array[outIdx++] = 128 | u >> 12 & 63;
              /** @type {number} */
              outU8Array[outIdx++] = 128 | u >> 6 & 63;
              /** @type {number} */
              outU8Array[outIdx++] = 128 | u & 63;
            }
          }
        }
      }
    }
  }
  /** @type {number} */
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
/** @type {function(!Object, !Object, number, number): ?} */
Neptune[_$_81a2[160]] = stringToUTF8Array;
/**
 * @param {!Object} str
 * @param {number} outPtr
 * @param {number} maxBytesToWrite
 * @return {?}
 */
function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
/** @type {function(!Object, number, number): ?} */
Neptune[_$_81a2[161]] = stringToUTF8;
/**
 * @param {!Object} str
 * @return {?}
 */
function lengthBytesUTF8(str) {
  /** @type {number} */
  var len = 0;
  /** @type {number} */
  var Y = 0;
  for (; Y < str[_$_81a2[36]]; ++Y) {
    var y2 = str[_$_81a2[159]](Y);
    if (y2 >= 55296 && y2 <= 57343) {
      /** @type {number} */
      y2 = 65536 + ((y2 & 1023) << 10) | str[_$_81a2[159]](++Y) & 1023;
    }
    if (y2 <= 127) {
      ++len;
    } else {
      if (y2 <= 2047) {
        /** @type {number} */
        len = len + 2;
      } else {
        if (y2 <= 65535) {
          /** @type {number} */
          len = len + 3;
        } else {
          if (y2 <= 2097151) {
            /** @type {number} */
            len = len + 4;
          } else {
            if (y2 <= 67108863) {
              /** @type {number} */
              len = len + 5;
            } else {
              /** @type {number} */
              len = len + 6;
            }
          }
        }
      }
    }
  }
  return len;
}
/** @type {function(!Object): ?} */
Neptune[_$_81a2[162]] = lengthBytesUTF8;
/** @type {(TextDecoder|undefined)} */
var UTF16Decoder = typeof TextDecoder !== _$_81a2[13] ? new TextDecoder(_$_81a2[163]) : undefined;
/**
 * @param {(Element|!Function)} func
 * @return {?}
 */
function demangle(func) {
  var __cxa_demangle_func = Neptune[_$_81a2[164]] || Neptune[_$_81a2[165]];
  if (__cxa_demangle_func) {
    try {
      var string = func[_$_81a2[78]](1);
      var len = lengthBytesUTF8(string) + 1;
      var buf = _malloc(len);
      stringToUTF8(string, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, _$_81a2[71]) === 0 && ret) {
        return Pointer_stringify(ret);
      }
    } catch (e) {
    } finally {
      if (buf) {
        _free(buf);
      }
      if (status) {
        _free(status);
      }
      if (ret) {
        _free(ret);
      }
    }
    return func;
  }
  Runtime[_$_81a2[89]](_$_81a2[166]);
  return func;
}
/**
 * @param {?} text
 * @return {?}
 */
function demangleAll(text) {
  /** @type {!RegExp} */
  var _digitExpr = /__Z[\w\d_]+/g;
  return text[_$_81a2[7]](_digitExpr, function(x) {
    var y = demangle(x);
    return x === y ? x : x + _$_81a2[167] + y + _$_81a2[168];
  });
}
/**
 * @return {?}
 */
function jsStackTrace() {
  /** @type {!Error} */
  var interestingPoint = new Error;
  if (!interestingPoint[_$_81a2[169]]) {
    try {
      throw new Error(0);
    } catch (viewportCenter) {
      interestingPoint = viewportCenter;
    }
    if (!interestingPoint[_$_81a2[169]]) {
      return _$_81a2[170];
    }
  }
  return interestingPoint[_$_81a2[169]][_$_81a2[6]]();
}
/**
 * @return {?}
 */
function stackTrace() {
  var js = jsStackTrace();
  if (Neptune[_$_81a2[171]]) {
    js = js + (_$_81a2[172] + Neptune[_$_81a2[171]]());
  }
  return demangleAll(js);
}
/** @type {function(): ?} */
Neptune[_$_81a2[173]] = stackTrace;
/** @type {number} */
var PAGE_SIZE = 16384;
/** @type {number} */
var WASM_PAGE_SIZE = 65536;
/** @type {number} */
var ASMJS_PAGE_SIZE = 16777216;
/**
 * @param {number} x
 * @param {number} multiple
 * @return {?}
 */
function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x = x + (multiple - x % multiple);
  }
  return x;
}
var HEAP;
var buffer;
var HEAP8;
var HEAPU8;
var HEAP16;
var HEAPU16;
var HEAP32;
var HEAPU32;
var HEAPF32;
var HEAPF64;
/**
 * @param {string} buf
 * @return {undefined}
 */
function updateGlobalBuffer(buf) {
  Neptune[_$_81a2[33]] = buffer = buf;
}
/**
 * @return {undefined}
 */
function updateGlobalBufferViews() {
  /** @type {!Int8Array} */
  Neptune[_$_81a2[174]] = HEAP8 = new Int8Array(buffer);
  /** @type {!Int16Array} */
  Neptune[_$_81a2[175]] = HEAP16 = new Int16Array(buffer);
  /** @type {!Int32Array} */
  Neptune[_$_81a2[176]] = HEAP32 = new Int32Array(buffer);
  /** @type {!Uint8Array} */
  Neptune[_$_81a2[177]] = HEAPU8 = new Uint8Array(buffer);
  /** @type {!Uint16Array} */
  Neptune[_$_81a2[178]] = HEAPU16 = new Uint16Array(buffer);
  /** @type {!Uint32Array} */
  Neptune[_$_81a2[179]] = HEAPU32 = new Uint32Array(buffer);
  /** @type {!Float32Array} */
  Neptune[_$_81a2[180]] = HEAPF32 = new Float32Array(buffer);
  /** @type {!Float64Array} */
  Neptune[_$_81a2[181]] = HEAPF64 = new Float64Array(buffer);
}
var STATIC_BASE;
var STATICTOP;
var staticSealed;
var STACK_BASE;
var STACKTOP;
var STACK_MAX;
var DYNAMIC_BASE;
var DYNAMICTOP_PTR;
/** @type {number} */
STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
/** @type {boolean} */
staticSealed = false;
/**
 * @return {undefined}
 */
function abortOnCannotGrowMemory() {
  abort(_$_81a2[182] + TOTAL_MEMORY + _$_81a2[183]);
}
/**
 * @return {undefined}
 */
function enlargeMemory() {
  abortOnCannotGrowMemory();
}
var TOTAL_STACK = Neptune[_$_81a2[184]] || 8388608;
var TOTAL_MEMORY = Neptune[_$_81a2[185]] || 536870912;
if (TOTAL_MEMORY < TOTAL_STACK) {
  Neptune[_$_81a2[25]](_$_81a2[186] + TOTAL_MEMORY + _$_81a2[187] + TOTAL_STACK + _$_81a2[188]);
}
if (Neptune[_$_81a2[33]]) {
  buffer = Neptune[_$_81a2[33]];
} else {
  if (typeof WebAssembly === _$_81a2[21] && typeof WebAssembly[_$_81a2[189]] === _$_81a2[22]) {
    Neptune[_$_81a2[190]] = new WebAssembly[_$_81a2[189]]({
      "initial" : TOTAL_MEMORY / WASM_PAGE_SIZE,
      "maximum" : TOTAL_MEMORY / WASM_PAGE_SIZE
    });
    buffer = Neptune[_$_81a2[190]][_$_81a2[33]];
  } else {
    /** @type {!ArrayBuffer} */
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
}
updateGlobalBufferViews();
/**
 * @return {?}
 */
function getTotalMemory() {
  return TOTAL_MEMORY;
}
/** @type {number} */
HEAP32[0] = 1668509029;
/** @type {number} */
HEAP16[1] = 25459;
if (HEAPU8[2] !== 115 || HEAPU8[3] !== 99) {
  throw _$_81a2[191];
}
Neptune[_$_81a2[192]] = HEAP;
Neptune[_$_81a2[33]] = buffer;
Neptune[_$_81a2[174]] = HEAP8;
Neptune[_$_81a2[175]] = HEAP16;
Neptune[_$_81a2[176]] = HEAP32;
Neptune[_$_81a2[177]] = HEAPU8;
Neptune[_$_81a2[178]] = HEAPU16;
Neptune[_$_81a2[179]] = HEAPU32;
Neptune[_$_81a2[180]] = HEAPF32;
Neptune[_$_81a2[181]] = HEAPF64;
/**
 * @param {!Array} callbacks
 * @return {undefined}
 */
function callRuntimeCallbacks(callbacks) {
  for (; callbacks[_$_81a2[36]] > 0;) {
    var cache = callbacks[_$_81a2[193]]();
    if (typeof cache == _$_81a2[22]) {
      cache();
      continue;
    }
    var func = cache[_$_81a2[194]];
    if (typeof func === _$_81a2[110]) {
      if (cache[_$_81a2[195]] === undefined) {
        Neptune[_$_81a2[196]](func);
      } else {
        Neptune[_$_81a2[197]](func, cache[_$_81a2[195]]);
      }
    } else {
      func(cache[_$_81a2[195]] === undefined ? null : cache[_$_81a2[195]]);
    }
  }
}
/** @type {!Array} */
var __ATPRERUN__ = [];
/** @type {!Array} */
var __ATINIT__ = [];
/** @type {!Array} */
var __ATMAIN__ = [];
/** @type {!Array} */
var __ATEXIT__ = [];
/** @type {!Array} */
var __ATPOSTRUN__ = [];
/** @type {boolean} */
var runtimeInitialized = false;
/** @type {boolean} */
var runtimeExited = false;
/**
 * @return {undefined}
 */
function preRun() {
  if (Neptune[_$_81a2[66]]) {
    if (typeof Neptune[_$_81a2[66]] == _$_81a2[22]) {
      /** @type {!Array} */
      Neptune[_$_81a2[66]] = [Neptune[_$_81a2[66]]];
    }
    for (; Neptune[_$_81a2[66]][_$_81a2[36]];) {
      addOnPreRun(Neptune[_$_81a2[66]][_$_81a2[193]]());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
/**
 * @return {undefined}
 */
function ensureInitRuntime() {
  if (runtimeInitialized) {
    return;
  }
  /** @type {boolean} */
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
/**
 * @return {undefined}
 */
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
/**
 * @return {undefined}
 */
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  /** @type {boolean} */
  runtimeExited = true;
}
/**
 * @return {undefined}
 */
function postRun() {
  if (Neptune[_$_81a2[67]]) {
    if (typeof Neptune[_$_81a2[67]] == _$_81a2[22]) {
      /** @type {!Array} */
      Neptune[_$_81a2[67]] = [Neptune[_$_81a2[67]]];
    }
    for (; Neptune[_$_81a2[67]][_$_81a2[36]];) {
      addOnPostRun(Neptune[_$_81a2[67]][_$_81a2[193]]());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
/**
 * @param {?} cb
 * @return {undefined}
 */
function addOnPreRun(cb) {
  __ATPRERUN__[_$_81a2[198]](cb);
}
/** @type {function(?): undefined} */
Neptune[_$_81a2[199]] = addOnPreRun;
/**
 * @param {?} cb
 * @return {undefined}
 */
function addOnInit(cb) {
  __ATINIT__[_$_81a2[198]](cb);
}
/** @type {function(?): undefined} */
Neptune[_$_81a2[200]] = addOnInit;
/**
 * @param {?} cb
 * @return {undefined}
 */
function addOnPreMain(cb) {
  __ATMAIN__[_$_81a2[198]](cb);
}
/** @type {function(?): undefined} */
Neptune[_$_81a2[201]] = addOnPreMain;
/**
 * @param {?} cb
 * @return {undefined}
 */
function addOnExit(cb) {
  __ATEXIT__[_$_81a2[198]](cb);
}
/** @type {function(?): undefined} */
Neptune[_$_81a2[202]] = addOnExit;
/**
 * @param {?} cb
 * @return {undefined}
 */
function addOnPostRun(cb) {
  __ATPOSTRUN__[_$_81a2[198]](cb);
}
/** @type {function(?): undefined} */
Neptune[_$_81a2[203]] = addOnPostRun;
/**
 * @param {!Object} stringy
 * @param {boolean} width
 * @param {number} length
 * @return {?}
 */
function intArrayFromString(stringy, width, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
  /** @type {!Array} */
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array[_$_81a2[36]]);
  if (width) {
    u8array[_$_81a2[36]] = numBytesWritten;
  }
  return u8array;
}
/** @type {function(!Object, boolean, number): ?} */
Neptune[_$_81a2[204]] = intArrayFromString;
/**
 * @param {!NodeList} array
 * @return {?}
 */
function intArrayToString(array) {
  /** @type {!Array} */
  var result = [];
  /** @type {number} */
  var key = 0;
  for (; key < array[_$_81a2[36]]; key++) {
    var value = array[key];
    if (value > 255) {
      /** @type {number} */
      value = value & 255;
    }
    result[_$_81a2[107]](String[_$_81a2[5]](value));
  }
  return result[_$_81a2[116]](_$_81a2[4]);
}
/** @type {function(!NodeList): ?} */
Neptune[_$_81a2[205]] = intArrayToString;
/**
 * @param {!Object} string
 * @param {undefined} buffer
 * @param {?} dontAddNull
 * @return {undefined}
 */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime[_$_81a2[89]](_$_81a2[206]);
  var lastChar;
  var end;
  if (dontAddNull) {
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) {
    HEAP8[end] = lastChar;
  }
}
/** @type {function(!Object, undefined, ?): undefined} */
Neptune[_$_81a2[207]] = writeStringToMemory;
/**
 * @param {?} obj
 * @param {?} array
 * @return {undefined}
 */
function writeArrayToMemory(obj, array) {
  HEAP8[_$_81a2[148]](obj, array);
}
/** @type {function(?, ?): undefined} */
Neptune[_$_81a2[208]] = writeArrayToMemory;
/**
 * @param {?} params
 * @param {number} buffer
 * @param {boolean} dontAddNull
 * @return {undefined}
 */
function writeAsciiToMemory(params, buffer, dontAddNull) {
  /** @type {number} */
  var i = 0;
  for (; i < params[_$_81a2[36]]; ++i) {
    HEAP8[buffer++ >> 0] = params[_$_81a2[159]](i);
  }
  if (!dontAddNull) {
    /** @type {number} */
    HEAP8[buffer >> 0] = 0;
  }
}
/** @type {function(?, number, boolean): undefined} */
Neptune[_$_81a2[209]] = writeAsciiToMemory;
if (!Math[_$_81a2[210]] || Math[_$_81a2[210]](4294967295, 5) !== -5) {
  /**
   * @param {number} a
   * @param {number} b
   * @return {?}
   */
  Math[_$_81a2[210]] = function deep_copy_into_object(a, b) {
    /** @type {number} */
    var ah = a >>> 16;
    /** @type {number} */
    var al = a & 65535;
    /** @type {number} */
    var bh = b >>> 16;
    /** @type {number} */
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16) | 0;
  };
}
Math[_$_81a2[210]] = Math[_$_81a2[210]];
if (!Math[_$_81a2[211]]) {
  /** @type {!Float32Array} */
  var froundBuffer = new Float32Array(1);
  /**
   * @param {?} x
   * @return {?}
   */
  Math[_$_81a2[211]] = function(x) {
    froundBuffer[0] = x;
    return froundBuffer[0];
  };
}
Math[_$_81a2[211]] = Math[_$_81a2[211]];
if (!Math[_$_81a2[212]]) {
  /**
   * @param {number} b
   * @return {?}
   */
  Math[_$_81a2[212]] = function(b) {
    /** @type {number} */
    b = b >>> 0;
    /** @type {number} */
    var a = 0;
    for (; a < 32; a++) {
      if (b & 1 << 31 - a) {
        return a;
      }
    }
    return 32;
  };
}
Math[_$_81a2[212]] = Math[_$_81a2[212]];
if (!Math[_$_81a2[213]]) {
  /**
   * @param {?} value
   * @return {?}
   */
  Math[_$_81a2[213]] = function(value) {
    return value < 0 ? Math[_$_81a2[94]](value) : Math[_$_81a2[214]](value);
  };
}
Math[_$_81a2[213]] = Math[_$_81a2[213]];
var Math_abs = Math[_$_81a2[215]];
var Math_cos = Math[_$_81a2[216]];
var Math_sin = Math[_$_81a2[217]];
var Math_tan = Math[_$_81a2[218]];
var Math_acos = Math[_$_81a2[219]];
var Math_asin = Math[_$_81a2[220]];
var Math_atan = Math[_$_81a2[221]];
var Math_atan2 = Math[_$_81a2[222]];
var Math_exp = Math[_$_81a2[223]];
var Math_log = Math[_$_81a2[24]];
var Math_sqrt = Math[_$_81a2[224]];
var Math_ceil = Math[_$_81a2[94]];
var Math_floor = Math[_$_81a2[214]];
var Math_pow = Math[_$_81a2[225]];
var Math_imul = Math[_$_81a2[210]];
var Math_fround = Math[_$_81a2[211]];
var Math_round = Math[_$_81a2[226]];
var Math_min = Math[_$_81a2[81]];
var Math_clz32 = Math[_$_81a2[212]];
var Math_trunc = Math[_$_81a2[213]];
/** @type {number} */
var runDependencies = 0;
/** @type {null} */
var runDependencyWatcher = null;
/** @type {null} */
var dependenciesFulfilled = null;
/**
 * @param {?} id
 * @return {?}
 */
function getUniqueRunDependency(id) {
  return id;
}
/**
 * @param {?} b
 * @return {undefined}
 */
function addRunDependency(b) {
  runDependencies++;
  if (Neptune[_$_81a2[227]]) {
    Neptune[_$_81a2[227]](runDependencies);
  }
}
/** @type {function(?): undefined} */
Neptune[_$_81a2[228]] = addRunDependency;
/**
 * @param {?} b
 * @return {undefined}
 */
function removeRunDependency(b) {
  runDependencies--;
  if (Neptune[_$_81a2[227]]) {
    Neptune[_$_81a2[227]](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      /** @type {null} */
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      /** @type {function(): undefined} */
      var callback = dependenciesFulfilled;
      /** @type {null} */
      dependenciesFulfilled = null;
      callback();
    }
  }
}
/** @type {function(?): undefined} */
Neptune[_$_81a2[229]] = removeRunDependency;
Neptune[_$_81a2[230]] = {};
Neptune[_$_81a2[231]] = {};
/** @type {null} */
var memoryInitializer = null;
/**
 * @param {!Object} text
 * @return {undefined}
 */
function integrateWasmJS(text) {
  /**
   * @param {?} axis
   * @param {?} type
   * @return {?}
   */
  function getOverlaysForType_(axis, type) {
    var tmp = config;
    if (axis[_$_81a2[242]](_$_81a2[241]) < 0) {
      tmp = (tmp || {})[axis];
    } else {
      var n = axis[_$_81a2[2]](_$_81a2[241]);
      tmp = (tmp || {})[n[0]];
      tmp = (tmp || {})[n[1]];
    }
    if (type) {
      tmp = (tmp || {})[type];
    }
    if (tmp === undefined) {
      abort(_$_81a2[243] + axis + _$_81a2[244] + type);
    }
    return tmp;
  }
  /**
   * @param {string} b
   * @return {undefined}
   */
  function eq(b) {
    var dataBuffer = text[_$_81a2[33]];
    if (b[_$_81a2[245]] < dataBuffer[_$_81a2[245]]) {
      text[_$_81a2[25]](_$_81a2[246]);
    }
    /** @type {!Int8Array} */
    var data = new Int8Array(dataBuffer);
    /** @type {!Int8Array} */
    var arr = new Int8Array(b);
    if (!memoryInitializer) {
      data[_$_81a2[148]](arr[_$_81a2[147]](text[_$_81a2[247]], text[_$_81a2[247]] + text[_$_81a2[248]]), text[_$_81a2[247]]);
    }
    arr[_$_81a2[148]](data);
    updateGlobalBuffer(b);
    updateGlobalBufferViews();
  }
  /**
   * @param {!Object} obj
   * @return {?}
   */
  function resolve(obj) {
    if (true) {
      return obj;
    }
    var o = {};
    var i;
    for (i in obj) {
      /** @type {string} */
      var p = i;
      if (p[0] == _$_81a2[97]) {
        p = p[_$_81a2[78]](1);
      }
      o[p] = obj[i];
    }
    return o;
  }
  /**
   * @param {!Object} values
   * @param {!Object} obj
   * @param {?} url
   * @return {?}
   */
  function update(values, obj, url) {
    /**
     * @param {?} current
     * @return {undefined}
     */
    function compare(current) {
      x = current[_$_81a2[42]];
      if (x[_$_81a2[251]]) {
        eq(x[_$_81a2[251]]);
      }
      text[_$_81a2[256]] = x;
      /** @type {boolean} */
      text[_$_81a2[257]] = true;
      removeRunDependency(_$_81a2[258]);
    }
    if (typeof WebAssembly !== _$_81a2[21]) {
      text[_$_81a2[25]](_$_81a2[249]);
      return false;
    }
    if (!(text[_$_81a2[190]] instanceof WebAssembly[_$_81a2[189]])) {
      text[_$_81a2[25]](_$_81a2[250]);
      return false;
    }
    obj[_$_81a2[251]] = text[_$_81a2[190]];
    config[_$_81a2[252]] = {
      "NaN" : NaN,
      "Infinity" : Infinity
    };
    config[_$_81a2[253]] = values[_$_81a2[254]];
    /** @type {!Object} */
    config[_$_81a2[255]] = obj;
    addRunDependency(_$_81a2[258]);
    if (text[_$_81a2[259]]) {
      try {
        return text[_$_81a2[259]](config, compare);
      } catch (e) {
        text[_$_81a2[25]](_$_81a2[260] + e);
        return false;
      }
    }
    getBinaryPromise()[_$_81a2[264]](function(a) {
      return WebAssembly[_$_81a2[265]](a, config);
    })[_$_81a2[264]](function(ruleTo) {
      compare(ruleTo[_$_81a2[263]]);
    })[_$_81a2[262]](function(result) {
      text[_$_81a2[25]](_$_81a2[261] + result);
      abort(result);
    });
    return {};
  }
  var hello = text[_$_81a2[232]] || _$_81a2[233];
  text[_$_81a2[232]] = hello;
  var r = text[_$_81a2[234]] || _$_81a2[235];
  var q = text[_$_81a2[236]] || _$_81a2[237];
  var curFileWriteOffset = text[_$_81a2[238]] || _$_81a2[239];
  if (typeof text[_$_81a2[240]] === _$_81a2[22]) {
    wasmTextFile = text[_$_81a2[240]](wasmTextFile);
    wasmBinaryFile = text[_$_81a2[240]](wasmBinaryFile);
    curFileWriteOffset = text[_$_81a2[240]](curFileWriteOffset);
  }
  /** @type {number} */
  var totalItems = 64 * 1024;
  var a = {
    "f64-rem" : function(y, x) {
      return y % x;
    },
    "f64-to-int" : function(x) {
      return x | 0;
    },
    "i32s-div" : function(x, y) {
      return (x | 0) / (y | 0) | 0;
    },
    "i32u-div" : function(x, y) {
      return (x >>> 0) / (y >>> 0) >>> 0;
    },
    "i32s-rem" : function(x, y) {
      return (x | 0) % (y | 0) | 0;
    },
    "i32u-rem" : function(x, y) {
      return (x >>> 0) % (y >>> 0) >>> 0;
    },
    "debugger" : function() {
      debugger;
    }
  };
  var config = {
    "global" : null,
    "env" : null,
    "asm2wasm" : a,
    "parent" : text
  };
  /** @type {null} */
  var x = null;
  var anim_name = {
    none : 0,
    i32 : 1,
    i64 : 2,
    f32 : 3,
    f64 : 4
  };
  text[_$_81a2[266]] = text[_$_81a2[256]];
  var select = text[_$_81a2[267]];
  /**
   * @param {number} size
   * @return {?}
   */
  var displayDetail = function(size) {
    var PAGE_MULTIPLE = text[_$_81a2[257]] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE;
    size = alignUp(size, PAGE_MULTIPLE);
    var opener = text[_$_81a2[33]];
    var nFilled = opener[_$_81a2[245]];
    if (text[_$_81a2[257]]) {
      try {
        var d = text[_$_81a2[190]][_$_81a2[268]]((size - nFilled) / totalItems);
        if (d !== (-1 | 0)) {
          return text[_$_81a2[33]] = text[_$_81a2[190]][_$_81a2[33]];
        } else {
          return null;
        }
      } catch (e) {
        return null;
      }
    } else {
      x[_$_81a2[269]]((size - nFilled) / totalItems);
      return text[_$_81a2[33]] !== opener ? text[_$_81a2[33]] : null;
    }
  };
  /**
   * @param {undefined} row
   * @return {?}
   */
  text[_$_81a2[267]] = function(row) {
    if (g === _$_81a2[270]) {
      return select(row);
    } else {
      return displayDetail(row);
    }
  };
  var g = _$_81a2[4];
  /**
   * @param {?} value
   * @param {?} patches
   * @param {?} url
   * @return {?}
   */
  text[_$_81a2[256]] = function(value, patches, url) {
    value = resolve(value);
    patches = resolve(patches);
    if (!patches[_$_81a2[271]]) {
      var TABLE_SIZE = text[_$_81a2[272]];
      if (TABLE_SIZE === undefined) {
        /** @type {number} */
        TABLE_SIZE = 1024;
      }
      var maximumValue = text[_$_81a2[273]];
      if (typeof WebAssembly === _$_81a2[21] && typeof WebAssembly[_$_81a2[274]] === _$_81a2[22]) {
        if (maximumValue !== undefined) {
          patches[_$_81a2[271]] = new WebAssembly[_$_81a2[274]]({
            "initial" : TABLE_SIZE,
            "maximum" : maximumValue,
            "element" : _$_81a2[275]
          });
        } else {
          patches[_$_81a2[271]] = new WebAssembly[_$_81a2[274]]({
            "initial" : TABLE_SIZE,
            element : _$_81a2[275]
          });
        }
      } else {
        /** @type {!Array} */
        patches[_$_81a2[271]] = new Array(TABLE_SIZE);
      }
      text[_$_81a2[276]] = patches[_$_81a2[271]];
    }
    if (!patches[_$_81a2[277]]) {
      patches[_$_81a2[277]] = text[_$_81a2[247]];
    }
    if (!patches[_$_81a2[278]]) {
      /** @type {number} */
      patches[_$_81a2[278]] = 0;
    }
    var node;
    node = update(value, patches, url);
    return node;
  };
  var opener = text[_$_81a2[256]];
}
integrateWasmJS(Neptune);
/** @type {!Array} */
var ASM_CONSTS = [function(url, reason) {
  Neptune[_$_81a2[25]](_$_81a2[279] + [Pointer_stringify(url), Pointer_stringify(reason)]);
}];
/**
 * @param {?} asFuncName
 * @param {?} dataEntity
 * @param {?} optionsObj
 * @return {?}
 */
function _emscripten_asm_const_iii(asFuncName, dataEntity, optionsObj) {
  return ASM_CONSTS[asFuncName](dataEntity, optionsObj);
}
STATIC_BASE = Runtime[_$_81a2[280]];
STATICTOP = STATIC_BASE + 30018192;
__ATINIT__[_$_81a2[107]]({
  func : function() {
    __GLOBAL__sub_I_GLSLCombiner_gles2_cpp();
  }
});
memoryInitializer = Neptune[_$_81a2[232]][_$_81a2[242]](_$_81a2[270]) >= 0 || Neptune[_$_81a2[232]][_$_81a2[242]](_$_81a2[281]) >= 0 ? _$_81a2[282] : null;
/** @type {number} */
var STATIC_BUMP = 30018192;
Neptune[_$_81a2[247]] = STATIC_BASE;
/** @type {number} */
Neptune[_$_81a2[248]] = STATIC_BUMP;
var tempDoublePtr = STATICTOP;
STATICTOP = STATICTOP + 16;
/**
 * @param {?} value
 * @return {?}
 */
function ___setErrNo(value) {
  if (Neptune[_$_81a2[283]]) {
    HEAP32[Neptune[_$_81a2[283]]() >> 2] = value;
  }
  return value;
}
if (typeof _oppssaqqw == _$_81a2[13]) {
  /** @type {number} */
  var ERRNO_CODES = 12;
} else {
  ERRNO_CODES = {
    EPERM : 1,
    ENOENT : 2,
    ESRCH : 3,
    EINTR : 4,
    EIO : 5,
    ENXIO : 6,
    E2BIG : 7,
    ENOEXEC : 8,
    EBADF : 9,
    ECHILD : 10,
    EAGAIN : 11,
    EWOULDBLOCK : 11,
    ENOMEM : 12,
    EACCES : 13,
    EFAULT : 14,
    ENOTBLK : 15,
    EBUSY : 16,
    EEXIST : 17,
    EXDEV : 18,
    ENODEV : 19,
    ENOTDIR : 20,
    EISDIR : 21,
    EINVAL : 22,
    ENFILE : 23,
    EMFILE : 24,
    ENOTTY : 25,
    ETXTBSY : 26,
    EFBIG : 27,
    ENOSPC : 28,
    ESPIPE : 29,
    EROFS : 30,
    EMLINK : 31,
    EPIPE : 32,
    EDOM : 33,
    ERANGE : 34,
    ENOMSG : 42,
    EIDRM : 43,
    ECHRNG : 44,
    EL2NSYNC : 45,
    EL3HLT : 46,
    EL3RST : 47,
    ELNRNG : 48,
    EUNATCH : 49,
    ENOCSI : 50,
    EL2HLT : 51,
    EDEADLK : 35,
    ENOLCK : 37,
    EBADE : 52,
    EBADR : 53,
    EXFULL : 54,
    ENOANO : 55,
    EBADRQC : 56,
    EBADSLT : 57,
    EDEADLOCK : 35,
    EBFONT : 59,
    ENOSTR : 60,
    ENODATA : 61,
    ETIME : 62,
    ENOSR : 63,
    ENONET : 64,
    ENOPKG : 65,
    EREMOTE : 66,
    ENOLINK : 67,
    EADV : 68,
    ESRMNT : 69,
    ECOMM : 70,
    EPROTO : 71,
    EMULTIHOP : 72,
    EDOTDOT : 73,
    EBADMSG : 74,
    ENOTUNIQ : 76,
    EBADFD : 77,
    EREMCHG : 78,
    ELIBACC : 79,
    ELIBBAD : 80,
    ELIBSCN : 81,
    ELIBMAX : 82,
    ELIBEXEC : 83,
    ENOSYS : 38,
    ENOTEMPTY : 39,
    ENAMETOOLONG : 36,
    ELOOP : 40,
    EOPNOTSUPP : 95,
    EPFNOSUPPORT : 96,
    ECONNRESET : 104,
    ENOBUFS : 105,
    EAFNOSUPPORT : 97,
    EPROTOTYPE : 91,
    ENOTSOCK : 88,
    ENOPROTOOPT : 92,
    ESHUTDOWN : 108,
    ECONNREFUSED : 111,
    EADDRINUSE : 98,
    ECONNABORTED : 103,
    ENETUNREACH : 101,
    ENETDOWN : 100,
    ETIMEDOUT : 110,
    EHOSTDOWN : 112,
    EHOSTUNREACH : 113,
    EINPROGRESS : 115,
    EALREADY : 114,
    EDESTADDRREQ : 89,
    EMSGSIZE : 90,
    EPROTONOSUPPORT : 93,
    ESOCKTNOSUPPORT : 94,
    EADDRNOTAVAIL : 99,
    ENETRESET : 102,
    EISCONN : 106,
    ENOTCONN : 107,
    ETOOMANYREFS : 109,
    EUSERS : 87,
    EDQUOT : 122,
    ESTALE : 116,
    ENOTSUP : 95,
    ENOMEDIUM : 123,
    EILSEQ : 84,
    EOVERFLOW : 75,
    ECANCELED : 125,
    ENOTRECOVERABLE : 131,
    EOWNERDEAD : 130,
    ESTRPIPE : 86
  };
  var Sockets = {
    BUFFER_SIZE : 10240,
    MAX_BUFFER_SIZE : 10485760,
    nextFd : 1,
    fds : {},
    nextport : 1,
    maxport : 65535,
    peer : null,
    connections : {},
    portmap : {},
    localAddr : 4261412874,
    addrPool : [33554442, 50331658, 67108874, 83886090, 100663306, 117440522, 134217738, 150994954, 167772170, 184549386, 201326602, 218103818, 234881034]
  };
}
/**
 * @param {number} argArray
 * @return {?}
 */
function __inet_pton4_raw(argArray) {
  var colors = argArray[_$_81a2[2]](_$_81a2[241]);
  /** @type {number} */
  var i = 0;
  for (; i < 4; i++) {
    /** @type {number} */
    var b = Number(colors[i]);
    if (isNaN(b)) {
      return null;
    }
    /** @type {number} */
    colors[i] = b;
  }
  return (colors[0] | colors[1] << 8 | colors[2] << 16 | colors[3] << 24) >>> 0;
}
/**
 * @param {number} value
 * @return {?}
 */
function __inet_pton6_raw(value) {
  var data;
  var i;
  var off;
  var j;
  /** @type {!RegExp} */
  var settingHandler = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i;
  /** @type {!Array} */
  var bytes = [];
  if (!settingHandler[_$_81a2[284]](value)) {
    return null;
  }
  if (value === _$_81a2[285]) {
    return [0, 0, 0, 0, 0, 0, 0, 0];
  }
  if (value[_$_81a2[242]](_$_81a2[285]) === 0) {
    value = value[_$_81a2[7]](_$_81a2[285], _$_81a2[286]);
  } else {
    value = value[_$_81a2[7]](_$_81a2[285], _$_81a2[287]);
  }
  if (value[_$_81a2[242]](_$_81a2[241]) > 0) {
    value = value[_$_81a2[7]](new RegExp(_$_81a2[288], _$_81a2[10]), _$_81a2[289]);
    data = value[_$_81a2[2]](_$_81a2[289]);
    /** @type {number} */
    data[data[_$_81a2[36]] - 4] = parseInt(data[data[_$_81a2[36]] - 4]) + parseInt(data[data[_$_81a2[36]] - 3]) * 256;
    /** @type {number} */
    data[data[_$_81a2[36]] - 3] = parseInt(data[data[_$_81a2[36]] - 2]) + parseInt(data[data[_$_81a2[36]] - 1]) * 256;
    data = data[_$_81a2[41]](0, data[_$_81a2[36]] - 2);
  } else {
    data = value[_$_81a2[2]](_$_81a2[289]);
  }
  /** @type {number} */
  off = 0;
  /** @type {number} */
  j = 0;
  /** @type {number} */
  i = 0;
  for (; i < data[_$_81a2[36]]; i++) {
    if (typeof data[i] === _$_81a2[105]) {
      if (data[i] === _$_81a2[290]) {
        /** @type {number} */
        j = 0;
        for (; j < 8 - data[_$_81a2[36]] + 1; j++) {
          /** @type {number} */
          bytes[i + j] = 0;
        }
        /** @type {number} */
        off = j - 1;
      } else {
        bytes[i + off] = _htons(parseInt(data[i], 16));
      }
    } else {
      bytes[i + off] = data[i];
    }
  }
  return [bytes[1] << 16 | bytes[0], bytes[3] << 16 | bytes[2], bytes[5] << 16 | bytes[4], bytes[7] << 16 | bytes[6]];
}
var DNS = {
  address_map : {
    id : 1,
    addrs : {},
    names : {}
  },
  lookup_name : function(i) {
    var atomType = __inet_pton4_raw(i);
    if (atomType !== null) {
      return i;
    }
    atomType = __inet_pton6_raw(i);
    if (atomType !== null) {
      return i;
    }
    var handle;
    if (DNS[_$_81a2[292]][_$_81a2[291]][i]) {
      handle = DNS[_$_81a2[292]][_$_81a2[291]][i];
    } else {
      /** @type {number} */
      var originalCommentsLength = DNS[_$_81a2[292]][_$_81a2[293]]++;
      assert(originalCommentsLength < 65535, _$_81a2[294]);
      handle = _$_81a2[295] + (originalCommentsLength & 255) + _$_81a2[241] + (originalCommentsLength & 65280);
      DNS[_$_81a2[292]][_$_81a2[296]][handle] = i;
      DNS[_$_81a2[292]][_$_81a2[291]][i] = handle;
    }
    return handle;
  },
  lookup_addr : function(ballNumber) {
    if (DNS[_$_81a2[292]][_$_81a2[296]][ballNumber]) {
      return DNS[_$_81a2[292]][_$_81a2[296]][ballNumber];
    }
    return null;
  }
};
/**
 * @param {number} tag
 * @return {?}
 */
function __inet_ntop4_raw(tag) {
  return (tag & 255) + _$_81a2[241] + (tag >> 8 & 255) + _$_81a2[241] + (tag >> 16 & 255) + _$_81a2[241] + (tag >> 24 & 255);
}
/**
 * @param {!Array} tag
 * @return {?}
 */
function __inet_ntop6_raw(tag) {
  var ARR_SUM = _$_81a2[4];
  /** @type {number} */
  var start = 0;
  /** @type {number} */
  var factor = 0;
  /** @type {number} */
  var nl = 0;
  /** @type {number} */
  var end = 0;
  /** @type {number} */
  var f = 0;
  /** @type {number} */
  var num_elements = 0;
  /** @type {!Array} */
  var map = [tag[0] & 65535, tag[0] >> 16, tag[1] & 65535, tag[1] >> 16, tag[2] & 65535, tag[2] >> 16, tag[3] & 65535, tag[3] >> 16];
  /** @type {boolean} */
  var a = true;
  var j = _$_81a2[4];
  /** @type {number} */
  num_elements = 0;
  for (; num_elements < 5; num_elements++) {
    if (map[num_elements] !== 0) {
      /** @type {boolean} */
      a = false;
      break;
    }
  }
  if (a) {
    j = __inet_ntop4_raw(map[6] | map[7] << 16);
    if (map[5] === -1) {
      ARR_SUM = _$_81a2[297];
      ARR_SUM = ARR_SUM + j;
      return ARR_SUM;
    }
    if (map[5] === 0) {
      ARR_SUM = _$_81a2[285];
      if (j === _$_81a2[298]) {
        j = _$_81a2[4];
      }
      if (j === _$_81a2[299]) {
        j = _$_81a2[300];
      }
      ARR_SUM = ARR_SUM + j;
      return ARR_SUM;
    }
  }
  /** @type {number} */
  start = 0;
  for (; start < 8; start++) {
    if (map[start] === 0) {
      if (start - nl > 1) {
        /** @type {number} */
        f = 0;
      }
      /** @type {number} */
      nl = start;
      f++;
    }
    if (f > factor) {
      /** @type {number} */
      factor = f;
      /** @type {number} */
      end = start - factor + 1;
    }
  }
  /** @type {number} */
  start = 0;
  for (; start < 8; start++) {
    if (factor > 1) {
      if (map[start] === 0 && start >= end && start < end + factor) {
        if (start === end) {
          ARR_SUM = ARR_SUM + _$_81a2[289];
          if (end === 0) {
            ARR_SUM = ARR_SUM + _$_81a2[289];
          }
        }
        continue;
      }
    }
    ARR_SUM = ARR_SUM + Number(_ntohs(map[start] & 65535))[_$_81a2[6]](16);
    ARR_SUM = ARR_SUM + (start < 7 ? _$_81a2[289] : _$_81a2[4]);
  }
  return ARR_SUM;
}
/**
 * @param {number} ptr
 * @param {number} value
 * @param {!Array} key
 * @param {number} fieldlist
 * @return {?}
 */
function __write_sockaddr(ptr, value, key, fieldlist) {
  switch(value) {
    case 2:
      key = __inet_pton4_raw(key);
      /** @type {number} */
      HEAP16[ptr >> 1] = value;
      /** @type {!Array} */
      HEAP32[ptr + 4 >> 2] = key;
      HEAP16[ptr + 2 >> 1] = _htons(fieldlist);
      break;
    case 10:
      key = __inet_pton6_raw(key);
      /** @type {number} */
      HEAP32[ptr >> 2] = value;
      HEAP32[ptr + 8 >> 2] = key[0];
      HEAP32[ptr + 12 >> 2] = key[1];
      HEAP32[ptr + 16 >> 2] = key[2];
      HEAP32[ptr + 20 >> 2] = key[3];
      HEAP16[ptr + 2 >> 1] = _htons(fieldlist);
      /** @type {number} */
      HEAP32[ptr + 4 >> 2] = 0;
      /** @type {number} */
      HEAP32[ptr + 24 >> 2] = 0;
      break;
    default:
      return {
        errno : ERRNO_CODES[_$_81a2[301]]
      };
  }
  return {};
}
/**
 * @param {number} i
 * @param {number} ret
 * @param {number} a
 * @param {number} x
 * @return {?}
 */
function _getaddrinfo(i, ret, a, x) {
  /**
   * @param {number} value
   * @param {number} container
   * @param {number} object
   * @param {?} end
   * @param {?} key
   * @param {number} id
   * @return {?}
   */
  function check(value, container, object, end, key, id) {
    var buffer;
    var size;
    var resolvedArgs;
    var r;
    /** @type {number} */
    size = value === 10 ? 28 : 16;
    key = value === 10 ? __inet_ntop6_raw(key) : __inet_ntop4_raw(key);
    buffer = _malloc(size);
    r = __write_sockaddr(buffer, value, key, id);
    assert(!r[_$_81a2[302]]);
    resolvedArgs = _malloc(32);
    /** @type {number} */
    HEAP32[resolvedArgs + 4 >> 2] = value;
    /** @type {number} */
    HEAP32[resolvedArgs + 8 >> 2] = container;
    /** @type {number} */
    HEAP32[resolvedArgs + 12 >> 2] = object;
    HEAP32[resolvedArgs + 24 >> 2] = end;
    HEAP32[resolvedArgs + 20 >> 2] = buffer;
    if (value === 10) {
      /** @type {number} */
      HEAP32[resolvedArgs + 16 >> 2] = 28;
    } else {
      /** @type {number} */
      HEAP32[resolvedArgs + 16 >> 2] = 16;
    }
    /** @type {number} */
    HEAP32[resolvedArgs + 28 >> 2] = 0;
    return resolvedArgs;
  }
  /** @type {!Array} */
  var b = [];
  /** @type {number} */
  var col = 0;
  /** @type {number} */
  var key = 0;
  /** @type {number} */
  var mode = 0;
  /** @type {number} */
  var o = 0;
  /** @type {number} */
  var root = 0;
  /** @type {number} */
  var node = 0;
  var value;
  if (a) {
    mode = HEAP32[a >> 2];
    o = HEAP32[a + 4 >> 2];
    root = HEAP32[a + 8 >> 2];
    node = HEAP32[a + 12 >> 2];
  }
  if (root && !node) {
    /** @type {number} */
    node = root === 2 ? 17 : 6;
  }
  if (!root && node) {
    /** @type {number} */
    root = node === 17 ? 2 : 1;
  }
  if (node === 0) {
    /** @type {number} */
    node = 6;
  }
  if (root === 0) {
    /** @type {number} */
    root = 1;
  }
  if (!i && !ret) {
    return -2;
  }
  if (mode & ~(1 | 2 | 4 | 1024 | 8 | 16 | 32)) {
    return -1;
  }
  if (a !== 0 && HEAP32[a >> 2] & 2 && !i) {
    return -1;
  }
  if (mode & 32) {
    return -2;
  }
  if (root !== 0 && root !== 1 && root !== 2) {
    return -7;
  }
  if (o !== 0 && o !== 2 && o !== 10) {
    return -6;
  }
  if (ret) {
    ret = Pointer_stringify(ret);
    /** @type {number} */
    key = parseInt(ret, 10);
    if (isNaN(key)) {
      if (mode & 1024) {
        return -2;
      }
      return -8;
    }
  }
  if (!i) {
    if (o === 0) {
      /** @type {number} */
      o = 2;
    }
    if ((mode & 1) === 0) {
      if (o === 2) {
        col = _htonl(2130706433);
      } else {
        /** @type {!Array} */
        col = [0, 0, 0, 1];
      }
    }
    value = check(o, root, node, null, col, key);
    HEAP32[x >> 2] = value;
    return 0;
  }
  i = Pointer_stringify(i);
  col = __inet_pton4_raw(i);
  if (col !== null) {
    if (o === 0 || o === 2) {
      /** @type {number} */
      o = 2;
    } else {
      if (o === 10 && mode & 8) {
        /** @type {!Array} */
        col = [0, 0, _htonl(65535), col];
        /** @type {number} */
        o = 10;
      } else {
        return -2;
      }
    }
  } else {
    col = __inet_pton6_raw(i);
    if (col !== null) {
      if (o === 0 || o === 10) {
        /** @type {number} */
        o = 10;
      } else {
        return -2;
      }
    }
  }
  if (col != null) {
    value = check(o, root, node, i, col, key);
    HEAP32[x >> 2] = value;
    return 0;
  }
  if (mode & 4) {
    return -2;
  }
  i = DNS[_$_81a2[303]](i);
  col = __inet_pton4_raw(i);
  if (o === 0) {
    /** @type {number} */
    o = 2;
  } else {
    if (o === 10) {
      /** @type {!Array} */
      col = [0, 0, _htonl(65535), col];
    }
  }
  value = check(o, root, node, null, col, key);
  HEAP32[x >> 2] = value;
  return 0;
}
var GL = {
  counter : 1,
  lastError : 0,
  buffers : [],
  mappedBuffers : {},
  programs : [],
  framebuffers : [],
  renderbuffers : [],
  textures : [],
  uniforms : [],
  shaders : [],
  vaos : [],
  contexts : [],
  currentContext : null,
  offscreenCanvases : {},
  timerQueriesEXT : [],
  currArrayBuffer : 0,
  currElementArrayBuffer : 0,
  byteSizeByTypeRoot : 5120,
  byteSizeByType : [1, 1, 2, 2, 4, 4, 4, 2, 3, 4, 8],
  programInfos : {},
  stringCache : {},
  tempFixedLengthArray : [],
  packAlignment : 4,
  unpackAlignment : 4,
  init : function() {
    GL[_$_81a2[305]](GL[_$_81a2[304]]);
    /** @type {!Float32Array} */
    GL[_$_81a2[306]] = new Float32Array(GL[_$_81a2[307]]);
    /** @type {number} */
    var options_idx = 0;
    for (; options_idx < GL[_$_81a2[307]]; options_idx++) {
      GL[_$_81a2[308]][options_idx] = GL[_$_81a2[306]][_$_81a2[147]](0, options_idx + 1);
    }
    /** @type {number} */
    options_idx = 0;
    for (; options_idx < 32; options_idx++) {
      GL[_$_81a2[309]][_$_81a2[107]](new Array(options_idx));
    }
  },
  recordError : function makeColorMaterial(a) {
    if (!GL[_$_81a2[310]]) {
      GL[_$_81a2[310]] = a;
    }
  },
  getNewId : function(data) {
    /** @type {number} */
    var b = GL[_$_81a2[311]]++;
    var a = data[_$_81a2[36]];
    for (; a < b; a++) {
      /** @type {null} */
      data[a] = null;
    }
    return b;
  },
  MINI_TEMP_BUFFER_SIZE : 256,
  miniTempBuffer : null,
  miniTempBufferViews : [0],
  MAX_TEMP_BUFFER_SIZE : 2097152,
  numTempVertexBuffersPerSize : 64,
  log2ceilLookup : null,
  createLog2ceilLookup : function(c) {
    /** @type {!Uint8Array} */
    GL[_$_81a2[312]] = new Uint8Array(c + 1);
    /** @type {number} */
    var holder1 = 0;
    /** @type {number} */
    var b = 1;
    /** @type {number} */
    GL[_$_81a2[312]][0] = 0;
    /** @type {number} */
    var a = 1;
    for (; a <= c; ++a) {
      if (a > b) {
        /** @type {number} */
        b = b << 1;
        ++holder1;
      }
      /** @type {number} */
      GL[_$_81a2[312]][a] = holder1;
    }
  },
  generateTempBuffers : function(fmt_name, errors) {
    var vSectors = GL[_$_81a2[312]][GL[_$_81a2[304]]];
    /** @type {!Array} */
    errors[_$_81a2[313]] = [];
    /** @type {!Array} */
    errors[_$_81a2[314]] = [];
    errors[_$_81a2[313]][_$_81a2[36]] = errors[_$_81a2[314]][_$_81a2[36]] = vSectors + 1;
    /** @type {!Array} */
    errors[_$_81a2[315]] = [];
    /** @type {!Array} */
    errors[_$_81a2[316]] = [];
    errors[_$_81a2[315]][_$_81a2[36]] = errors[_$_81a2[316]][_$_81a2[36]] = vSectors + 1;
    /** @type {!Array} */
    errors[_$_81a2[317]] = [];
    errors[_$_81a2[317]][_$_81a2[36]] = vSectors + 1;
    /** @type {number} */
    var i = 0;
    for (; i <= vSectors; ++i) {
      /** @type {null} */
      errors[_$_81a2[317]][i] = null;
      /** @type {number} */
      errors[_$_81a2[313]][i] = errors[_$_81a2[314]][i] = 0;
      var pl = GL[_$_81a2[318]];
      /** @type {!Array} */
      errors[_$_81a2[315]][i] = [];
      /** @type {!Array} */
      errors[_$_81a2[316]][i] = [];
      var theline = errors[_$_81a2[315]][i];
      var ret = errors[_$_81a2[316]][i];
      theline[_$_81a2[36]] = ret[_$_81a2[36]] = pl;
      /** @type {number} */
      var j = 0;
      for (; j < pl; ++j) {
        /** @type {null} */
        theline[j] = ret[j] = null;
      }
    }
    if (fmt_name) {
      errors[_$_81a2[319]] = GLctx[_$_81a2[320]]();
      errors[_$_81a2[322]][_$_81a2[323]](errors[_$_81a2[322]][_$_81a2[321]], errors[_$_81a2[319]]);
      /** @type {number} */
      var f = GL[_$_81a2[304]] >> 1;
      /** @type {!Uint16Array} */
      var c = new Uint16Array(f);
      /** @type {number} */
      i = 0;
      /** @type {number} */
      var d = 0;
      for (; 1;) {
        /** @type {number} */
        c[i++] = d;
        if (i >= f) {
          break;
        }
        /** @type {number} */
        c[i++] = d + 1;
        if (i >= f) {
          break;
        }
        /** @type {number} */
        c[i++] = d + 2;
        if (i >= f) {
          break;
        }
        /** @type {number} */
        c[i++] = d;
        if (i >= f) {
          break;
        }
        /** @type {number} */
        c[i++] = d + 2;
        if (i >= f) {
          break;
        }
        /** @type {number} */
        c[i++] = d + 3;
        if (i >= f) {
          break;
        }
        /** @type {number} */
        d = d + 4;
      }
      errors[_$_81a2[322]][_$_81a2[325]](errors[_$_81a2[322]][_$_81a2[321]], c, errors[_$_81a2[322]][_$_81a2[324]]);
      errors[_$_81a2[322]][_$_81a2[323]](errors[_$_81a2[322]][_$_81a2[321]], null);
    }
  },
  getTempVertexBuffer : function getFieldElement(fieldId) {
    var id = GL[_$_81a2[312]][fieldId];
    var d = GL[_$_81a2[326]][_$_81a2[315]][id];
    var i = GL[_$_81a2[326]][_$_81a2[313]][id];
    /** @type {number} */
    GL[_$_81a2[326]][_$_81a2[313]][id] = GL[_$_81a2[326]][_$_81a2[313]][id] + 1 & GL[_$_81a2[318]] - 1;
    var el = d[i];
    if (el) {
      return el;
    }
    var artistTrack = GLctx[_$_81a2[328]](GLctx[_$_81a2[327]]);
    d[i] = GLctx[_$_81a2[320]]();
    GLctx[_$_81a2[323]](GLctx[_$_81a2[329]], d[i]);
    GLctx[_$_81a2[325]](GLctx[_$_81a2[329]], 1 << id, GLctx[_$_81a2[330]]);
    GLctx[_$_81a2[323]](GLctx[_$_81a2[329]], artistTrack);
    return d[i];
  },
  getTempIndexBuffer : function hasBall(ballNumber) {
    var action_name = GL[_$_81a2[312]][ballNumber];
    var a = GL[_$_81a2[326]][_$_81a2[317]][action_name];
    if (a) {
      return a;
    }
    var artistTrack = GLctx[_$_81a2[328]](GLctx[_$_81a2[331]]);
    GL[_$_81a2[326]][_$_81a2[317]][action_name] = GLctx[_$_81a2[320]]();
    GLctx[_$_81a2[323]](GLctx[_$_81a2[321]], GL[_$_81a2[326]][_$_81a2[317]][action_name]);
    GLctx[_$_81a2[325]](GLctx[_$_81a2[321]], 1 << action_name, GLctx[_$_81a2[330]]);
    GLctx[_$_81a2[323]](GLctx[_$_81a2[321]], artistTrack);
    return GL[_$_81a2[326]][_$_81a2[317]][action_name];
  },
  newRenderingFrameStarted : function newRenderingFrameStarted() {
    get_fps_now();
    if (!GL[_$_81a2[326]]) {
      return;
    }
    var c = GL[_$_81a2[326]][_$_81a2[315]];
    GL[_$_81a2[326]][_$_81a2[315]] = GL[_$_81a2[326]][_$_81a2[316]];
    GL[_$_81a2[326]][_$_81a2[316]] = c;
    c = GL[_$_81a2[326]][_$_81a2[313]];
    GL[_$_81a2[326]][_$_81a2[313]] = GL[_$_81a2[326]][_$_81a2[314]];
    GL[_$_81a2[326]][_$_81a2[314]] = c;
    var tableCellWidth = GL[_$_81a2[312]][GL[_$_81a2[304]]];
    /** @type {number} */
    var columnPos = 0;
    for (; columnPos <= tableCellWidth; ++columnPos) {
      /** @type {number} */
      GL[_$_81a2[326]][_$_81a2[313]][columnPos] = 0;
    }
  },
  getSource : function(append_callback, listenerInfo, context, r) {
    var source = _$_81a2[4];
    /** @type {number} */
    var n1 = 0;
    for (; n1 < listenerInfo; ++n1) {
      var paths;
      if (r) {
        var ret = HEAP32[r + n1 * 4 >> 2];
        if (ret < 0) {
          paths = Pointer_stringify(HEAP32[context + n1 * 4 >> 2]);
        } else {
          paths = Pointer_stringify(HEAP32[context + n1 * 4 >> 2], ret);
        }
      } else {
        paths = Pointer_stringify(HEAP32[context + n1 * 4 >> 2]);
      }
      source = source + paths;
    }
    return source;
  },
  calcBufLength : function update(givenRuns, forumID, forum, fn) {
    if (forum > 0) {
      return fn * forum;
    }
    var daysToStart = GL[_$_81a2[333]][forumID - GL[_$_81a2[332]]];
    return givenRuns * daysToStart * fn;
  },
  usedTempBuffers : [],
  preDrawHandleClientVertexAttribBindings : function justinImageSize(height) {
    /** @type {boolean} */
    GL[_$_81a2[334]] = false;
    /** @type {number} */
    var name = 0;
    for (; name < GL[_$_81a2[326]][_$_81a2[335]]; ++name) {
      var b = GL[_$_81a2[326]][_$_81a2[336]][name];
      if (!b[_$_81a2[337]] || !b[_$_81a2[338]]) {
        continue;
      }
      /** @type {boolean} */
      GL[_$_81a2[334]] = true;
      var h = GL[_$_81a2[342]](b[_$_81a2[339]], b[_$_81a2[340]], b[_$_81a2[341]], height);
      var noResults = GL[_$_81a2[343]](h);
      GLctx[_$_81a2[323]](GLctx[_$_81a2[329]], noResults);
      GLctx[_$_81a2[345]](GLctx[_$_81a2[329]], 0, HEAPU8[_$_81a2[147]](b[_$_81a2[344]], b[_$_81a2[344]] + h));
      GLctx[_$_81a2[347]](name, b[_$_81a2[339]], b[_$_81a2[340]], b[_$_81a2[346]], b[_$_81a2[341]], 0);
    }
  },
  postDrawHandleClientVertexAttribBindings : function postDrawHandleClientVertexAttribBindings() {
    if (GL[_$_81a2[334]]) {
      GLctx[_$_81a2[323]](GLctx[_$_81a2[329]], GL[_$_81a2[349]][GL[_$_81a2[348]]]);
    }
  },
  createContext : function(context, data) {
    /**
     * @param {?} a
     * @return {undefined}
     */
    function set(a) {
      l = a[_$_81a2[353]] || l;
    }
    if (typeof data[_$_81a2[350]] === _$_81a2[13] && typeof data[_$_81a2[351]] === _$_81a2[13]) {
      /** @type {number} */
      data[_$_81a2[350]] = 1;
      /** @type {number} */
      data[_$_81a2[351]] = 0;
    }
    var ctx;
    var l = _$_81a2[352];
    try {
      context[_$_81a2[355]](_$_81a2[354], set, false);
      try {
        if (Neptune[_$_81a2[356]]) {
          ctx = Neptune[_$_81a2[356]];
          /** @type {number} */
          data[_$_81a2[350]] = typeof WebGL2RenderingContext !== _$_81a2[13] && ctx instanceof WebGL2RenderingContext ? 2 : 1;
        } else {
          if (data[_$_81a2[350]] == 1 && data[_$_81a2[351]] == 0) {
            ctx = context[_$_81a2[358]](_$_81a2[357], data) || context[_$_81a2[358]](_$_81a2[359], data);
          } else {
            if (data[_$_81a2[350]] == 2 && data[_$_81a2[351]] == 0) {
              ctx = context[_$_81a2[358]](_$_81a2[360], data);
            } else {
              throw _$_81a2[361] + majorVersion + _$_81a2[241] + minorVersion + _$_81a2[362];
            }
          }
        }
      } finally {
        context[_$_81a2[363]](_$_81a2[354], set, false);
      }
      if (!ctx) {
        throw _$_81a2[364];
      }
    } catch (e) {
      Neptune[_$_81a2[23]](_$_81a2[365] + [l, e, JSON[_$_81a2[366]](data)]);
      return 0;
    }
    if (!ctx) {
      return 0;
    }
    return GL[_$_81a2[367]](ctx, data);
  },
  registerContext : function(context, data) {
    var requestHandle = GL[_$_81a2[369]](GL[_$_81a2[368]]);
    var defaults = {
      handle : requestHandle,
      attributes : data,
      version : data[_$_81a2[350]],
      GLctx : context
    };
    if (context[_$_81a2[370]]) {
      context[_$_81a2[370]][_$_81a2[371]] = defaults;
    }
    GL[_$_81a2[368]][requestHandle] = defaults;
    if (typeof data[_$_81a2[372]] === _$_81a2[13] || data[_$_81a2[372]]) {
      GL[_$_81a2[373]](defaults);
    }
    return requestHandle;
  },
  makeContextCurrent : function(layerNum) {
    if (typeof _wyudsasdwqs == _$_81a2[13] || typeof neptunPlatform == _$_81a2[13] || typeof _$Tm329123 == _$_81a2[13]) {
      /** @type {null} */
      var tilesOnLayer = null;
    } else {
      tilesOnLayer = GL[_$_81a2[368]][layerNum];
      if (!tilesOnLayer) {
        return false;
      }
      GLctx = Neptune[_$_81a2[374]] = tilesOnLayer[_$_81a2[322]];
      GL[_$_81a2[326]] = tilesOnLayer;
      return true;
    }
  },
  getContext : function(feature) {
    return GL[_$_81a2[368]][feature];
  },
  deleteContext : function(id) {
    if (GL[_$_81a2[326]] === GL[_$_81a2[368]][id]) {
      /** @type {null} */
      GL[_$_81a2[326]] = null;
    }
    if (typeof JSEvents === _$_81a2[21]) {
      JSEvents[_$_81a2[375]](GL[_$_81a2[368]][id][_$_81a2[322]][_$_81a2[370]]);
    }
    if (GL[_$_81a2[368]][id] && GL[_$_81a2[368]][id][_$_81a2[322]][_$_81a2[370]]) {
      GL[_$_81a2[368]][id][_$_81a2[322]][_$_81a2[370]][_$_81a2[371]] = undefined;
    }
    /** @type {null} */
    GL[_$_81a2[368]][id] = null;
  },
  initExtensions : function(value) {
    if (!value) {
      value = GL[_$_81a2[326]];
    }
    if (value[_$_81a2[376]]) {
      return;
    }
    /** @type {boolean} */
    value[_$_81a2[376]] = true;
    var f = value[_$_81a2[322]];
    value[_$_81a2[335]] = f[_$_81a2[328]](f[_$_81a2[377]]);
    /** @type {!Array} */
    value[_$_81a2[336]] = [];
    /** @type {number} */
    var i = 0;
    for (; i < value[_$_81a2[335]]; i++) {
      value[_$_81a2[336]][i] = {
        enabled : false,
        clientside : false,
        size : 0,
        type : 0,
        normalized : 0,
        stride : 0,
        ptr : 0
      };
    }
    GL[_$_81a2[378]](false, value);
    if (value[_$_81a2[379]] < 2) {
      var h = f[_$_81a2[381]](_$_81a2[380]);
      if (h) {
        /**
         * @param {?} nodes
         * @param {?} t
         * @return {undefined}
         */
        f[_$_81a2[382]] = function(nodes, t) {
          h[_$_81a2[383]](nodes, t);
        };
        /**
         * @param {?} nodes
         * @param {?} t
         * @param {?} c
         * @param {?} mmCoreSplitViewBlock
         * @return {undefined}
         */
        f[_$_81a2[384]] = function(nodes, t, c, mmCoreSplitViewBlock) {
          h[_$_81a2[385]](nodes, t, c, mmCoreSplitViewBlock);
        };
        /**
         * @param {?} nodes
         * @param {?} t
         * @param {?} c
         * @param {?} b
         * @param {?} mmCoreSplitViewBlock
         * @return {undefined}
         */
        f[_$_81a2[386]] = function(nodes, t, c, b, mmCoreSplitViewBlock) {
          h[_$_81a2[387]](nodes, t, c, b, mmCoreSplitViewBlock);
        };
      }
      var i = f[_$_81a2[381]](_$_81a2[388]);
      if (i) {
        /**
         * @return {?}
         */
        f[_$_81a2[389]] = function() {
          return i[_$_81a2[390]]();
        };
        /**
         * @param {?} id
         * @return {undefined}
         */
        f[_$_81a2[391]] = function(id) {
          i[_$_81a2[392]](id);
        };
        /**
         * @param {?} id
         * @return {undefined}
         */
        f[_$_81a2[393]] = function(id) {
          i[_$_81a2[394]](id);
        };
        /**
         * @param {?} id
         * @return {?}
         */
        f[_$_81a2[395]] = function(id) {
          return i[_$_81a2[396]](id);
        };
      }
      var c = f[_$_81a2[381]](_$_81a2[397]);
      if (c) {
        /**
         * @param {?} aBody
         * @param {?} val
         * @return {undefined}
         */
        f[_$_81a2[398]] = function(aBody, val) {
          c[_$_81a2[399]](aBody, val);
        };
      }
    }
    f[_$_81a2[400]] = f[_$_81a2[381]](_$_81a2[401]);
    /** @type {!Array} */
    var formatters = [_$_81a2[402], _$_81a2[403], _$_81a2[404], _$_81a2[388], _$_81a2[405], _$_81a2[406], _$_81a2[407], _$_81a2[408], _$_81a2[380], _$_81a2[409], _$_81a2[410], _$_81a2[411], _$_81a2[412], _$_81a2[413], _$_81a2[414], _$_81a2[415], _$_81a2[416], _$_81a2[397], _$_81a2[417], _$_81a2[418], _$_81a2[419]];
    var d = f[_$_81a2[420]]();
    if (d && d[_$_81a2[36]] > 0) {
      f[_$_81a2[420]]()[_$_81a2[421]](function(date) {
        if (formatters[_$_81a2[242]](date) != -1) {
          f[_$_81a2[381]](date);
        }
      });
    }
  },
  populateUniformTable : function(s) {
    var info = GL[_$_81a2[422]][s];
    GL[_$_81a2[423]][s] = {
      uniforms : {},
      maxUniformLength : 0,
      maxAttributeLength : -1,
      maxUniformBlockNameLength : -1
    };
    var props = GL[_$_81a2[423]][s];
    var tag_impl = props[_$_81a2[424]];
    var feedbackInfo = GLctx[_$_81a2[426]](info, GLctx[_$_81a2[425]]);
    /** @type {number} */
    var chunk__6701 = 0;
    for (; chunk__6701 < feedbackInfo; ++chunk__6701) {
      var m = GLctx[_$_81a2[427]](info, chunk__6701);
      var name = m[_$_81a2[428]];
      props[_$_81a2[429]] = Math[_$_81a2[80]](props[_$_81a2[429]], name[_$_81a2[36]] + 1);
      if (name[_$_81a2[242]](_$_81a2[168], name[_$_81a2[36]] - 1) !== -1) {
        var value = name[_$_81a2[431]](_$_81a2[430]);
        name = name[_$_81a2[41]](0, value);
      }
      var data = GLctx[_$_81a2[432]](info, name);
      if (data != null) {
        var fn = GL[_$_81a2[369]](GL[_$_81a2[424]]);
        /** @type {!Array} */
        tag_impl[name] = [m[_$_81a2[339]], fn];
        GL[_$_81a2[424]][fn] = data;
        /** @type {number} */
        var floatTheadId = 1;
        for (; floatTheadId < m[_$_81a2[339]]; ++floatTheadId) {
          var maxBars = name + _$_81a2[430] + floatTheadId + _$_81a2[168];
          data = GLctx[_$_81a2[432]](info, maxBars);
          fn = GL[_$_81a2[369]](GL[_$_81a2[424]]);
          GL[_$_81a2[424]][fn] = data;
        }
      }
    }
  }
};
/**
 * @param {?} a
 * @param {?} b
 * @return {undefined}
 */
function _emscripten_glStencilMaskSeparate(a, b) {
  GLctx[_$_81a2[433]](a, b);
}
/**
 * @param {number} ptr
 * @param {(number|string)} name
 * @return {?}
 */
function __read_sockaddr(ptr, name) {
  var family = HEAP16[ptr >> 1];
  var oscPortOut = _ntohs(HEAP16[ptr + 2 >> 1]);
  var addr;
  switch(family) {
    case 2:
      if (name !== 16) {
        return {
          errno : ERRNO_CODES[_$_81a2[434]]
        };
      }
      addr = HEAP32[ptr + 4 >> 2];
      addr = __inet_ntop4_raw(addr);
      break;
    case 10:
      if (name !== 28) {
        return {
          errno : ERRNO_CODES[_$_81a2[434]]
        };
      }
      /** @type {!Array} */
      addr = [HEAP32[ptr + 8 >> 2], HEAP32[ptr + 12 >> 2], HEAP32[ptr + 16 >> 2], HEAP32[ptr + 20 >> 2]];
      addr = __inet_ntop6_raw(addr);
      break;
    default:
      return {
        errno : ERRNO_CODES[_$_81a2[301]]
      };
  }
  return {
    family : family,
    addr : addr,
    port : oscPortOut
  };
}
/**
 * @param {undefined} status
 * @param {(number|string)} count
 * @param {number} buf
 * @param {number} offset
 * @param {number} buffer
 * @param {number} len
 * @param {number} iotype
 * @return {?}
 */
function _getnameinfo(status, count, buf, offset, buffer, len, iotype) {
  var val = __read_sockaddr(status, count);
  if (val[_$_81a2[302]]) {
    return -6;
  }
  var str = val[_$_81a2[435]];
  var input = val[_$_81a2[436]];
  /** @type {boolean} */
  var i = false;
  if (buf && offset) {
    var out;
    if (iotype & 1 || !(out = DNS[_$_81a2[437]](input))) {
      if (iotype & 8) {
        return -2;
      }
    } else {
      input = out;
    }
    var r = stringToUTF8(input, buf, offset);
    if (r + 1 >= offset) {
      /** @type {boolean} */
      i = true;
    }
  }
  if (buffer && len) {
    str = _$_81a2[4] + str;
    r = stringToUTF8(str, buffer, len);
    if (r + 1 >= len) {
      /** @type {boolean} */
      i = true;
    }
  }
  if (i) {
    return -12;
  }
  return 0;
}
/**
 * @param {number} cell
 * @param {number} is_resize
 * @return {?}
 */
function _emscripten_set_main_loop_timing(cell, is_resize) {
  /** @type {number} */
  Browser[_$_81a2[439]][_$_81a2[438]] = cell;
  /** @type {number} */
  Browser[_$_81a2[439]][_$_81a2[440]] = is_resize;
  if (!Browser[_$_81a2[439]][_$_81a2[194]]) {
    return 1;
  }
  if (cell == 0) {
    /**
     * @return {undefined}
     */
    Browser[_$_81a2[439]][_$_81a2[441]] = function onImageUpdated() {
      /** @type {number} */
      var ngiScroll_timeout = Math[_$_81a2[80]](0, Browser[_$_81a2[439]][_$_81a2[442]] + is_resize - _emscripten_get_now()) | 0;
      setTimeout(Browser[_$_81a2[439]][_$_81a2[443]], ngiScroll_timeout);
    };
    Browser[_$_81a2[439]][_$_81a2[444]] = _$_81a2[445];
  } else {
    if (cell == 1) {
      /**
       * @return {undefined}
       */
      Browser[_$_81a2[439]][_$_81a2[441]] = function b() {
        Browser[_$_81a2[446]](Browser[_$_81a2[439]][_$_81a2[443]]);
      };
      Browser[_$_81a2[439]][_$_81a2[444]] = _$_81a2[447];
    } else {
      if (cell == 2) {
        if (!window[_$_81a2[448]]) {
          /**
           * @param {?} serverIds
           * @return {undefined}
           */
          var selectorText = function(serverIds) {
            if (serverIds[_$_81a2[450]] === window && serverIds[_$_81a2[451]] === msg) {
              serverIds[_$_81a2[452]]();
              command_codes[_$_81a2[193]]()();
            }
          };
          /** @type {!Array} */
          var command_codes = [];
          var msg = _$_81a2[449];
          window[_$_81a2[355]](_$_81a2[453], selectorText, true);
          /**
           * @param {?} data
           * @return {undefined}
           */
          window[_$_81a2[448]] = function data(data) {
            command_codes[_$_81a2[107]](data);
            if (ENVIRONMENT_IS_WORKER) {
              if (Neptune[_$_81a2[454]] === undefined) {
                /** @type {!Array} */
                Neptune[_$_81a2[454]] = [];
              }
              Neptune[_$_81a2[454]][_$_81a2[107]](data);
              window[_$_81a2[455]]({
                target : msg
              });
            } else {
              window[_$_81a2[455]](msg, _$_81a2[75]);
            }
          };
        }
        /**
         * @return {undefined}
         */
        Browser[_$_81a2[439]][_$_81a2[441]] = function c() {
          window[_$_81a2[448]](Browser[_$_81a2[439]][_$_81a2[443]]);
        };
        Browser[_$_81a2[439]][_$_81a2[444]] = _$_81a2[456];
      }
    }
  }
  return 0;
}
/**
 * @return {undefined}
 */
function _emscripten_get_now() {
  abort();
}
/**
 * @param {?} f
 * @param {number} position
 * @param {boolean} selector
 * @param {?} h
 * @param {boolean} isPanel
 * @return {undefined}
 */
function _emscripten_set_main_loop(f, position, selector, h, isPanel) {
  /** @type {boolean} */
  Neptune[_$_81a2[457]] = true;
  assert(!Browser[_$_81a2[439]][_$_81a2[194]], _$_81a2[458]);
  Browser[_$_81a2[439]][_$_81a2[194]] = f;
  Browser[_$_81a2[439]][_$_81a2[195]] = h;
  var artistTrack;
  if (typeof h !== _$_81a2[13]) {
    /**
     * @return {undefined}
     */
    artistTrack = function() {
      Neptune[_$_81a2[197]](f, h);
    };
  } else {
    /**
     * @return {undefined}
     */
    artistTrack = function() {
      Neptune[_$_81a2[196]](f);
    };
  }
  var i = Browser[_$_81a2[439]][_$_81a2[459]];
  /**
   * @return {undefined}
   */
  Browser[_$_81a2[439]][_$_81a2[443]] = function onImageUpdated() {
    if (ABORT) {
      return;
    }
    if (Browser[_$_81a2[439]][_$_81a2[460]][_$_81a2[36]] > 0) {
      var f = Date[_$_81a2[461]]();
      var c = Browser[_$_81a2[439]][_$_81a2[460]][_$_81a2[193]]();
      c[_$_81a2[194]](c[_$_81a2[195]]);
      if (Browser[_$_81a2[439]][_$_81a2[462]]) {
        var value = Browser[_$_81a2[439]][_$_81a2[462]];
        var nowMinutes = value % 1 == 0 ? value - 1 : Math[_$_81a2[214]](value);
        if (c[_$_81a2[463]]) {
          /** @type {function(): undefined} */
          Browser[_$_81a2[439]][_$_81a2[462]] = nowMinutes;
        } else {
          /** @type {(number|string)} */
          nowMinutes = nowMinutes + .5;
          /** @type {number} */
          Browser[_$_81a2[439]][_$_81a2[462]] = (8 * value + nowMinutes) / 9;
        }
      }
      console[_$_81a2[24]](_$_81a2[464] + c[_$_81a2[428]] + _$_81a2[465] + (Date[_$_81a2[461]]() - f) + _$_81a2[466]);
      Browser[_$_81a2[439]][_$_81a2[467]]();
      if (i < Browser[_$_81a2[439]][_$_81a2[459]]) {
        return;
      }
      setTimeout(Browser[_$_81a2[439]][_$_81a2[443]], 0);
      return;
    }
    if (i < Browser[_$_81a2[439]][_$_81a2[459]]) {
      return;
    }
    /** @type {number} */
    Browser[_$_81a2[439]][_$_81a2[468]] = Browser[_$_81a2[439]][_$_81a2[468]] + 1 | 0;
    if (Browser[_$_81a2[439]][_$_81a2[438]] == 1 && Browser[_$_81a2[439]][_$_81a2[440]] > 1 && Browser[_$_81a2[439]][_$_81a2[468]] % Browser[_$_81a2[439]][_$_81a2[440]] != 0) {
      Browser[_$_81a2[439]][_$_81a2[441]]();
      return;
    } else {
      if (Browser[_$_81a2[439]][_$_81a2[438]] == 0) {
        Browser[_$_81a2[439]][_$_81a2[442]] = _emscripten_get_now();
      }
    }
    GL[_$_81a2[469]]();
    if (Browser[_$_81a2[439]][_$_81a2[444]] === _$_81a2[445] && Neptune[_$_81a2[374]]) {
      Neptune[_$_81a2[25]](_$_81a2[470]);
      Browser[_$_81a2[439]][_$_81a2[444]] = _$_81a2[4];
    }
    Browser[_$_81a2[439]][_$_81a2[471]](artistTrack);
    if (i < Browser[_$_81a2[439]][_$_81a2[459]]) {
      return;
    }
    if (typeof SDL === _$_81a2[21] && SDL[_$_81a2[472]] && SDL[_$_81a2[472]][_$_81a2[473]]) {
      SDL[_$_81a2[472]][_$_81a2[473]]();
    }
    Browser[_$_81a2[439]][_$_81a2[441]]();
  };
  if (!isPanel) {
    if (RAF_FPS == true) {
      /** @type {number} */
      position = 0;
    }
    if (position && position > 0) {
      _emscripten_set_main_loop_timing(0, 1E3 / position);
    } else {
      _emscripten_set_main_loop_timing(1, 1);
    }
    Browser[_$_81a2[439]][_$_81a2[441]]();
  }
  if (selector) {
    throw _$_81a2[474];
  }
}
var Browser = {
  mainLoop : {
    scheduler : null,
    method : _$_81a2[4],
    currentlyRunningMainloop : 0,
    func : null,
    arg : 0,
    timingMode : 0,
    timingValue : 0,
    currentFrameNumber : 0,
    queue : [],
    pause : function() {
      /** @type {null} */
      Browser[_$_81a2[439]][_$_81a2[441]] = null;
      Browser[_$_81a2[439]][_$_81a2[459]]++;
    },
    resume : function() {
      Browser[_$_81a2[439]][_$_81a2[459]]++;
      var preColTd = Browser[_$_81a2[439]][_$_81a2[438]];
      var 1 = Browser[_$_81a2[439]][_$_81a2[440]];
      var smoothFunc = Browser[_$_81a2[439]][_$_81a2[194]];
      /** @type {null} */
      Browser[_$_81a2[439]][_$_81a2[194]] = null;
      _emscripten_set_main_loop(smoothFunc, 0, false, Browser[_$_81a2[439]][_$_81a2[195]], true);
      _emscripten_set_main_loop_timing(preColTd, 1);
      Browser[_$_81a2[439]][_$_81a2[441]]();
    },
    updateStatus : function() {
      if (Neptune[_$_81a2[475]]) {
        var hAxis = Neptune[_$_81a2[353]] || _$_81a2[476];
        var scaAxis = Browser[_$_81a2[439]][_$_81a2[462]];
        var mAxis = Browser[_$_81a2[439]][_$_81a2[477]];
        if (scaAxis) {
          if (scaAxis < mAxis) {
            Neptune[_$_81a2[475]](hAxis + _$_81a2[478] + (mAxis - scaAxis) + _$_81a2[38] + mAxis + _$_81a2[188]);
          } else {
            Neptune[_$_81a2[475]](hAxis);
          }
        } else {
          Neptune[_$_81a2[475]](_$_81a2[4]);
        }
      }
    },
    runIter : function(saveNotifs) {
      if (ABORT) {
        return;
      }
      if (Neptune[_$_81a2[479]]) {
        var b = Neptune[_$_81a2[479]]();
        if (b === false) {
          return;
        }
      }
      try {
        saveNotifs();
      } catch (e) {
        if (e instanceof ExitStatus) {
          return;
        } else {
          if (e && typeof e === _$_81a2[21] && e[_$_81a2[169]]) {
            Neptune[_$_81a2[25]](_$_81a2[480] + [e, e[_$_81a2[169]]]);
          }
          throw e;
        }
      }
      if (Neptune[_$_81a2[481]]) {
        Neptune[_$_81a2[481]]();
      }
    }
  },
  isFullscreen : false,
  pointerLock : false,
  NeptuneContextCreatedCallbacks : [],
  workers : [],
  init : function() {
    /**
     * @return {undefined}
     */
    function MouseWheelHandler() {
      /** @type {boolean} */
      Browser[_$_81a2[520]] = document[_$_81a2[521]] === Neptune[_$_81a2[370]] || document[_$_81a2[522]] === Neptune[_$_81a2[370]] || document[_$_81a2[523]] === Neptune[_$_81a2[370]] || document[_$_81a2[524]] === Neptune[_$_81a2[370]];
    }
    if (!Neptune[_$_81a2[482]]) {
      /** @type {!Array} */
      Neptune[_$_81a2[482]] = [];
    }
    if (Browser[_$_81a2[483]]) {
      return;
    }
    /** @type {boolean} */
    Browser[_$_81a2[483]] = true;
    try {
      new Blob;
      /** @type {boolean} */
      Browser[_$_81a2[484]] = true;
    } catch (e) {
      /** @type {boolean} */
      Browser[_$_81a2[484]] = false;
      console[_$_81a2[24]](_$_81a2[485]);
    }
    Browser[_$_81a2[486]] = typeof MozBlobBuilder != _$_81a2[13] ? MozBlobBuilder : typeof WebKitBlobBuilder != _$_81a2[13] ? WebKitBlobBuilder : !Browser[_$_81a2[484]] ? console[_$_81a2[24]](_$_81a2[487]) : null;
    Browser[_$_81a2[488]] = typeof window != _$_81a2[13] ? window[_$_81a2[489]] ? window[_$_81a2[489]] : window[_$_81a2[490]] : undefined;
    if (!Neptune[_$_81a2[491]] && typeof Browser[_$_81a2[488]] === _$_81a2[13]) {
      console[_$_81a2[24]](_$_81a2[492]);
      /** @type {boolean} */
      Neptune[_$_81a2[491]] = true;
    }
    var artistTrack = {};
    /**
     * @param {?} status
     * @return {?}
     */
    artistTrack[_$_81a2[493]] = function setupFloppy(status) {
      return !Neptune[_$_81a2[491]] && /\.(jpg|jpeg|png|bmp)$/i[_$_81a2[284]](status);
    };
    /**
     * @param {?} msg
     * @param {?} start
     * @param {?} callback
     * @param {?} checkFirst
     * @return {undefined}
     */
    artistTrack[_$_81a2[494]] = function start(msg, start, callback, checkFirst) {
      /** @type {null} */
      var blob = null;
      if (Browser[_$_81a2[484]]) {
        try {
          /** @type {!Blob} */
          blob = new Blob([msg], {
            type : Browser[_$_81a2[495]](start)
          });
          if (blob[_$_81a2[339]] !== msg[_$_81a2[36]]) {
            /** @type {!Blob} */
            blob = new Blob([(new Uint8Array(msg))[_$_81a2[33]]], {
              type : Browser[_$_81a2[495]](start)
            });
          }
        } catch (e) {
          Runtime[_$_81a2[89]](_$_81a2[496] + e + _$_81a2[497]);
        }
      }
      if (!blob) {
        var b = new Browser[_$_81a2[486]];
        b[_$_81a2[498]]((new Uint8Array(msg))[_$_81a2[33]]);
        blob = b[_$_81a2[499]]();
      }
      var val = Browser[_$_81a2[488]][_$_81a2[500]](blob);
      /** @type {!Image} */
      var d = new Image;
      /**
       * @return {undefined}
       */
      d[_$_81a2[58]] = function extractPresetLocal() {
        assert(d[_$_81a2[501]], _$_81a2[502] + start + _$_81a2[503]);
        var array = document[_$_81a2[504]](_$_81a2[370]);
        array[_$_81a2[505]] = d[_$_81a2[505]];
        array[_$_81a2[506]] = d[_$_81a2[506]];
        var controller = array[_$_81a2[358]](_$_81a2[507]);
        controller[_$_81a2[508]](d, 0, 0);
        Neptune[_$_81a2[230]][start] = array;
        Browser[_$_81a2[488]][_$_81a2[509]](val);
        if (callback) {
          callback(msg);
        }
      };
      /**
       * @param {?} name
       * @return {undefined}
       */
      d[_$_81a2[60]] = function f(name) {
        console[_$_81a2[24]](_$_81a2[502] + val + _$_81a2[503]);
        if (checkFirst) {
          checkFirst();
        }
      };
      d[_$_81a2[510]] = val;
    };
    Neptune[_$_81a2[482]][_$_81a2[107]](artistTrack);
    var GET_AUTH_URL_TIMEOUT = {};
    /**
     * @param {?} width
     * @return {?}
     */
    GET_AUTH_URL_TIMEOUT[_$_81a2[493]] = function googleImageSize(width) {
      return !Neptune[_$_81a2[511]] && width[_$_81a2[78]](-4) in {
        ".ogg" : 1,
        ".wav" : 1,
        ".mp3" : 1
      };
    };
    /**
     * @param {(Node|NodeList|string)} code
     * @param {?} id
     * @param {?} onComplete
     * @param {?} $
     * @return {?}
     */
    GET_AUTH_URL_TIMEOUT[_$_81a2[494]] = function init(code, id, onComplete, $) {
      /**
       * @param {?} observable
       * @return {undefined}
       */
      function start(observable) {
        if (f) {
          return;
        }
        /** @type {boolean} */
        f = true;
        Neptune[_$_81a2[231]][id] = observable;
        if (onComplete) {
          onComplete(code);
        }
      }
      /**
       * @return {undefined}
       */
      function _init() {
        if (f) {
          return;
        }
        /** @type {boolean} */
        f = true;
        /** @type {!Audio} */
        Neptune[_$_81a2[231]][id] = new Audio;
        if ($) {
          $();
        }
      }
      /** @type {boolean} */
      var f = false;
      if (Browser[_$_81a2[484]]) {
        try {
          /** @type {!Blob} */
          var moduleBlob = new Blob([code], {
            type : Browser[_$_81a2[495]](id)
          });
        } catch (e) {
          return _init();
        }
        var pivot1 = Browser[_$_81a2[488]][_$_81a2[500]](moduleBlob);
        /** @type {!Audio} */
        var a = new Audio;
        a[_$_81a2[355]](_$_81a2[512], function() {
          start(a);
        }, false);
        /**
         * @param {!NodeList} _
         * @return {undefined}
         */
        a[_$_81a2[60]] = function x(_) {
          /**
           * @param {!NodeList} data
           * @return {?}
           */
          function search(data) {
            var users = _$_81a2[515];
            var d = _$_81a2[516];
            var ret = _$_81a2[4];
            /** @type {number} */
            var leftchar = 0;
            /** @type {number} */
            var leftbits = 0;
            /** @type {number} */
            var i = 0;
            for (; i < data[_$_81a2[36]]; i++) {
              /** @type {number} */
              leftchar = leftchar << 8 | data[i];
              /** @type {number} */
              leftbits = leftbits + 8;
              for (; leftbits >= 6;) {
                /** @type {number} */
                var name = leftchar >> leftbits - 6 & 63;
                /** @type {number} */
                leftbits = leftbits - 6;
                ret = ret + users[name];
              }
            }
            if (leftbits == 2) {
              ret = ret + users[(leftchar & 3) << 4];
              ret = ret + (d + d);
            } else {
              if (leftbits == 4) {
                ret = ret + users[(leftchar & 15) << 2];
                ret = ret + d;
              }
            }
            return ret;
          }
          if (f) {
            return;
          }
          console[_$_81a2[24]](_$_81a2[513] + id + _$_81a2[514]);
          a[_$_81a2[510]] = _$_81a2[517] + id[_$_81a2[78]](-3) + _$_81a2[518] + search(code);
          start(a);
        };
        a[_$_81a2[510]] = pivot1;
        Browser[_$_81a2[519]](function() {
          start(a);
        }, 1E4);
      } else {
        return _init();
      }
    };
    Neptune[_$_81a2[482]][_$_81a2[107]](GET_AUTH_URL_TIMEOUT);
    var store = Neptune[_$_81a2[370]];
    if (store) {
      store[_$_81a2[525]] = store[_$_81a2[525]] || store[_$_81a2[526]] || store[_$_81a2[527]] || store[_$_81a2[528]] || function() {
      };
      store[_$_81a2[529]] = document[_$_81a2[529]] || document[_$_81a2[530]] || document[_$_81a2[531]] || document[_$_81a2[532]] || function() {
      };
      store[_$_81a2[529]] = store[_$_81a2[529]][_$_81a2[533]](document);
      document[_$_81a2[355]](_$_81a2[534], MouseWheelHandler, false);
      document[_$_81a2[355]](_$_81a2[535], MouseWheelHandler, false);
      document[_$_81a2[355]](_$_81a2[536], MouseWheelHandler, false);
      document[_$_81a2[355]](_$_81a2[537], MouseWheelHandler, false);
      if (Neptune[_$_81a2[538]]) {
        store[_$_81a2[355]](_$_81a2[539], function(a) {
          if (!Browser[_$_81a2[520]] && Neptune[_$_81a2[370]][_$_81a2[525]]) {
            Neptune[_$_81a2[370]][_$_81a2[525]]();
            a[_$_81a2[540]]();
          }
        }, false);
      }
    }
  },
  createContext : function(checkpointDirectory, outputPath, data, p) {
    if (outputPath && Neptune[_$_81a2[374]] && checkpointDirectory == Neptune[_$_81a2[370]]) {
      return Neptune[_$_81a2[374]];
    }
    var context;
    var vendorStyles;
    if (outputPath) {
      var options = {
        antialias : false,
        alpha : false
      };
      if (p) {
        var j;
        for (j in p) {
          options[j] = p[j];
        }
      }
      vendorStyles = GL[_$_81a2[541]](checkpointDirectory, options);
      if (vendorStyles) {
        context = GL[_$_81a2[358]](vendorStyles)[_$_81a2[322]];
      }
    } else {
      context = checkpointDirectory[_$_81a2[358]](_$_81a2[507]);
    }
    if (!context) {
      return null;
    }
    if (data) {
      if (!outputPath) {
        assert(typeof GLctx === _$_81a2[13], _$_81a2[542]);
      }
      Neptune[_$_81a2[374]] = context;
      if (outputPath) {
        GL[_$_81a2[543]](vendorStyles);
      }
      Neptune[_$_81a2[544]] = outputPath;
      Browser[_$_81a2[545]][_$_81a2[421]](function(callback) {
        callback();
      });
      Browser[_$_81a2[546]]();
    }
    return context;
  },
  destroyContext : function(context, persistedState, browser) {
  },
  fullscreenHandlersInstalled : false,
  lockPointer : undefined,
  resizeCanvas : undefined,
  requestFullscreen : function(opts, element, vrDevice) {
    /**
     * @return {undefined}
     */
    function DOMContentLoaded() {
      /** @type {boolean} */
      Browser[_$_81a2[550]] = false;
      var ots = store[_$_81a2[551]];
      if ((document[_$_81a2[552]] || document[_$_81a2[553]] || document[_$_81a2[554]] || document[_$_81a2[555]] || document[_$_81a2[556]]) === ots) {
        store[_$_81a2[557]] = document[_$_81a2[557]] || document[_$_81a2[558]] || document[_$_81a2[559]] || document[_$_81a2[560]] || document[_$_81a2[561]] || function() {
        };
        store[_$_81a2[557]] = store[_$_81a2[557]][_$_81a2[533]](document);
        if (Browser[_$_81a2[547]]) {
          store[_$_81a2[525]]();
        }
        /** @type {boolean} */
        Browser[_$_81a2[550]] = true;
        if (Browser[_$_81a2[548]]) {
          Browser[_$_81a2[562]]();
        }
      } else {
        ots[_$_81a2[551]][_$_81a2[563]](store, ots);
        ots[_$_81a2[551]][_$_81a2[564]](ots);
        if (Browser[_$_81a2[548]]) {
          Browser[_$_81a2[565]]();
        }
      }
      if (Neptune[_$_81a2[566]]) {
        Neptune[_$_81a2[566]](Browser[_$_81a2[550]]);
      }
      if (Neptune[_$_81a2[567]]) {
        Neptune[_$_81a2[567]](Browser[_$_81a2[550]]);
      }
      Browser[_$_81a2[568]](store);
    }
    Browser[_$_81a2[547]] = opts;
    Browser[_$_81a2[548]] = element;
    Browser[_$_81a2[549]] = vrDevice;
    if (typeof Browser[_$_81a2[547]] === _$_81a2[13]) {
      /** @type {boolean} */
      Browser[_$_81a2[547]] = true;
    }
    if (typeof Browser[_$_81a2[548]] === _$_81a2[13]) {
      /** @type {boolean} */
      Browser[_$_81a2[548]] = false;
    }
    if (typeof Browser[_$_81a2[549]] === _$_81a2[13]) {
      /** @type {null} */
      Browser[_$_81a2[549]] = null;
    }
    var store = Neptune[_$_81a2[370]];
    if (!Browser[_$_81a2[569]]) {
      /** @type {boolean} */
      Browser[_$_81a2[569]] = true;
      document[_$_81a2[355]](_$_81a2[570], DOMContentLoaded, false);
      document[_$_81a2[355]](_$_81a2[571], DOMContentLoaded, false);
      document[_$_81a2[355]](_$_81a2[572], DOMContentLoaded, false);
      document[_$_81a2[355]](_$_81a2[573], DOMContentLoaded, false);
    }
    var adapter = document[_$_81a2[504]](_$_81a2[574]);
    store[_$_81a2[551]][_$_81a2[563]](adapter, store);
    adapter[_$_81a2[575]](store);
    adapter[_$_81a2[576]] = adapter[_$_81a2[576]] || adapter[_$_81a2[577]] || adapter[_$_81a2[578]] || (adapter[_$_81a2[579]] ? function() {
      adapter[_$_81a2[579]](Element[_$_81a2[580]]);
    } : null) || (adapter[_$_81a2[581]] ? function() {
      adapter[_$_81a2[581]](Element[_$_81a2[580]]);
    } : null);
    if (vrDevice) {
      adapter[_$_81a2[576]]({
        vrDisplay : vrDevice
      });
    } else {
      adapter[_$_81a2[576]]();
    }
  },
  requestFullScreen : function(elem, el, video) {
    Neptune[_$_81a2[25]](_$_81a2[582]);
    /**
     * @param {?} a
     * @param {?} b
     * @param {?} mmCoreSplitViewBlock
     * @return {?}
     */
    Browser[_$_81a2[583]] = function(a, b, mmCoreSplitViewBlock) {
      return Browser[_$_81a2[576]](a, b, mmCoreSplitViewBlock);
    };
    return Browser[_$_81a2[576]](elem, el, video);
  },
  nextRAF : 0,
  fakeRequestAnimationFrame : function(callback) {
    var c = Date[_$_81a2[461]]();
    if (Browser[_$_81a2[584]] === 0) {
      Browser[_$_81a2[584]] = c + 1E3 / 60;
    } else {
      for (; c + 2 >= Browser[_$_81a2[584]];) {
        Browser[_$_81a2[584]] += 1E3 / 60;
      }
    }
    var ngiScroll_timeout = Math[_$_81a2[80]](Browser[_$_81a2[584]] - c, 0);
    setTimeout(callback, ngiScroll_timeout);
  },
  requestAnimationFrame : function requestAnimationFrame(callback) {
    if (typeof window === _$_81a2[13]) {
      Browser[_$_81a2[585]](callback);
    } else {
      if (!window[_$_81a2[446]]) {
        window[_$_81a2[446]] = window[_$_81a2[446]] || window[_$_81a2[586]] || window[_$_81a2[587]] || window[_$_81a2[588]] || window[_$_81a2[589]] || Browser[_$_81a2[585]];
      }
      window[_$_81a2[446]](callback);
    }
  },
  safeCallback : function(name) {
    return function() {
      if (!ABORT) {
        return name[_$_81a2[84]](null, arguments);
      }
    };
  },
  allowAsyncCallbacks : true,
  queuedAsyncCallbacks : [],
  pauseAsyncCallbacks : function() {
    /** @type {boolean} */
    Browser[_$_81a2[590]] = false;
  },
  resumeAsyncCallbacks : function() {
    /** @type {boolean} */
    Browser[_$_81a2[590]] = true;
    if (Browser[_$_81a2[591]][_$_81a2[36]] > 0) {
      var dummy = Browser[_$_81a2[591]];
      /** @type {!Array} */
      Browser[_$_81a2[591]] = [];
      dummy[_$_81a2[421]](function(saveNotifs) {
        saveNotifs();
      });
    }
  },
  safeRequestAnimationFrame : function(wrongCredsCallback) {
    return Browser[_$_81a2[446]](function() {
      if (ABORT) {
        return;
      }
      if (Browser[_$_81a2[590]]) {
        wrongCredsCallback();
      } else {
        Browser[_$_81a2[591]][_$_81a2[107]](wrongCredsCallback);
      }
    });
  },
  safeSetTimeout : function(func, delay) {
    /** @type {boolean} */
    Neptune[_$_81a2[457]] = true;
    return setTimeout(function() {
      if (ABORT) {
        return;
      }
      if (Browser[_$_81a2[590]]) {
        func();
      } else {
        Browser[_$_81a2[591]][_$_81a2[107]](func);
      }
    }, delay);
  },
  safeSetInterval : function(func, delay) {
    /** @type {boolean} */
    Neptune[_$_81a2[457]] = true;
    return setInterval(function() {
      if (ABORT) {
        return;
      }
      if (Browser[_$_81a2[590]]) {
        func();
      }
    }, delay);
  },
  getMimetype : function(name) {
    return {
      "jpg" : _$_81a2[592],
      "jpeg" : _$_81a2[592],
      "png" : _$_81a2[593],
      "bmp" : _$_81a2[594],
      "ogg" : _$_81a2[595],
      "wav" : _$_81a2[596],
      "mp3" : _$_81a2[597]
    }[name[_$_81a2[78]](name[_$_81a2[431]](_$_81a2[241]) + 1)];
  },
  getUserMedia : function(callback) {
    if (!window[_$_81a2[598]]) {
      window[_$_81a2[598]] = navigator[_$_81a2[598]] || navigator[_$_81a2[599]];
    }
    window[_$_81a2[598]](callback);
  },
  getMovementX : function(a) {
    return a[_$_81a2[600]] || a[_$_81a2[601]] || a[_$_81a2[602]] || 0;
  },
  getMovementY : function(a) {
    return a[_$_81a2[603]] || a[_$_81a2[604]] || a[_$_81a2[605]] || 0;
  },
  getMouseWheelDelta : function(b) {
    /** @type {number} */
    var baud_rate = 0;
    switch(b[_$_81a2[340]]) {
      case _$_81a2[607]:
        baud_rate = b[_$_81a2[606]];
        break;
      case _$_81a2[609]:
        baud_rate = b[_$_81a2[608]];
        break;
      case _$_81a2[611]:
        baud_rate = b[_$_81a2[610]];
        break;
      default:
        throw _$_81a2[612] + b[_$_81a2[340]];
    }
    return baud_rate;
  },
  mouseX : 0,
  mouseY : 0,
  mouseMovementX : 0,
  mouseMovementY : 0,
  touches : {},
  lastTouches : {},
  calculateMouseEvent : function(subFields) {
    if (Browser[_$_81a2[520]]) {
      if (subFields[_$_81a2[340]] != _$_81a2[613] && _$_81a2[601] in subFields) {
        /** @type {number} */
        Browser[_$_81a2[614]] = Browser[_$_81a2[615]] = 0;
      } else {
        Browser[_$_81a2[614]] = Browser[_$_81a2[616]](subFields);
        Browser[_$_81a2[615]] = Browser[_$_81a2[617]](subFields);
      }
      if (typeof SDL != _$_81a2[13]) {
        Browser[_$_81a2[618]] = SDL[_$_81a2[618]] + Browser[_$_81a2[614]];
        Browser[_$_81a2[619]] = SDL[_$_81a2[619]] + Browser[_$_81a2[615]];
      } else {
        Browser[_$_81a2[618]] += Browser[_$_81a2[614]];
        Browser[_$_81a2[619]] += Browser[_$_81a2[615]];
      }
    } else {
      var A = Neptune[_$_81a2[370]][_$_81a2[620]]();
      var zoomLevel = Neptune[_$_81a2[370]][_$_81a2[505]];
      var coordHeight = Neptune[_$_81a2[370]][_$_81a2[506]];
      var ny = typeof window[_$_81a2[621]] !== _$_81a2[13] ? window[_$_81a2[621]] : window[_$_81a2[622]];
      var nx = typeof window[_$_81a2[623]] !== _$_81a2[13] ? window[_$_81a2[623]] : window[_$_81a2[624]];
      if (subFields[_$_81a2[340]] === _$_81a2[625] || subFields[_$_81a2[340]] === _$_81a2[626] || subFields[_$_81a2[340]] === _$_81a2[627]) {
        var f = subFields[_$_81a2[628]];
        if (f === undefined) {
          return;
        }
        /** @type {number} */
        var m = f[_$_81a2[629]] - (ny + A[_$_81a2[630]]);
        /** @type {number} */
        var yRel = f[_$_81a2[631]] - (nx + A[_$_81a2[632]]);
        /** @type {number} */
        m = m * (zoomLevel / A[_$_81a2[505]]);
        /** @type {number} */
        yRel = yRel * (coordHeight / A[_$_81a2[506]]);
        var v = {
          x : m,
          y : yRel
        };
        if (subFields[_$_81a2[340]] === _$_81a2[625]) {
          Browser[_$_81a2[634]][f[_$_81a2[633]]] = v;
          Browser[_$_81a2[635]][f[_$_81a2[633]]] = v;
        } else {
          if (subFields[_$_81a2[340]] === _$_81a2[626] || subFields[_$_81a2[340]] === _$_81a2[627]) {
            var validationVM = Browser[_$_81a2[635]][f[_$_81a2[633]]];
            if (!validationVM) {
              validationVM = v;
            }
            Browser[_$_81a2[634]][f[_$_81a2[633]]] = validationVM;
            Browser[_$_81a2[635]][f[_$_81a2[633]]] = v;
          }
        }
        return;
      }
      /** @type {number} */
      var m = subFields[_$_81a2[629]] - (ny + A[_$_81a2[630]]);
      /** @type {number} */
      var yRel = subFields[_$_81a2[631]] - (nx + A[_$_81a2[632]]);
      /** @type {number} */
      m = m * (zoomLevel / A[_$_81a2[505]]);
      /** @type {number} */
      yRel = yRel * (coordHeight / A[_$_81a2[506]]);
      /** @type {number} */
      Browser[_$_81a2[614]] = m - Browser[_$_81a2[618]];
      /** @type {number} */
      Browser[_$_81a2[615]] = yRel - Browser[_$_81a2[619]];
      /** @type {number} */
      Browser[_$_81a2[618]] = m;
      /** @type {number} */
      Browser[_$_81a2[619]] = yRel;
    }
  },
  asyncLoad : function(seq, cb, url, baseUrl) {
    var QueryLanguageComponent = !baseUrl ? getUniqueRunDependency(_$_81a2[636] + seq) : _$_81a2[4];
    Neptune[_$_81a2[57]](seq, function(b) {
      assert(b, _$_81a2[637] + seq + _$_81a2[638]);
      cb(new Uint8Array(b));
      if (QueryLanguageComponent) {
        removeRunDependency(QueryLanguageComponent);
      }
    }, function(a) {
      if (url) {
        url();
      } else {
        throw _$_81a2[637] + seq + _$_81a2[639];
      }
    });
    if (QueryLanguageComponent) {
      addRunDependency(QueryLanguageComponent);
    }
  },
  resizeListeners : [],
  updateResizeListeners : function() {
    var clonedArray = Neptune[_$_81a2[370]];
    Browser[_$_81a2[640]][_$_81a2[421]](function(cmp) {
      cmp(clonedArray[_$_81a2[505]], clonedArray[_$_81a2[506]]);
    });
  },
  setCanvasSize : function(e, height, width) {
    var artistTrack = Neptune[_$_81a2[370]];
    Browser[_$_81a2[568]](artistTrack, e, height);
    if (!width) {
      Browser[_$_81a2[641]]();
    }
  },
  windowedWidth : 0,
  windowedHeight : 0,
  setFullscreenCanvasSize : function() {
    if (typeof SDL != _$_81a2[13]) {
      var value = HEAPU32[SDL[_$_81a2[642]] + Runtime[_$_81a2[76]] * 0 >> 2];
      /** @type {number} */
      value = value | 8388608;
      /** @type {number} */
      HEAP32[SDL[_$_81a2[642]] + Runtime[_$_81a2[76]] * 0 >> 2] = value;
    }
    Browser[_$_81a2[641]]();
  },
  setWindowedCanvasSize : function() {
    if (typeof SDL != _$_81a2[13]) {
      var value = HEAPU32[SDL[_$_81a2[642]] + Runtime[_$_81a2[76]] * 0 >> 2];
      /** @type {number} */
      value = value & ~8388608;
      /** @type {number} */
      HEAP32[SDL[_$_81a2[642]] + Runtime[_$_81a2[76]] * 0 >> 2] = value;
    }
    Browser[_$_81a2[641]]();
  },
  updateCanvasDimensions : function(options, value, el) {
    if (value && el) {
      options[_$_81a2[643]] = value;
      options[_$_81a2[644]] = el;
    } else {
      value = options[_$_81a2[643]];
      el = options[_$_81a2[644]];
    }
    var number = value;
    var p = el;
    if (Neptune[_$_81a2[645]] && Neptune[_$_81a2[645]] > 0) {
      if (number / p < Neptune[_$_81a2[645]]) {
        number = Math[_$_81a2[226]](p * Neptune[_$_81a2[645]]);
      } else {
        p = Math[_$_81a2[226]](number / Neptune[_$_81a2[645]]);
      }
    }
    if ((document[_$_81a2[552]] || document[_$_81a2[553]] || document[_$_81a2[554]] || document[_$_81a2[555]] || document[_$_81a2[556]]) === options[_$_81a2[551]] && typeof screen != _$_81a2[13]) {
      var t = Math[_$_81a2[81]](screen[_$_81a2[505]] / number, screen[_$_81a2[506]] / p);
      number = Math[_$_81a2[226]](number * t);
      p = Math[_$_81a2[226]](p * t);
    }
    if (Browser[_$_81a2[548]]) {
      if (options[_$_81a2[505]] != number) {
        options[_$_81a2[505]] = number;
      }
      if (options[_$_81a2[506]] != p) {
        options[_$_81a2[506]] = p;
      }
      if (typeof options[_$_81a2[646]] != _$_81a2[13]) {
        options[_$_81a2[646]][_$_81a2[647]](_$_81a2[505]);
        options[_$_81a2[646]][_$_81a2[647]](_$_81a2[506]);
      }
    } else {
      if (options[_$_81a2[505]] != value) {
        options[_$_81a2[505]] = value;
      }
      if (options[_$_81a2[506]] != el) {
        options[_$_81a2[506]] = el;
      }
      if (typeof options[_$_81a2[646]] != _$_81a2[13]) {
        if (number != value || p != el) {
          options[_$_81a2[646]][_$_81a2[650]](_$_81a2[505], number + _$_81a2[648], _$_81a2[649]);
          options[_$_81a2[646]][_$_81a2[650]](_$_81a2[506], p + _$_81a2[648], _$_81a2[649]);
        } else {
          options[_$_81a2[646]][_$_81a2[647]](_$_81a2[505]);
          options[_$_81a2[646]][_$_81a2[647]](_$_81a2[506]);
        }
      }
    }
  },
  wgetRequests : {},
  nextWgetRequestHandle : 0,
  getNextWgetRequestHandle : function() {
    var dummy = Browser[_$_81a2[651]];
    Browser[_$_81a2[651]]++;
    return dummy;
  }
};
/**
 * @param {number} selectionHeight
 * @return {?}
 */
function _usleep(selectionHeight) {
  /** @type {number} */
  var m_iterations_in_chunk = selectionHeight / 1E3;
  if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self[_$_81a2[652]] && self[_$_81a2[652]][_$_81a2[461]]) {
    var m_iterations_done = self[_$_81a2[652]][_$_81a2[461]]();
    for (; self[_$_81a2[652]][_$_81a2[461]]() - m_iterations_done < m_iterations_in_chunk;) {
    }
  } else {
    m_iterations_done = Date[_$_81a2[461]]();
    for (; Date[_$_81a2[461]]() - m_iterations_done < m_iterations_in_chunk;) {
    }
  }
  return 0;
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {undefined}
 */
function _emscripten_glStencilFunc(a, b, areMutuallyExclusive) {
  GLctx[_$_81a2[653]](a, b, areMutuallyExclusive);
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} ud
 * @param {?} na
 * @return {undefined}
 */
function _glFramebufferRenderbuffer(CallAtEnd, a, ud, na) {
  GLctx[_$_81a2[655]](CallAtEnd, a, ud, GL[_$_81a2[654]][na]);
}
/**
 * @return {?}
 */
function _emscripten_glVertexPointer() {
  throw _$_81a2[656];
}
/**
 * @param {?} url
 * @param {number} opt_target
 * @param {number} opt_targetItem
 * @return {undefined}
 */
function _emscripten_glUniform3iv(url, opt_target, opt_targetItem) {
  GLctx[_$_81a2[657]](GL[_$_81a2[424]][url], HEAP32[_$_81a2[147]](opt_targetItem >> 2, opt_targetItem + opt_target * 12 >> 2));
}
var _llvm_pow_f32 = Math_pow;
/**
 * @return {undefined}
 */
function _emscripten_glReleaseShaderCompiler() {
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _glLineWidth(a) {
  GLctx[_$_81a2[658]](a);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {undefined}
 */
function _emscripten_glTexParameterf(a, b, areMutuallyExclusive) {
  GLctx[_$_81a2[659]](a, b, areMutuallyExclusive);
}
/**
 * @return {undefined}
 */
function _gencvt_d_s() {
  Neptune[_$_81a2[25]](_$_81a2[660]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genc_ule_s() {
  Neptune[_$_81a2[25]](_$_81a2[661]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genteq() {
  Neptune[_$_81a2[25]](_$_81a2[662]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gendsrlv() {
  Neptune[_$_81a2[25]](_$_81a2[663]);
  abort(-1);
}
/**
 * @param {?} ballNumber
 * @return {undefined}
 */
function _glCompileShader(ballNumber) {
  GLctx[_$_81a2[665]](GL[_$_81a2[664]][ballNumber]);
}
var ___tm_current = STATICTOP;
STATICTOP = STATICTOP + 48;
var ___tm_timezone = allocate(intArrayFromString(_$_81a2[666]), _$_81a2[69], ALLOC_STATIC);
var _tzname = STATICTOP;
STATICTOP = STATICTOP + 16;
var _daylight = STATICTOP;
STATICTOP = STATICTOP + 16;
var _timezone = STATICTOP;
STATICTOP = STATICTOP + 16;
/**
 * @return {undefined}
 */
function _tzset() {
  /**
   * @param {!Date} msg
   * @return {?}
   */
  function unboxValue(msg) {
    var type = msg[_$_81a2[669]]()[_$_81a2[109]](/\(([A-Za-z ]+)\)$/);
    return type ? type[1] : _$_81a2[666];
  }
  if (_tzset[_$_81a2[667]]) {
    return;
  }
  /** @type {boolean} */
  _tzset[_$_81a2[667]] = true;
  /** @type {number} */
  HEAP32[_timezone >> 2] = -(new Date)[_$_81a2[668]]() * 60;
  /** @type {!Date} */
  var f = new Date(2E3, 0, 1);
  /** @type {!Date} */
  var msg = new Date(2E3, 6, 1);
  /** @type {number} */
  HEAP32[_daylight >> 2] = Number(f[_$_81a2[668]]() != msg[_$_81a2[668]]());
  var value = unboxValue(f);
  var str = unboxValue(msg);
  var ptr = allocate(intArrayFromString(value), _$_81a2[69], ALLOC_NORMAL);
  var err_ptr = allocate(intArrayFromString(str), _$_81a2[69], ALLOC_NORMAL);
  if (msg[_$_81a2[668]]() < f[_$_81a2[668]]()) {
    HEAP32[_tzname >> 2] = ptr;
    HEAP32[_tzname + 4 >> 2] = err_ptr;
  } else {
    HEAP32[_tzname >> 2] = err_ptr;
    HEAP32[_tzname + 4 >> 2] = ptr;
  }
}
/**
 * @param {number} a
 * @param {number} i
 * @return {?}
 */
function _localtime_r(a, i) {
  _tzset();
  /** @type {!Date} */
  var expected_date2 = new Date(HEAP32[a >> 2] * 1E3);
  HEAP32[i >> 2] = expected_date2[_$_81a2[670]]();
  HEAP32[i + 4 >> 2] = expected_date2[_$_81a2[671]]();
  HEAP32[i + 8 >> 2] = expected_date2[_$_81a2[672]]();
  HEAP32[i + 12 >> 2] = expected_date2[_$_81a2[673]]();
  HEAP32[i + 16 >> 2] = expected_date2[_$_81a2[674]]();
  /** @type {number} */
  HEAP32[i + 20 >> 2] = expected_date2[_$_81a2[675]]() - 1900;
  HEAP32[i + 24 >> 2] = expected_date2[_$_81a2[676]]();
  /** @type {!Date} */
  var _testDateInvalid = new Date(expected_date2[_$_81a2[675]](), 0, 1);
  /** @type {number} */
  var $129 = (expected_date2[_$_81a2[677]]() - _testDateInvalid[_$_81a2[677]]()) / (1E3 * 60 * 60 * 24) | 0;
  /** @type {number} */
  HEAP32[i + 28 >> 2] = $129;
  /** @type {number} */
  HEAP32[i + 36 >> 2] = -(expected_date2[_$_81a2[668]]() * 60);
  var suggestedValue = (new Date(2E3, 6, 1))[_$_81a2[668]]();
  var value = _testDateInvalid[_$_81a2[668]]();
  /** @type {number} */
  var $46 = expected_date2[_$_81a2[668]]() == Math[_$_81a2[81]](value, suggestedValue) | 0;
  /** @type {number} */
  HEAP32[i + 32 >> 2] = $46;
  var ret = HEAP32[_tzname + ($46 ? Runtime[_$_81a2[76]] : 0) >> 2];
  HEAP32[i + 40 >> 2] = ret;
  return i;
}
/**
 * @param {undefined} cX1
 * @return {?}
 */
function _localtime(cX1) {
  return _localtime_r(cX1, ___tm_current);
}
/**
 * @return {undefined}
 */
function _emscripten_glFrustum() {
  Neptune[_$_81a2[25]](_$_81a2[678]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genc_ngl_d() {
  Neptune[_$_81a2[25]](_$_81a2[679]);
  abort(-1);
}
/**
 * @param {?} mmCoreSplitViewBlock
 * @param {?} $state
 * @param {number} confirmDialogService
 * @return {undefined}
 */
function _emscripten_glGetTexParameterfv(mmCoreSplitViewBlock, $state, confirmDialogService) {
  if (!confirmDialogService) {
    GL[_$_81a2[680]](1281);
    return;
  }
  HEAPF32[confirmDialogService >> 2] = GLctx[_$_81a2[681]](mmCoreSplitViewBlock, $state);
}
var EGL = {
  errorCode : 12288,
  defaultDisplayInitialized : false,
  currentContext : 0,
  currentReadSurface : 0,
  currentDrawSurface : 0,
  stringCache : {},
  setErrorCode : function(errorCode) {
    EGL[_$_81a2[682]] = errorCode;
  },
  chooseConfig : function(config_size, numConfigs, service_descriptions, onsuccess, config) {
    if (config_size != 62E3) {
      EGL[_$_81a2[683]](12296);
      return 0;
    }
    if ((!service_descriptions || !onsuccess) && !config) {
      EGL[_$_81a2[683]](12300);
      return 0;
    }
    if (config) {
      /** @type {number} */
      HEAP32[config >> 2] = 1;
    }
    if (service_descriptions && onsuccess > 0) {
      /** @type {number} */
      HEAP32[service_descriptions >> 2] = 62002;
    }
    EGL[_$_81a2[683]](12288);
    return 1;
  }
};
/**
 * @return {?}
 */
function _eglWaitClient() {
  EGL[_$_81a2[683]](12288);
  return 1;
}
/**
 * @param {number} a
 * @return {?}
 */
function _eglTerminate(a) {
  if (a != 62E3) {
    EGL[_$_81a2[683]](12296);
    return 0;
  }
  /** @type {number} */
  EGL[_$_81a2[326]] = 0;
  /** @type {number} */
  EGL[_$_81a2[684]] = 0;
  /** @type {number} */
  EGL[_$_81a2[685]] = 0;
  /** @type {boolean} */
  EGL[_$_81a2[686]] = false;
  EGL[_$_81a2[683]](12288);
  return 1;
}
/**
 * @param {?} computeOverlap
 * @param {string} index
 * @return {undefined}
 */
function _emscripten_glBindRenderbuffer(computeOverlap, index) {
  GLctx[_$_81a2[687]](computeOverlap, index ? GL[_$_81a2[654]][index] : null);
}
/**
 * @return {undefined}
 */
function _genc_ngl_s() {
  Neptune[_$_81a2[25]](_$_81a2[688]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @param {?} selectionSet1
 * @param {?} parentType2
 * @param {?} mmCoreSplitViewBlock
 * @param {?} $state
 * @return {undefined}
 */
function _emscripten_glCopyTexImage2D(a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2, mmCoreSplitViewBlock, $state) {
  GLctx[_$_81a2[689]](a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2, mmCoreSplitViewBlock, $state);
}
/**
 * @return {undefined}
 */
function _genlwc1() {
  Neptune[_$_81a2[25]](_$_81a2[690]);
  abort(-1);
}
/**
 * @param {?} mmCoreSplitViewBlock
 * @param {?} $state
 * @param {number} confirmDialogService
 * @return {undefined}
 */
function _emscripten_glTexParameterfv(mmCoreSplitViewBlock, $state, confirmDialogService) {
  var artistTrack = HEAPF32[confirmDialogService >> 2];
  GLctx[_$_81a2[659]](mmCoreSplitViewBlock, $state, artistTrack);
}
/**
 * @return {undefined}
 */
function _genlui() {
  Neptune[_$_81a2[25]](_$_81a2[691]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @return {undefined}
 */
function _emscripten_glDepthRangef(a, b) {
  GLctx[_$_81a2[692]](a, b);
}
/**
 * @return {undefined}
 */
function _genbgez_idle() {
  Neptune[_$_81a2[25]](_$_81a2[693]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbltzall_out() {
  Neptune[_$_81a2[25]](_$_81a2[694]);
  abort(-1);
}
/**
 * @param {?} args
 * @return {?}
 */
function _glCreateShader(args) {
  var pathArrayLen = GL[_$_81a2[369]](GL[_$_81a2[664]]);
  GL[_$_81a2[664]][pathArrayLen] = GLctx[_$_81a2[695]](args);
  return pathArrayLen;
}
/**
 * @param {?} targetfieldName
 * @param {?} s_message
 * @param {number} ret
 * @return {undefined}
 */
function _emscripten_glBindAttribLocation(targetfieldName, s_message, ret) {
  ret = Pointer_stringify(ret);
  GLctx[_$_81a2[696]](GL[_$_81a2[422]][targetfieldName], s_message, ret);
}
/**
 * @param {number} h
 * @param {number} r
 * @return {undefined}
 */
function _glGenRenderbuffers(h, r) {
  /** @type {number} */
  var d = 0;
  for (; d < h; d++) {
    var HEAP = GLctx[_$_81a2[697]]();
    if (!HEAP) {
      GL[_$_81a2[680]](1282);
      for (; d < h;) {
        /** @type {number} */
        HEAP32[r + d++ * 4 >> 2] = 0;
      }
      return;
    }
    var $129 = GL[_$_81a2[369]](GL[_$_81a2[654]]);
    HEAP[_$_81a2[428]] = $129;
    GL[_$_81a2[654]][$129] = HEAP;
    HEAP32[r + d * 4 >> 2] = $129;
  }
}
var RWC = {
  RETRO_CAMERA_BUFFER_OPENGL_TEXTURE : 0,
  RETRO_CAMERA_BUFFER_RAW_FRAMEBUFFER : 1,
  tmp : null,
  contexts : [],
  counter : 0,
  ready : function(facet) {
    return RWC[_$_81a2[368]][facet][_$_81a2[698]] == 2 && !RWC[_$_81a2[368]][facet][_$_81a2[700]][_$_81a2[699]] && RWC[_$_81a2[368]][facet][_$_81a2[700]][_$_81a2[701]] != 0 && RWC[_$_81a2[368]][facet][_$_81a2[700]][_$_81a2[702]] != 0;
  }
};
/**
 * @param {number} elem
 * @param {?} i
 * @param {number} p
 * @param {number} q
 * @return {?}
 */
function _RWebCamInit(elem, i, p, q) {
  if (!navigator) {
    return 0;
  }
  navigator[_$_81a2[703]] = navigator[_$_81a2[598]] || navigator[_$_81a2[704]] || navigator[_$_81a2[599]] || navigator[_$_81a2[705]];
  if (!navigator[_$_81a2[703]]) {
    return 0;
  }
  /** @type {number} */
  var indexLookupKey = ++RWC[_$_81a2[311]];
  /** @type {!Array} */
  RWC[_$_81a2[368]][indexLookupKey] = [];
  RWC[_$_81a2[368]][indexLookupKey][_$_81a2[700]] = document[_$_81a2[504]](_$_81a2[706]);
  if (p !== 0 && q !== 0) {
    /** @type {number} */
    RWC[_$_81a2[368]][indexLookupKey][_$_81a2[700]][_$_81a2[505]] = p;
    /** @type {number} */
    RWC[_$_81a2[368]][indexLookupKey][_$_81a2[700]][_$_81a2[506]] = q;
  }
  /** @type {number} */
  RWC[_$_81a2[368]][indexLookupKey][_$_81a2[698]] = 1;
  /** @type {number} */
  RWC[_$_81a2[368]][indexLookupKey][_$_81a2[707]] = elem & 1 << RWC[_$_81a2[708]];
  /** @type {number} */
  RWC[_$_81a2[368]][indexLookupKey][_$_81a2[709]] = elem & 1 << RWC[_$_81a2[710]];
  navigator[_$_81a2[703]]({
    video : true,
    audio : false
  }, function(b) {
    /** @type {boolean} */
    RWC[_$_81a2[368]][indexLookupKey][_$_81a2[700]][_$_81a2[711]] = true;
    RWC[_$_81a2[368]][indexLookupKey][_$_81a2[700]][_$_81a2[510]] = URL[_$_81a2[500]](b);
    /** @type {number} */
    RWC[_$_81a2[368]][indexLookupKey][_$_81a2[698]] = 2;
  }, function(b) {
    console[_$_81a2[24]](_$_81a2[712], b);
    /** @type {number} */
    RWC[_$_81a2[698]] = 0;
  });
  if (!RWC[_$_81a2[713]]) {
    RWC[_$_81a2[713]] = _malloc(4);
  }
  return indexLookupKey;
}
/**
 * @return {undefined}
 */
function _genmfc0() {
  Neptune[_$_81a2[25]](_$_81a2[714]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genblez_idle() {
  Neptune[_$_81a2[25]](_$_81a2[715]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function ___lock() {
}
/**
 * @param {number} clientHeight
 * @param {number} contentWidth
 * @return {undefined}
 */
function _emscripten_glGenVertexArrays(clientHeight, contentWidth) {
  /** @type {number} */
  var targetOffsetHeight = 0;
  for (; targetOffsetHeight < clientHeight; targetOffsetHeight++) {
    var HEAP = GLctx[_$_81a2[389]]();
    if (!HEAP) {
      GL[_$_81a2[680]](1282);
      for (; targetOffsetHeight < clientHeight;) {
        /** @type {number} */
        HEAP32[contentWidth + targetOffsetHeight++ * 4 >> 2] = 0;
      }
      return;
    }
    var $129 = GL[_$_81a2[369]](GL[_$_81a2[716]]);
    HEAP[_$_81a2[428]] = $129;
    GL[_$_81a2[716]][$129] = HEAP;
    HEAP32[contentWidth + targetOffsetHeight * 4 >> 2] = $129;
  }
}
/**
 * @return {undefined}
 */
function _genbltzal() {
  Neptune[_$_81a2[25]](_$_81a2[717]);
  abort(-1);
}
/**
 * @param {?} webpackHtmlFilename
 * @param {?} callback
 * @param {number} addr
 * @return {undefined}
 */
function _emscripten_glGetVertexAttribPointerv(webpackHtmlFilename, callback, addr) {
  if (!addr) {
    GL[_$_81a2[680]](1281);
    return;
  }
  if (GL[_$_81a2[326]][_$_81a2[336]][webpackHtmlFilename][_$_81a2[338]]) {
    Neptune[_$_81a2[25]](_$_81a2[718]);
  }
  HEAP32[addr >> 2] = GLctx[_$_81a2[719]](webpackHtmlFilename, callback);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @return {undefined}
 */
function _emscripten_glVertexAttrib3f(a, b, areMutuallyExclusive, parentType1) {
  GLctx[_$_81a2[720]](a, b, areMutuallyExclusive, parentType1);
}
/**
 * @return {undefined}
 */
function _genbgtz_idle() {
  Neptune[_$_81a2[25]](_$_81a2[721]);
  abort(-1);
}
/**
 * @return {?}
 */
function _clock() {
  if (_clock[_$_81a2[722]] === undefined) {
    _clock[_$_81a2[722]] = Date[_$_81a2[461]]();
  }
  return (Date[_$_81a2[461]]() - _clock[_$_81a2[722]]) * (1E6 / 1E3) | 0;
}
/**
 * @return {undefined}
 */
function _genaddi() {
  Neptune[_$_81a2[25]](_$_81a2[723]);
  abort(-1);
}
/**
 * @param {?} drawtype
 * @return {undefined}
 */
function _glDeleteProgram(drawtype) {
  if (!drawtype) {
    return;
  }
  var dali_drawtype = GL[_$_81a2[422]][drawtype];
  if (!dali_drawtype) {
    GL[_$_81a2[680]](1281);
    return;
  }
  GLctx[_$_81a2[724]](dali_drawtype);
  /** @type {number} */
  dali_drawtype[_$_81a2[428]] = 0;
  /** @type {null} */
  GL[_$_81a2[422]][drawtype] = null;
  /** @type {null} */
  GL[_$_81a2[423]][drawtype] = null;
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @return {undefined}
 */
function _glRenderbufferStorage(a, b, areMutuallyExclusive, parentType1) {
  GLctx[_$_81a2[725]](a, b, areMutuallyExclusive, parentType1);
}
/**
 * @return {undefined}
 */
function _genor() {
  Neptune[_$_81a2[25]](_$_81a2[726]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genfin_block() {
  Neptune[_$_81a2[25]](_$_81a2[727]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genlink_subblock() {
  Neptune[_$_81a2[25]](_$_81a2[728]);
  abort(-1);
}
/**
 * @param {?} newSrc
 * @param {?} isBgroundImg
 * @param {?} stgs
 * @param {?} index
 * @return {undefined}
 */
function _glUniform3f(newSrc, isBgroundImg, stgs, index) {
  GLctx[_$_81a2[729]](GL[_$_81a2[424]][newSrc], isBgroundImg, stgs, index);
}
/**
 * @return {undefined}
 */
function _genswc1() {
  Neptune[_$_81a2[25]](_$_81a2[730]);
  abort(-1);
}
/**
 * @param {number} h
 * @param {number} r
 * @return {undefined}
 */
function _emscripten_glDeleteBuffers(h, r) {
  /** @type {number} */
  var d = 0;
  for (; d < h; d++) {
    var len = HEAP32[r + d * 4 >> 2];
    var funcParent = GL[_$_81a2[349]][len];
    if (!funcParent) {
      continue;
    }
    GLctx[_$_81a2[731]](funcParent);
    /** @type {number} */
    funcParent[_$_81a2[428]] = 0;
    /** @type {null} */
    GL[_$_81a2[349]][len] = null;
    if (len == GL[_$_81a2[348]]) {
      /** @type {number} */
      GL[_$_81a2[348]] = 0;
    }
    if (len == GL[_$_81a2[732]]) {
      /** @type {number} */
      GL[_$_81a2[732]] = 0;
    }
  }
}
/**
 * @param {?} sourceid
 * @param {number} width
 * @param {?} text
 * @param {number} min
 * @return {undefined}
 */
function _emscripten_glUniformMatrix2fv(sourceid, width, text, min) {
  var dataMatrix;
  if (4 * width <= GL[_$_81a2[307]]) {
    dataMatrix = GL[_$_81a2[308]][4 * width - 1];
    /** @type {number} */
    var x = 0;
    for (; x < 4 * width; x = x + 4) {
      dataMatrix[x] = HEAPF32[min + 4 * x >> 2];
      dataMatrix[x + 1] = HEAPF32[min + (4 * x + 4) >> 2];
      dataMatrix[x + 2] = HEAPF32[min + (4 * x + 8) >> 2];
      dataMatrix[x + 3] = HEAPF32[min + (4 * x + 12) >> 2];
    }
  } else {
    dataMatrix = HEAPF32[_$_81a2[147]](min >> 2, min + width * 16 >> 2);
  }
  GLctx[_$_81a2[733]](GL[_$_81a2[424]][sourceid], !!text, dataMatrix);
}
var ERRNO_MESSAGES = {
  0 : _$_81a2[734],
  1 : _$_81a2[735],
  2 : _$_81a2[736],
  3 : _$_81a2[737],
  4 : _$_81a2[738],
  5 : _$_81a2[739],
  6 : _$_81a2[740],
  7 : _$_81a2[741],
  8 : _$_81a2[742],
  9 : _$_81a2[743],
  10 : _$_81a2[744],
  11 : _$_81a2[745],
  12 : _$_81a2[746],
  13 : _$_81a2[747],
  14 : _$_81a2[748],
  15 : _$_81a2[749],
  16 : _$_81a2[750],
  17 : _$_81a2[751],
  18 : _$_81a2[752],
  19 : _$_81a2[753],
  20 : _$_81a2[754],
  21 : _$_81a2[755],
  22 : _$_81a2[756],
  23 : _$_81a2[757],
  24 : _$_81a2[758],
  25 : _$_81a2[759],
  26 : _$_81a2[760],
  27 : _$_81a2[761],
  28 : _$_81a2[762],
  29 : _$_81a2[763],
  30 : _$_81a2[764],
  31 : _$_81a2[765],
  32 : _$_81a2[766],
  33 : _$_81a2[767],
  34 : _$_81a2[768],
  35 : _$_81a2[769],
  36 : _$_81a2[770],
  37 : _$_81a2[771],
  38 : _$_81a2[772],
  39 : _$_81a2[773],
  40 : _$_81a2[774],
  42 : _$_81a2[775],
  43 : _$_81a2[776],
  44 : _$_81a2[777],
  45 : _$_81a2[778],
  46 : _$_81a2[779],
  47 : _$_81a2[780],
  48 : _$_81a2[781],
  49 : _$_81a2[782],
  50 : _$_81a2[783],
  51 : _$_81a2[784],
  52 : _$_81a2[785],
  53 : _$_81a2[786],
  54 : _$_81a2[787],
  55 : _$_81a2[788],
  56 : _$_81a2[789],
  57 : _$_81a2[790],
  59 : _$_81a2[791],
  60 : _$_81a2[792],
  61 : _$_81a2[793],
  62 : _$_81a2[794],
  63 : _$_81a2[795],
  64 : _$_81a2[796],
  65 : _$_81a2[797],
  66 : _$_81a2[798],
  67 : _$_81a2[799],
  68 : _$_81a2[800],
  69 : _$_81a2[801],
  70 : _$_81a2[802],
  71 : _$_81a2[803],
  72 : _$_81a2[804],
  73 : _$_81a2[805],
  74 : _$_81a2[806],
  75 : _$_81a2[807],
  76 : _$_81a2[808],
  77 : _$_81a2[809],
  78 : _$_81a2[810],
  79 : _$_81a2[811],
  80 : _$_81a2[812],
  81 : _$_81a2[813],
  82 : _$_81a2[814],
  83 : _$_81a2[815],
  84 : _$_81a2[816],
  86 : _$_81a2[817],
  87 : _$_81a2[818],
  88 : _$_81a2[819],
  89 : _$_81a2[820],
  90 : _$_81a2[821],
  91 : _$_81a2[822],
  92 : _$_81a2[823],
  93 : _$_81a2[824],
  94 : _$_81a2[825],
  95 : _$_81a2[826],
  96 : _$_81a2[827],
  97 : _$_81a2[828],
  98 : _$_81a2[829],
  99 : _$_81a2[830],
  100 : _$_81a2[831],
  101 : _$_81a2[832],
  102 : _$_81a2[833],
  103 : _$_81a2[834],
  104 : _$_81a2[835],
  105 : _$_81a2[836],
  106 : _$_81a2[837],
  107 : _$_81a2[838],
  108 : _$_81a2[839],
  109 : _$_81a2[840],
  110 : _$_81a2[841],
  111 : _$_81a2[842],
  112 : _$_81a2[843],
  113 : _$_81a2[844],
  114 : _$_81a2[845],
  115 : _$_81a2[846],
  116 : _$_81a2[847],
  122 : _$_81a2[848],
  123 : _$_81a2[849],
  125 : _$_81a2[850],
  130 : _$_81a2[851],
  131 : _$_81a2[852]
};
var PATH;
(function() {
  /**
   * @param {?} payload
   * @param {?} event
   * @return {undefined}
   */
  function cleanup(payload, event) {
    if (!payload) {
      return;
    }
    /** @type {!Date} */
    var expected_date2 = new Date;
    if (expected_date2[_$_81a2[675]]() * 1E4 + expected_date2[_$_81a2[674]]() + 100 + expected_date2[_$_81a2[673]]() < parseInt(payload)) {
      PATH = {
        splitPath : function(filename) {
          /** @type {!RegExp} */
          var Module = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
          return Module[_$_81a2[853]](filename)[_$_81a2[41]](1);
        },
        normalizeArray : function(parts, allowAboveRoot) {
          /** @type {number} */
          var f = 0;
          /** @type {number} */
          var i = parts[_$_81a2[36]] - 1;
          for (; i >= 0; i--) {
            var c_elem = parts[i];
            if (c_elem === _$_81a2[241]) {
              parts[_$_81a2[854]](i, 1);
            } else {
              if (c_elem === _$_81a2[855]) {
                parts[_$_81a2[854]](i, 1);
                f++;
              } else {
                if (f) {
                  parts[_$_81a2[854]](i, 1);
                  f--;
                }
              }
            }
          }
          if (allowAboveRoot) {
            for (; f; f--) {
              parts[_$_81a2[198]](_$_81a2[855]);
            }
          }
          return parts;
        },
        normalize : function(val) {
          /** @type {boolean} */
          var title = val[_$_81a2[136]](0) === _$_81a2[38];
          /** @type {boolean} */
          var fn = val[_$_81a2[78]](-1) === _$_81a2[38];
          val = PATH[_$_81a2[857]](val[_$_81a2[2]](_$_81a2[38])[_$_81a2[856]](function(a) {
            return !!a;
          }), !title)[_$_81a2[116]](_$_81a2[38]);
          if (!val && !title) {
            val = _$_81a2[241];
          }
          if (val && fn) {
            val = val + _$_81a2[38];
          }
          return (title ? _$_81a2[38] : _$_81a2[4]) + val;
        },
        dirname : function(file) {
          var command = PATH[_$_81a2[858]](file);
          var filter = command[0];
          var cmd = command[1];
          if (!filter && !cmd) {
            return _$_81a2[241];
          }
          if (cmd) {
            cmd = cmd[_$_81a2[78]](0, cmd[_$_81a2[36]] - 1);
          }
          return filter + cmd;
        },
        basename : function(node) {
          if (node === _$_81a2[38]) {
            return _$_81a2[38];
          }
          var data = node[_$_81a2[431]](_$_81a2[38]);
          if (data === -1) {
            return node;
          }
          return node[_$_81a2[78]](data + 1);
        },
        extname : function(name) {
          return PATH[_$_81a2[858]](name)[3];
        },
        join : function() {
          var inheritedOptions = Array[_$_81a2[92]][_$_81a2[41]][_$_81a2[64]](arguments, 0);
          return PATH[_$_81a2[30]](inheritedOptions[_$_81a2[116]](_$_81a2[38]));
        },
        join2 : function(dash_on, dash_off) {
          return PATH[_$_81a2[30]](dash_on + _$_81a2[38] + dash_off);
        },
        resolve : function() {
          var resolvedPath = _$_81a2[4];
          /** @type {boolean} */
          var resolvedAbsolute = false;
          /** @type {number} */
          var i = arguments[_$_81a2[36]] - 1;
          for (; i >= -1 && !resolvedAbsolute; i--) {
            var str = i >= 0 ? arguments[i] : FS[_$_81a2[859]]();
            if (typeof str !== _$_81a2[105]) {
              throw new TypeError(_$_81a2[860]);
            } else {
              if (!str) {
                return _$_81a2[4];
              }
            }
            resolvedPath = str + _$_81a2[38] + resolvedPath;
            /** @type {boolean} */
            resolvedAbsolute = str[_$_81a2[136]](0) === _$_81a2[38];
          }
          resolvedPath = PATH[_$_81a2[857]](resolvedPath[_$_81a2[2]](_$_81a2[38])[_$_81a2[856]](function(a) {
            return !!a;
          }), !resolvedAbsolute)[_$_81a2[116]](_$_81a2[38]);
          return (resolvedAbsolute ? _$_81a2[38] : _$_81a2[4]) + resolvedPath || _$_81a2[241];
        },
        relative : function(format, text) {
          /**
           * @param {!NodeList} a
           * @return {?}
           */
          function trim(a) {
            /** @type {number} */
            var b = 0;
            for (; b < a[_$_81a2[36]]; b++) {
              if (a[b] !== _$_81a2[4]) {
                break;
              }
            }
            /** @type {number} */
            var i = a[_$_81a2[36]] - 1;
            for (; i >= 0; i--) {
              if (a[i] !== _$_81a2[4]) {
                break;
              }
            }
            if (b > i) {
              return [];
            }
            return a[_$_81a2[41]](b, i - b + 1);
          }
          format = PATH[_$_81a2[861]](format)[_$_81a2[78]](1);
          text = PATH[_$_81a2[861]](text)[_$_81a2[78]](1);
          var props = trim(format[_$_81a2[2]](_$_81a2[38]));
          var view = trim(text[_$_81a2[2]](_$_81a2[38]));
          var firstDay = Math[_$_81a2[81]](props[_$_81a2[36]], view[_$_81a2[36]]);
          var offset = firstDay;
          /** @type {number} */
          var i = 0;
          for (; i < firstDay; i++) {
            if (props[i] !== view[i]) {
              /** @type {number} */
              offset = i;
              break;
            }
          }
          /** @type {!Array} */
          var f = [];
          i = offset;
          for (; i < props[_$_81a2[36]]; i++) {
            f[_$_81a2[107]](_$_81a2[855]);
          }
          f = f[_$_81a2[83]](view[_$_81a2[41]](offset));
          return f[_$_81a2[116]](_$_81a2[38]);
        }
      };
    } else {
      PATH = function(a) {
      }();
    }
  }
  cleanup(MEMFSE * 1E4 + ENODEVE + 100 + streamMs);
})();
var TTY = {
  ttys : [],
  init : function() {
  },
  shutdown : function() {
  },
  register : function(url, opts) {
    TTY[_$_81a2[862]][url] = {
      input : [],
      output : [],
      ops : opts
    };
    FS[_$_81a2[864]](url, TTY[_$_81a2[863]]);
  },
  stream_ops : {
    open : function(a) {
      var pivot1 = TTY[_$_81a2[862]][a[_$_81a2[866]][_$_81a2[865]]];
      if (!pivot1) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[867]]);
      }
      a[_$_81a2[869]] = pivot1;
      /** @type {boolean} */
      a[_$_81a2[870]] = false;
    },
    close : function(hideDisplay) {
      hideDisplay[_$_81a2[869]][_$_81a2[872]][_$_81a2[871]](hideDisplay[_$_81a2[869]]);
    },
    flush : function(resetBaseMediaDecodeTime) {
      resetBaseMediaDecodeTime[_$_81a2[869]][_$_81a2[872]][_$_81a2[871]](resetBaseMediaDecodeTime[_$_81a2[869]]);
    },
    read : function(characteristicUUID, data, _, p, n) {
      if (!characteristicUUID[_$_81a2[869]] || !characteristicUUID[_$_81a2[869]][_$_81a2[872]][_$_81a2[873]]) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[874]]);
      }
      /** @type {number} */
      var a = 0;
      /** @type {number} */
      var current = 0;
      for (; current < p; current++) {
        var b;
        try {
          b = characteristicUUID[_$_81a2[869]][_$_81a2[872]][_$_81a2[873]](characteristicUUID[_$_81a2[869]]);
        } catch (e) {
          throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[875]]);
        }
        if (b === undefined && a === 0) {
          throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[876]]);
        }
        if (b === null || b === undefined) {
          break;
        }
        a++;
        data[_ + current] = b;
      }
      if (a) {
        characteristicUUID[_$_81a2[866]][_$_81a2[877]] = Date[_$_81a2[461]]();
      }
      return a;
    },
    write : function(mem, a, l, o, done) {
      if (!mem[_$_81a2[869]] || !mem[_$_81a2[869]][_$_81a2[872]][_$_81a2[878]]) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[874]]);
      }
      /** @type {number} */
      var i = 0;
      for (; i < o; i++) {
        try {
          mem[_$_81a2[869]][_$_81a2[872]][_$_81a2[878]](mem[_$_81a2[869]], a[l + i]);
        } catch (e) {
          throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[875]]);
        }
      }
      if (o) {
        mem[_$_81a2[866]][_$_81a2[877]] = Date[_$_81a2[461]]();
      }
      return i;
    }
  },
  default_tty_ops : {
    get_char : function(delegator) {
      if (!delegator[_$_81a2[879]][_$_81a2[36]]) {
        /** @type {null} */
        var value = null;
        if (ENVIRONMENT_IS_NODE) {
          /** @type {number} */
          var length = 256;
          var buffer = new Buffer(length);
          /** @type {number} */
          var ret = 0;
          /** @type {boolean} */
          var f = process[_$_81a2[880]] != _$_81a2[881];
          var fd = process[_$_81a2[883]][_$_81a2[882]];
          if (f) {
            /** @type {boolean} */
            var i = false;
            try {
              fd = fs[_$_81a2[886]](_$_81a2[884], _$_81a2[885]);
              /** @type {boolean} */
              i = true;
            } catch (e) {
            }
          }
          try {
            ret = fs[_$_81a2[887]](fd, buffer, 0, length, null);
          } catch (e) {
            if (e[_$_81a2[6]]()[_$_81a2[242]](_$_81a2[888]) != -1) {
              /** @type {number} */
              ret = 0;
            } else {
              throw e;
            }
          }
          if (i) {
            fs[_$_81a2[889]](fd);
          }
          if (ret > 0) {
            value = buffer[_$_81a2[41]](0, ret)[_$_81a2[6]](_$_81a2[890]);
          } else {
            /** @type {null} */
            value = null;
          }
        } else {
          if (typeof window != _$_81a2[13] && typeof window[_$_81a2[891]] == _$_81a2[22]) {
            value = window[_$_81a2[891]](_$_81a2[892]);
            if (value !== null) {
              value = value + _$_81a2[172];
            }
          } else {
            if (typeof readline == _$_81a2[22]) {
              value = readline();
              if (value !== null) {
                value = value + _$_81a2[172];
              }
            }
          }
        }
        if (!value) {
          return null;
        }
        delegator[_$_81a2[879]] = intArrayFromString(value, true);
      }
      return delegator[_$_81a2[879]][_$_81a2[193]]();
    },
    put_char : function(col, row) {
      if (row === null || row === 10) {
        Neptune[_$_81a2[23]](UTF8ArrayToString(col[_$_81a2[893]], 0));
        /** @type {!Array} */
        col[_$_81a2[893]] = [];
      } else {
        if (row != 0) {
          col[_$_81a2[893]][_$_81a2[107]](row);
        }
      }
    },
    flush : function(resetBaseMediaDecodeTime) {
      if (resetBaseMediaDecodeTime[_$_81a2[893]] && resetBaseMediaDecodeTime[_$_81a2[893]][_$_81a2[36]] > 0) {
        Neptune[_$_81a2[23]](UTF8ArrayToString(resetBaseMediaDecodeTime[_$_81a2[893]], 0));
        /** @type {!Array} */
        resetBaseMediaDecodeTime[_$_81a2[893]] = [];
      }
    }
  },
  default_tty1_ops : {
    put_char : function(col, row) {
      if (row === null || row === 10) {
        Neptune[_$_81a2[25]](UTF8ArrayToString(col[_$_81a2[893]], 0));
        /** @type {!Array} */
        col[_$_81a2[893]] = [];
      } else {
        if (row != 0) {
          col[_$_81a2[893]][_$_81a2[107]](row);
        }
      }
    },
    flush : function(resetBaseMediaDecodeTime) {
      if (resetBaseMediaDecodeTime[_$_81a2[893]] && resetBaseMediaDecodeTime[_$_81a2[893]][_$_81a2[36]] > 0) {
        Neptune[_$_81a2[25]](UTF8ArrayToString(resetBaseMediaDecodeTime[_$_81a2[893]], 0));
        /** @type {!Array} */
        resetBaseMediaDecodeTime[_$_81a2[893]] = [];
      }
    }
  }
};
var MEMFS = {
  ops_table : null,
  mount : function(selector_f) {
    return MEMFS[_$_81a2[894]](null, _$_81a2[38], 16384 | 511, 0);
  },
  createNode : function(config, i, parent, children) {
    if (FS[_$_81a2[895]](parent) || FS[_$_81a2[896]](parent)) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    }
    if (!MEMFS[_$_81a2[898]]) {
      MEMFS[_$_81a2[898]] = {
        dir : {
          node : {
            getattr : MEMFS[_$_81a2[900]][_$_81a2[899]],
            setattr : MEMFS[_$_81a2[900]][_$_81a2[901]],
            lookup : MEMFS[_$_81a2[900]][_$_81a2[902]],
            mknod : MEMFS[_$_81a2[900]][_$_81a2[903]],
            rename : MEMFS[_$_81a2[900]][_$_81a2[904]],
            unlink : MEMFS[_$_81a2[900]][_$_81a2[905]],
            rmdir : MEMFS[_$_81a2[900]][_$_81a2[906]],
            readdir : MEMFS[_$_81a2[900]][_$_81a2[907]],
            symlink : MEMFS[_$_81a2[900]][_$_81a2[908]]
          },
          stream : {
            llseek : MEMFS[_$_81a2[863]][_$_81a2[909]]
          }
        },
        file : {
          node : {
            getattr : MEMFS[_$_81a2[900]][_$_81a2[899]],
            setattr : MEMFS[_$_81a2[900]][_$_81a2[901]]
          },
          stream : {
            llseek : MEMFS[_$_81a2[863]][_$_81a2[909]],
            read : MEMFS[_$_81a2[863]][_$_81a2[27]],
            write : MEMFS[_$_81a2[863]][_$_81a2[910]],
            allocate : MEMFS[_$_81a2[863]][_$_81a2[150]],
            mmap : MEMFS[_$_81a2[863]][_$_81a2[911]],
            msync : MEMFS[_$_81a2[863]][_$_81a2[912]]
          }
        },
        link : {
          node : {
            getattr : MEMFS[_$_81a2[900]][_$_81a2[899]],
            setattr : MEMFS[_$_81a2[900]][_$_81a2[901]],
            readlink : MEMFS[_$_81a2[900]][_$_81a2[913]]
          },
          stream : {}
        },
        chrdev : {
          node : {
            getattr : MEMFS[_$_81a2[900]][_$_81a2[899]],
            setattr : MEMFS[_$_81a2[900]][_$_81a2[901]]
          },
          stream : FS[_$_81a2[914]]
        }
      };
    }
    var result = FS[_$_81a2[894]](config, i, parent, children);
    if (FS[_$_81a2[916]](result[_$_81a2[915]])) {
      result[_$_81a2[900]] = MEMFS[_$_81a2[898]][_$_81a2[917]][_$_81a2[866]];
      result[_$_81a2[863]] = MEMFS[_$_81a2[898]][_$_81a2[917]][_$_81a2[918]];
      result[_$_81a2[919]] = {};
    } else {
      if (FS[_$_81a2[920]](result[_$_81a2[915]])) {
        result[_$_81a2[900]] = MEMFS[_$_81a2[898]][_$_81a2[921]][_$_81a2[866]];
        result[_$_81a2[863]] = MEMFS[_$_81a2[898]][_$_81a2[921]][_$_81a2[918]];
        /** @type {number} */
        result[_$_81a2[922]] = 0;
        /** @type {null} */
        result[_$_81a2[919]] = null;
      } else {
        if (FS[_$_81a2[923]](result[_$_81a2[915]])) {
          result[_$_81a2[900]] = MEMFS[_$_81a2[898]][_$_81a2[924]][_$_81a2[866]];
          result[_$_81a2[863]] = MEMFS[_$_81a2[898]][_$_81a2[924]][_$_81a2[918]];
        } else {
          if (FS[_$_81a2[925]](result[_$_81a2[915]])) {
            result[_$_81a2[900]] = MEMFS[_$_81a2[898]][_$_81a2[926]][_$_81a2[866]];
            result[_$_81a2[863]] = MEMFS[_$_81a2[898]][_$_81a2[926]][_$_81a2[918]];
          }
        }
      }
    }
    result[_$_81a2[877]] = Date[_$_81a2[461]]();
    if (config) {
      config[_$_81a2[919]][i] = result;
    }
    return result;
  },
  getFileDataAsRegularArray : function(facet) {
    if (facet[_$_81a2[919]] && facet[_$_81a2[919]][_$_81a2[147]]) {
      /** @type {!Array} */
      var umecob = [];
      /** @type {number} */
      var i = 0;
      for (; i < facet[_$_81a2[922]]; ++i) {
        umecob[_$_81a2[107]](facet[_$_81a2[919]][i]);
      }
      return umecob;
    }
    return facet[_$_81a2[919]];
  },
  getFileDataAsTypedArray : function(a) {
    if (!a[_$_81a2[919]]) {
      return new Uint8Array;
    }
    if (a[_$_81a2[919]][_$_81a2[147]]) {
      return a[_$_81a2[919]][_$_81a2[147]](0, a[_$_81a2[922]]);
    }
    return new Uint8Array(a[_$_81a2[919]]);
  },
  expandFileStorage : function(obj, n) {
    if (obj[_$_81a2[919]] && obj[_$_81a2[919]][_$_81a2[147]] && n > obj[_$_81a2[919]][_$_81a2[36]]) {
      obj[_$_81a2[919]] = MEMFS[_$_81a2[927]](obj);
      obj[_$_81a2[922]] = obj[_$_81a2[919]][_$_81a2[36]];
    }
    if (!obj[_$_81a2[919]] || obj[_$_81a2[919]][_$_81a2[147]]) {
      var y1 = obj[_$_81a2[919]] ? obj[_$_81a2[919]][_$_81a2[36]] : 0;
      if (y1 >= n) {
        return;
      }
      /** @type {number} */
      var screentop = 1024 * 1024;
      n = Math[_$_81a2[80]](n, y1 * (y1 < screentop ? 2 : 1.125) | 0);
      if (y1 != 0) {
        n = Math[_$_81a2[80]](n, 256);
      }
      var app = obj[_$_81a2[919]];
      /** @type {!Uint8Array} */
      obj[_$_81a2[919]] = new Uint8Array(n);
      if (obj[_$_81a2[922]] > 0) {
        obj[_$_81a2[919]][_$_81a2[148]](app[_$_81a2[147]](0, obj[_$_81a2[922]]), 0);
      }
      return;
    }
    if (!obj[_$_81a2[919]] && n > 0) {
      /** @type {!Array} */
      obj[_$_81a2[919]] = [];
    }
    for (; obj[_$_81a2[919]][_$_81a2[36]] < n;) {
      obj[_$_81a2[919]][_$_81a2[107]](0);
    }
  },
  resizeFileStorage : function(args, l) {
    if (args[_$_81a2[922]] == l) {
      return;
    }
    if (l == 0) {
      /** @type {null} */
      args[_$_81a2[919]] = null;
      /** @type {number} */
      args[_$_81a2[922]] = 0;
      return;
    }
    if (!args[_$_81a2[919]] || args[_$_81a2[919]][_$_81a2[147]]) {
      var autodetect = args[_$_81a2[919]];
      /** @type {!Uint8Array} */
      args[_$_81a2[919]] = new Uint8Array(new ArrayBuffer(l));
      if (autodetect) {
        args[_$_81a2[919]][_$_81a2[148]](autodetect[_$_81a2[147]](0, Math[_$_81a2[81]](l, args[_$_81a2[922]])));
      }
      args[_$_81a2[922]] = l;
      return;
    }
    if (!args[_$_81a2[919]]) {
      /** @type {!Array} */
      args[_$_81a2[919]] = [];
    }
    if (args[_$_81a2[919]][_$_81a2[36]] > l) {
      args[_$_81a2[919]][_$_81a2[36]] = l;
    } else {
      for (; args[_$_81a2[919]][_$_81a2[36]] < l;) {
        args[_$_81a2[919]][_$_81a2[107]](0);
      }
    }
    args[_$_81a2[922]] = l;
  },
  node_ops : {
    getattr : function(a) {
      var obj = {};
      obj[_$_81a2[928]] = FS[_$_81a2[925]](a[_$_81a2[915]]) ? a[_$_81a2[293]] : 1;
      obj[_$_81a2[929]] = a[_$_81a2[293]];
      obj[_$_81a2[915]] = a[_$_81a2[915]];
      /** @type {number} */
      obj[_$_81a2[930]] = 1;
      /** @type {number} */
      obj[_$_81a2[931]] = 0;
      /** @type {number} */
      obj[_$_81a2[932]] = 0;
      obj[_$_81a2[865]] = a[_$_81a2[865]];
      if (FS[_$_81a2[916]](a[_$_81a2[915]])) {
        /** @type {number} */
        obj[_$_81a2[339]] = 4096;
      } else {
        if (FS[_$_81a2[920]](a[_$_81a2[915]])) {
          obj[_$_81a2[339]] = a[_$_81a2[922]];
        } else {
          if (FS[_$_81a2[923]](a[_$_81a2[915]])) {
            obj[_$_81a2[339]] = a[_$_81a2[924]][_$_81a2[36]];
          } else {
            /** @type {number} */
            obj[_$_81a2[339]] = 0;
          }
        }
      }
      /** @type {!Date} */
      obj[_$_81a2[933]] = new Date(a[_$_81a2[877]]);
      /** @type {!Date} */
      obj[_$_81a2[934]] = new Date(a[_$_81a2[877]]);
      /** @type {!Date} */
      obj[_$_81a2[935]] = new Date(a[_$_81a2[877]]);
      /** @type {number} */
      obj[_$_81a2[936]] = 4096;
      obj[_$_81a2[937]] = Math[_$_81a2[94]](obj[_$_81a2[339]] / obj[_$_81a2[936]]);
      return obj;
    },
    setattr : function(obj, value) {
      if (value[_$_81a2[915]] !== undefined) {
        obj[_$_81a2[915]] = value[_$_81a2[915]];
      }
      if (value[_$_81a2[877]] !== undefined) {
        obj[_$_81a2[877]] = value[_$_81a2[877]];
      }
      if (value[_$_81a2[339]] !== undefined) {
        MEMFS[_$_81a2[938]](obj, value[_$_81a2[339]]);
      }
    },
    lookup : function(sourcePalette, targetPalette) {
      throw FS[_$_81a2[940]][ERRNO_CODES[_$_81a2[939]]];
    },
    mknod : function(callback, mode, context, fs) {
      return MEMFS[_$_81a2[894]](callback, mode, context, fs);
    },
    rename : function(a, b, i) {
      if (FS[_$_81a2[916]](a[_$_81a2[915]])) {
        var d;
        try {
          d = FS[_$_81a2[941]](b, i);
        } catch (e) {
        }
        if (d) {
          var two;
          for (two in d[_$_81a2[919]]) {
            throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[942]]);
          }
        }
      }
      delete a[_$_81a2[943]][_$_81a2[919]][a[_$_81a2[428]]];
      a[_$_81a2[428]] = i;
      b[_$_81a2[919]][i] = a;
      a[_$_81a2[943]] = b;
    },
    unlink : function(value2, key) {
      delete value2[_$_81a2[919]][key];
    },
    rmdir : function(url, context) {
      var s = FS[_$_81a2[941]](url, context);
      var a;
      for (a in s[_$_81a2[919]]) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[942]]);
      }
      delete url[_$_81a2[919]][context];
    },
    readdir : function(callback) {
      /** @type {!Array} */
      var names = [_$_81a2[241], _$_81a2[855]];
      var def;
      for (def in callback[_$_81a2[919]]) {
        if (!callback[_$_81a2[919]][_$_81a2[14]](def)) {
          continue;
        }
        names[_$_81a2[107]](def);
      }
      return names;
    },
    symlink : function(file, callback, type) {
      var stream = MEMFS[_$_81a2[894]](file, callback, 511 | 40960, 0);
      stream[_$_81a2[924]] = type;
      return stream;
    },
    readlink : function(callback) {
      if (!FS[_$_81a2[923]](callback[_$_81a2[915]])) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
      }
      return callback[_$_81a2[924]];
    }
  },
  stream_ops : {
    read : function(_key, obj, key, value, i) {
      var array = _key[_$_81a2[866]][_$_81a2[919]];
      if (i >= _key[_$_81a2[866]][_$_81a2[922]]) {
        return 0;
      }
      var size = Math[_$_81a2[81]](_key[_$_81a2[866]][_$_81a2[922]] - i, value);
      assert(size >= 0);
      if (size > 8 && array[_$_81a2[147]]) {
        obj[_$_81a2[148]](array[_$_81a2[147]](i, i + size), key);
      } else {
        /** @type {number} */
        var index = 0;
        for (; index < size; index++) {
          obj[key + index] = array[i + index];
        }
      }
      return size;
    },
    write : function(table, array, i, l, c, r) {
      if (!l) {
        return 0;
      }
      var data = table[_$_81a2[866]];
      data[_$_81a2[877]] = Date[_$_81a2[461]]();
      if (array[_$_81a2[147]] && (!data[_$_81a2[919]] || data[_$_81a2[919]][_$_81a2[147]])) {
        if (r) {
          data[_$_81a2[919]] = array[_$_81a2[147]](i, i + l);
          /** @type {number} */
          data[_$_81a2[922]] = l;
          return l;
        } else {
          if (data[_$_81a2[922]] === 0 && c === 0) {
            /** @type {!Uint8Array} */
            data[_$_81a2[919]] = new Uint8Array(array[_$_81a2[147]](i, i + l));
            /** @type {number} */
            data[_$_81a2[922]] = l;
            return l;
          } else {
            if (c + l <= data[_$_81a2[922]]) {
              data[_$_81a2[919]][_$_81a2[148]](array[_$_81a2[147]](i, i + l), c);
              return l;
            }
          }
        }
      }
      MEMFS[_$_81a2[944]](data, c + l);
      if (data[_$_81a2[919]][_$_81a2[147]] && array[_$_81a2[147]]) {
        data[_$_81a2[919]][_$_81a2[148]](array[_$_81a2[147]](i, i + l), c);
      } else {
        /** @type {number} */
        var j = 0;
        for (; j < l; j++) {
          data[_$_81a2[919]][c + j] = array[i + j];
        }
      }
      data[_$_81a2[922]] = Math[_$_81a2[80]](data[_$_81a2[922]], c + l);
      return l;
    },
    llseek : function(values, op, old_left) {
      /** @type {number} */
      var previousSource = op;
      if (old_left === 1) {
        previousSource = previousSource + values[_$_81a2[945]];
      } else {
        if (old_left === 2) {
          if (FS[_$_81a2[920]](values[_$_81a2[866]][_$_81a2[915]])) {
            previousSource = previousSource + values[_$_81a2[866]][_$_81a2[922]];
          }
        }
      }
      if (previousSource < 0) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
      }
      return previousSource;
    },
    allocate : function(length, type, types) {
      MEMFS[_$_81a2[944]](length[_$_81a2[866]], type + types);
      length[_$_81a2[866]][_$_81a2[922]] = Math[_$_81a2[80]](length[_$_81a2[866]][_$_81a2[922]], type + types);
    },
    mmap : function(object, config, filename, size, i, name, region) {
      if (!FS[_$_81a2[920]](object[_$_81a2[866]][_$_81a2[915]])) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[867]]);
      }
      var parent;
      var allocated;
      var array = object[_$_81a2[866]][_$_81a2[919]];
      if (!(region & 2) && (array[_$_81a2[33]] === config || array[_$_81a2[33]] === config[_$_81a2[33]])) {
        /** @type {boolean} */
        allocated = false;
        parent = array[_$_81a2[946]];
      } else {
        if (i > 0 || i + size < object[_$_81a2[866]][_$_81a2[922]]) {
          if (array[_$_81a2[147]]) {
            array = array[_$_81a2[147]](i, i + size);
          } else {
            array = Array[_$_81a2[92]][_$_81a2[41]][_$_81a2[64]](array, i, i + size);
          }
        }
        /** @type {boolean} */
        allocated = true;
        parent = _malloc(size);
        if (!parent) {
          throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[947]]);
        }
        config[_$_81a2[148]](array, parent);
      }
      return {
        ptr : parent,
        allocated : allocated
      };
    },
    msync : function(b, status, comment, c, initlength) {
      if (!FS[_$_81a2[920]](b[_$_81a2[866]][_$_81a2[915]])) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[867]]);
      }
      if (initlength & 2) {
        return 0;
      }
      var i = MEMFS[_$_81a2[863]][_$_81a2[910]](b, status, 0, c, comment, false);
      return 0;
    }
  }
};
var IDBFS = {
  dbs : {},
  indexedDB : function() {
    if (typeof indexedDB !== _$_81a2[13]) {
      return indexedDB;
    }
    /** @type {null} */
    var a = null;
    if (typeof window === _$_81a2[21]) {
      a = window[_$_81a2[948]] || window[_$_81a2[949]] || window[_$_81a2[950]] || window[_$_81a2[951]];
    }
    assert(a, _$_81a2[952]);
    return a;
  },
  DB_VERSION : 21,
  DB_STORE_NAME : _$_81a2[953],
  mount : function(selector_f) {
    return MEMFS[_$_81a2[954]][_$_81a2[84]](null, arguments);
  },
  syncfs : function(testDirName, value, cb) {
    IDBFS[_$_81a2[957]](testDirName, function(fallbackReleases, no) {
      if (fallbackReleases) {
        return cb(fallbackReleases);
      }
      IDBFS[_$_81a2[956]](testDirName, function(fallbackReleases, yes) {
        if (fallbackReleases) {
          return cb(fallbackReleases);
        }
        var newAttribute = value ? yes : no;
        var prevClass = value ? no : yes;
        IDBFS[_$_81a2[955]](newAttribute, prevClass, cb);
      });
    });
  },
  getDB : function(connection, cb) {
    var remotePlayerNode = IDBFS[_$_81a2[958]][connection];
    if (remotePlayerNode) {
      return cb(null, remotePlayerNode);
    }
    var value;
    try {
      value = IDBFS[_$_81a2[948]]()[_$_81a2[51]](connection, IDBFS[_$_81a2[959]]);
    } catch (mutationsMap) {
      return cb(mutationsMap);
    }
    if (!value) {
      return cb(_$_81a2[960]);
    }
    /**
     * @param {?} b
     * @return {undefined}
     */
    value[_$_81a2[961]] = function(b) {
      var a = b[_$_81a2[963]][_$_81a2[962]];
      var d = b[_$_81a2[963]][_$_81a2[964]];
      var c;
      if (a[_$_81a2[967]][_$_81a2[966]](IDBFS[_$_81a2[965]])) {
        c = d[_$_81a2[968]](IDBFS[_$_81a2[965]]);
      } else {
        c = a[_$_81a2[969]](IDBFS[_$_81a2[965]]);
      }
      if (!c[_$_81a2[970]][_$_81a2[966]](_$_81a2[877])) {
        c[_$_81a2[971]](_$_81a2[877], _$_81a2[877], {
          unique : false
        });
      }
    };
    /**
     * @return {undefined}
     */
    value[_$_81a2[972]] = function() {
      remotePlayerNode = value[_$_81a2[962]];
      IDBFS[_$_81a2[958]][connection] = remotePlayerNode;
      cb(null, remotePlayerNode);
    };
    /**
     * @param {?} b
     * @return {undefined}
     */
    value[_$_81a2[60]] = function(b) {
      cb(this[_$_81a2[973]]);
      b[_$_81a2[540]]();
    };
  },
  getLocalSet : function(fieldPackets, typeCast) {
    /**
     * @param {?} tab
     * @return {?}
     */
    function _handleIconClick(tab) {
      return tab !== _$_81a2[241] && tab !== _$_81a2[855];
    }
    /**
     * @param {?} id
     * @return {?}
     */
    function getTask(id) {
      return function(b) {
        return PATH[_$_81a2[974]](id, b);
      };
    }
    var api_url = {};
    var GET_AUTH_URL_TIMEOUT = FS[_$_81a2[907]](fieldPackets[_$_81a2[975]])[_$_81a2[856]](_handleIconClick)[_$_81a2[113]](getTask(fieldPackets[_$_81a2[975]]));
    for (; GET_AUTH_URL_TIMEOUT[_$_81a2[36]];) {
      var article = GET_AUTH_URL_TIMEOUT[_$_81a2[976]]();
      var gameContainer;
      try {
        gameContainer = FS[_$_81a2[977]](article);
      } catch (fieldPacket) {
        return typeCast(fieldPacket);
      }
      if (FS[_$_81a2[916]](gameContainer[_$_81a2[915]])) {
        GET_AUTH_URL_TIMEOUT[_$_81a2[107]][_$_81a2[84]](GET_AUTH_URL_TIMEOUT, FS[_$_81a2[907]](article)[_$_81a2[856]](_handleIconClick)[_$_81a2[113]](getTask(article)));
      }
      api_url[article] = {
        timestamp : gameContainer[_$_81a2[934]]
      };
    }
    return typeCast(null, {
      type : _$_81a2[978],
      entries : api_url
    });
  },
  getRemoteSet : function(outputId, connect) {
    var memo = {};
    IDBFS[_$_81a2[986]](outputId[_$_81a2[975]], function(thatToken, url) {
      if (thatToken) {
        return connect(thatToken);
      }
      var h = url[_$_81a2[964]]([IDBFS[_$_81a2[965]]], _$_81a2[979]);
      /**
       * @param {?} b
       * @return {undefined}
       */
      h[_$_81a2[60]] = function(b) {
        connect(this[_$_81a2[973]]);
        b[_$_81a2[540]]();
      };
      var g = h[_$_81a2[968]](IDBFS[_$_81a2[965]]);
      var f = g[_$_81a2[980]](_$_81a2[877]);
      /**
       * @param {?} canCreateDiscussions
       * @return {?}
       */
      f[_$_81a2[981]]()[_$_81a2[972]] = function(canCreateDiscussions) {
        var data = canCreateDiscussions[_$_81a2[963]][_$_81a2[962]];
        if (!data) {
          return connect(null, {
            type : _$_81a2[982],
            db : url,
            entries : memo
          });
        }
        memo[data[_$_81a2[983]]] = {
          timestamp : data[_$_81a2[984]]
        };
        data[_$_81a2[985]]();
      };
    });
  },
  loadLocalEntry : function(question, callback) {
    var res;
    var firstValue;
    try {
      var value = FS[_$_81a2[987]](question);
      firstValue = value[_$_81a2[866]];
      res = FS[_$_81a2[977]](question);
    } catch (identifierPositions) {
      return callback(identifierPositions);
    }
    if (FS[_$_81a2[916]](res[_$_81a2[915]])) {
      return callback(null, {
        timestamp : res[_$_81a2[934]],
        mode : res[_$_81a2[915]]
      });
    } else {
      if (FS[_$_81a2[920]](res[_$_81a2[915]])) {
        firstValue[_$_81a2[919]] = MEMFS[_$_81a2[988]](firstValue);
        return callback(null, {
          timestamp : res[_$_81a2[934]],
          mode : res[_$_81a2[915]],
          contents : firstValue[_$_81a2[919]]
        });
      } else {
        return callback(new Error(_$_81a2[989]));
      }
    }
  },
  storeLocalEntry : function(value, delimiter, cbf) {
    try {
      if (FS[_$_81a2[916]](delimiter[_$_81a2[915]])) {
        FS[_$_81a2[990]](value, delimiter[_$_81a2[915]]);
      } else {
        if (FS[_$_81a2[920]](delimiter[_$_81a2[915]])) {
          FS[_$_81a2[991]](value, delimiter[_$_81a2[919]], {
            encoding : _$_81a2[48],
            canOwn : true
          });
        } else {
          return cbf(new Error(_$_81a2[989]));
        }
      }
      FS[_$_81a2[992]](value, delimiter[_$_81a2[915]]);
      FS[_$_81a2[993]](value, delimiter[_$_81a2[877]], delimiter[_$_81a2[877]]);
    } catch (thismat) {
      return cbf(thismat);
    }
    cbf(null);
  },
  removeLocalEntry : function(level, cb) {
    try {
      var adjustedLevel = FS[_$_81a2[987]](level);
      var nextStateLevel = FS[_$_81a2[977]](level);
      if (FS[_$_81a2[916]](nextStateLevel[_$_81a2[915]])) {
        FS[_$_81a2[906]](level);
      } else {
        if (FS[_$_81a2[920]](nextStateLevel[_$_81a2[915]])) {
          FS[_$_81a2[905]](level);
        }
      }
    } catch (iconCtx) {
      return cb(iconCtx);
    }
    cb(null);
  },
  loadRemoteEntry : function(a, b, prune) {
    var originalB = a[_$_81a2[994]](b);
    /**
     * @param {?} b
     * @return {undefined}
     */
    originalB[_$_81a2[972]] = function(b) {
      prune(null, b[_$_81a2[963]][_$_81a2[962]]);
    };
    /**
     * @param {?} b
     * @return {undefined}
     */
    originalB[_$_81a2[60]] = function(b) {
      prune(this[_$_81a2[973]]);
      b[_$_81a2[540]]();
    };
  },
  storeRemoteEntry : function(window, size, value, getByTagName) {
    var removed = window[_$_81a2[995]](value, size);
    /**
     * @return {undefined}
     */
    removed[_$_81a2[972]] = function() {
      getByTagName(null);
    };
    /**
     * @param {?} b
     * @return {undefined}
     */
    removed[_$_81a2[60]] = function(b) {
      getByTagName(this[_$_81a2[973]]);
      b[_$_81a2[540]]();
    };
  },
  removeRemoteEntry : function(a, b, prune) {
    var originalB = a[_$_81a2[996]](b);
    /**
     * @return {undefined}
     */
    originalB[_$_81a2[972]] = function() {
      prune(null);
    };
    /**
     * @param {?} b
     * @return {undefined}
     */
    originalB[_$_81a2[60]] = function(b) {
      prune(this[_$_81a2[973]]);
      b[_$_81a2[540]]();
    };
  },
  reconcile : function(options, model, callback) {
    /**
     * @param {?} data
     * @return {?}
     */
    function _flatten(data) {
      if (data) {
        if (!_flatten[_$_81a2[1001]]) {
          /** @type {boolean} */
          _flatten[_$_81a2[1001]] = true;
          return callback(data);
        }
        return;
      }
      if (++num_summed >= summands) {
        return callback(null);
      }
    }
    /** @type {number} */
    var summands = 0;
    /** @type {!Array} */
    var indexMap = [];
    Object[_$_81a2[998]](options[_$_81a2[997]])[_$_81a2[421]](function(i) {
      var currentLayerBounds = options[_$_81a2[997]][i];
      var ret = model[_$_81a2[997]][i];
      if (!ret || currentLayerBounds[_$_81a2[877]] > ret[_$_81a2[877]]) {
        indexMap[_$_81a2[107]](i);
        summands++;
      }
    });
    /** @type {!Array} */
    var _lodashLangIsNumber2 = [];
    Object[_$_81a2[998]](model[_$_81a2[997]])[_$_81a2[421]](function(i) {
      var beforeTab = model[_$_81a2[997]][i];
      var thebug = options[_$_81a2[997]][i];
      if (!thebug) {
        _lodashLangIsNumber2[_$_81a2[107]](i);
        summands++;
      }
    });
    if (!summands) {
      return callback(null);
    }
    /** @type {number} */
    var num_summed = 0;
    var d = options[_$_81a2[340]] === _$_81a2[982] ? options[_$_81a2[999]] : model[_$_81a2[999]];
    var l = d[_$_81a2[964]]([IDBFS[_$_81a2[965]]], _$_81a2[1E3]);
    var artistTrack = l[_$_81a2[968]](IDBFS[_$_81a2[965]]);
    /**
     * @param {?} a
     * @return {undefined}
     */
    l[_$_81a2[60]] = function(a) {
      _flatten(this[_$_81a2[973]]);
      a[_$_81a2[540]]();
    };
    indexMap[_$_81a2[1006]]()[_$_81a2[421]](function(a) {
      if (model[_$_81a2[340]] === _$_81a2[978]) {
        IDBFS[_$_81a2[1003]](artistTrack, a, function(value, b) {
          if (value) {
            return _flatten(value);
          }
          IDBFS[_$_81a2[1002]](a, b, _flatten);
        });
      } else {
        IDBFS[_$_81a2[1005]](a, function(value, b) {
          if (value) {
            return _flatten(value);
          }
          IDBFS[_$_81a2[1004]](artistTrack, a, b, _flatten);
        });
      }
    });
    _lodashLangIsNumber2[_$_81a2[1006]]()[_$_81a2[1009]]()[_$_81a2[421]](function(a) {
      if (model[_$_81a2[340]] === _$_81a2[978]) {
        IDBFS[_$_81a2[1007]](a, _flatten);
      } else {
        IDBFS[_$_81a2[1008]](artistTrack, a, _flatten);
      }
    });
  }
};
var NODEFS = {
  isWindows : false,
  staticInit : function() {
    /** @type {boolean} */
    NODEFS[_$_81a2[1010]] = !!process[_$_81a2[880]][_$_81a2[109]](/^win/);
  },
  mount : function(selector_f) {
    assert(ENVIRONMENT_IS_NODE);
    return NODEFS[_$_81a2[894]](null, _$_81a2[38], NODEFS[_$_81a2[1013]](selector_f[_$_81a2[1012]][_$_81a2[1011]]), 0);
  },
  createNode : function(params, ns, attribute, tag) {
    if (!FS[_$_81a2[916]](attribute) && !FS[_$_81a2[920]](attribute) && !FS[_$_81a2[923]](attribute)) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
    }
    var node = FS[_$_81a2[894]](params, ns, attribute);
    node[_$_81a2[900]] = NODEFS[_$_81a2[900]];
    node[_$_81a2[863]] = NODEFS[_$_81a2[863]];
    return node;
  },
  getMode : function(path) {
    var decorateNodes;
    try {
      decorateNodes = fs[_$_81a2[1014]](path);
      if (NODEFS[_$_81a2[1010]]) {
        /** @type {number} */
        decorateNodes[_$_81a2[915]] = decorateNodes[_$_81a2[915]] | (decorateNodes[_$_81a2[915]] & 146) >> 1;
      }
    } catch (e) {
      if (!e[_$_81a2[1015]]) {
        throw e;
      }
      throw new FS[_$_81a2[868]](ERRNO_CODES[e[_$_81a2[1015]]]);
    }
    return decorateNodes[_$_81a2[915]];
  },
  realPath : function(a) {
    /** @type {!Array} */
    var rowSorter = [];
    for (; a[_$_81a2[943]] !== a;) {
      rowSorter[_$_81a2[107]](a[_$_81a2[428]]);
      a = a[_$_81a2[943]];
    }
    rowSorter[_$_81a2[107]](a[_$_81a2[954]][_$_81a2[1012]][_$_81a2[1011]]);
    rowSorter[_$_81a2[1009]]();
    return PATH[_$_81a2[116]][_$_81a2[84]](null, rowSorter);
  },
  flagsToPermissionStringMap : {
    0 : _$_81a2[885],
    1 : _$_81a2[1016],
    2 : _$_81a2[1016],
    64 : _$_81a2[885],
    65 : _$_81a2[1016],
    66 : _$_81a2[1016],
    129 : _$_81a2[1017],
    193 : _$_81a2[1017],
    514 : _$_81a2[1018],
    577 : _$_81a2[1019],
    578 : _$_81a2[1018],
    705 : _$_81a2[1020],
    706 : _$_81a2[1021],
    1024 : _$_81a2[1022],
    1025 : _$_81a2[1022],
    1026 : _$_81a2[1023],
    1089 : _$_81a2[1022],
    1090 : _$_81a2[1023],
    1153 : _$_81a2[1024],
    1154 : _$_81a2[1025],
    1217 : _$_81a2[1024],
    1218 : _$_81a2[1025],
    4096 : _$_81a2[1026],
    4098 : _$_81a2[1027]
  },
  flagsToPermissionString : function(n) {
    /** @type {number} */
    n = n & ~2097152;
    /** @type {number} */
    n = n & ~2048;
    /** @type {number} */
    n = n & ~32768;
    /** @type {number} */
    n = n & ~524288;
    if (n in NODEFS[_$_81a2[1028]]) {
      return NODEFS[_$_81a2[1028]][n];
    } else {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
    }
  },
  node_ops : {
    getattr : function(name) {
      var item = NODEFS[_$_81a2[1029]](name);
      var values;
      try {
        values = fs[_$_81a2[1014]](item);
      } catch (e) {
        if (!e[_$_81a2[1015]]) {
          throw e;
        }
        throw new FS[_$_81a2[868]](ERRNO_CODES[e[_$_81a2[1015]]]);
      }
      if (NODEFS[_$_81a2[1010]] && !values[_$_81a2[936]]) {
        /** @type {number} */
        values[_$_81a2[936]] = 4096;
      }
      if (NODEFS[_$_81a2[1010]] && !values[_$_81a2[937]]) {
        /** @type {number} */
        values[_$_81a2[937]] = (values[_$_81a2[339]] + values[_$_81a2[936]] - 1) / values[_$_81a2[936]] | 0;
      }
      return {
        dev : values[_$_81a2[928]],
        ino : values[_$_81a2[929]],
        mode : values[_$_81a2[915]],
        nlink : values[_$_81a2[930]],
        uid : values[_$_81a2[931]],
        gid : values[_$_81a2[932]],
        rdev : values[_$_81a2[865]],
        size : values[_$_81a2[339]],
        atime : values[_$_81a2[933]],
        mtime : values[_$_81a2[934]],
        ctime : values[_$_81a2[935]],
        blksize : values[_$_81a2[936]],
        blocks : values[_$_81a2[937]]
      };
    },
    setattr : function(obj, value) {
      var r = NODEFS[_$_81a2[1029]](obj);
      try {
        if (value[_$_81a2[915]] !== undefined) {
          fs[_$_81a2[1030]](r, value[_$_81a2[915]]);
          obj[_$_81a2[915]] = value[_$_81a2[915]];
        }
        if (value[_$_81a2[877]] !== undefined) {
          /** @type {!Date} */
          var data = new Date(value[_$_81a2[877]]);
          fs[_$_81a2[1031]](r, data, data);
        }
        if (value[_$_81a2[339]] !== undefined) {
          fs[_$_81a2[1032]](r, value[_$_81a2[339]]);
        }
      } catch (e) {
        if (!e[_$_81a2[1015]]) {
          throw e;
        }
        throw new FS[_$_81a2[868]](ERRNO_CODES[e[_$_81a2[1015]]]);
      }
    },
    lookup : function(userAgent, jsAgent) {
      var button2 = PATH[_$_81a2[974]](NODEFS[_$_81a2[1029]](userAgent), jsAgent);
      var button2Component = NODEFS[_$_81a2[1013]](button2);
      return NODEFS[_$_81a2[894]](userAgent, jsAgent, button2Component);
    },
    mknod : function(context, mode, next, callback) {
      var res = NODEFS[_$_81a2[894]](context, mode, next, callback);
      var r = NODEFS[_$_81a2[1029]](res);
      try {
        if (FS[_$_81a2[916]](res[_$_81a2[915]])) {
          fs[_$_81a2[1033]](r, res[_$_81a2[915]]);
        } else {
          fs[_$_81a2[1034]](r, _$_81a2[4], {
            mode : res[_$_81a2[915]]
          });
        }
      } catch (e) {
        if (!e[_$_81a2[1015]]) {
          throw e;
        }
        throw new FS[_$_81a2[868]](ERRNO_CODES[e[_$_81a2[1015]]]);
      }
      return res;
    },
    rename : function(a, b, callback) {
      var lp = NODEFS[_$_81a2[1029]](a);
      var r = PATH[_$_81a2[974]](NODEFS[_$_81a2[1029]](b), callback);
      try {
        fs[_$_81a2[1035]](lp, r);
      } catch (e) {
        if (!e[_$_81a2[1015]]) {
          throw e;
        }
        throw new FS[_$_81a2[868]](ERRNO_CODES[e[_$_81a2[1015]]]);
      }
    },
    unlink : function(e1ToE2Relation, isOwn) {
      var fd = PATH[_$_81a2[974]](NODEFS[_$_81a2[1029]](e1ToE2Relation), isOwn);
      try {
        fs[_$_81a2[1036]](fd);
      } catch (e) {
        if (!e[_$_81a2[1015]]) {
          throw e;
        }
        throw new FS[_$_81a2[868]](ERRNO_CODES[e[_$_81a2[1015]]]);
      }
    },
    rmdir : function(callback, args) {
      var fd = PATH[_$_81a2[974]](NODEFS[_$_81a2[1029]](callback), args);
      try {
        fs[_$_81a2[1037]](fd);
      } catch (e) {
        if (!e[_$_81a2[1015]]) {
          throw e;
        }
        throw new FS[_$_81a2[868]](ERRNO_CODES[e[_$_81a2[1015]]]);
      }
    },
    readdir : function(name) {
      var dir = NODEFS[_$_81a2[1029]](name);
      try {
        return fs[_$_81a2[1038]](dir);
      } catch (e) {
        if (!e[_$_81a2[1015]]) {
          throw e;
        }
        throw new FS[_$_81a2[868]](ERRNO_CODES[e[_$_81a2[1015]]]);
      }
    },
    symlink : function(callback, path, dir) {
      var slice = PATH[_$_81a2[974]](NODEFS[_$_81a2[1029]](callback), path);
      try {
        fs[_$_81a2[1039]](dir, slice);
      } catch (e) {
        if (!e[_$_81a2[1015]]) {
          throw e;
        }
        throw new FS[_$_81a2[868]](ERRNO_CODES[e[_$_81a2[1015]]]);
      }
    },
    readlink : function(file) {
      var fd = NODEFS[_$_81a2[1029]](file);
      try {
        fd = fs[_$_81a2[1040]](fd);
        fd = NODEJS_PATH[_$_81a2[1041]](NODEJS_PATH[_$_81a2[861]](file[_$_81a2[954]][_$_81a2[1012]][_$_81a2[1011]]), fd);
        return fd;
      } catch (e) {
        if (!e[_$_81a2[1015]]) {
          throw e;
        }
        throw new FS[_$_81a2[868]](ERRNO_CODES[e[_$_81a2[1015]]]);
      }
    }
  },
  stream_ops : {
    open : function(b) {
      var fn = NODEFS[_$_81a2[1029]](b[_$_81a2[866]]);
      try {
        if (FS[_$_81a2[920]](b[_$_81a2[866]][_$_81a2[915]])) {
          b[_$_81a2[1042]] = fs[_$_81a2[886]](fn, NODEFS[_$_81a2[1044]](b[_$_81a2[1043]]));
        }
      } catch (e) {
        if (!e[_$_81a2[1015]]) {
          throw e;
        }
        throw new FS[_$_81a2[868]](ERRNO_CODES[e[_$_81a2[1015]]]);
      }
    },
    close : function(hideDisplay) {
      try {
        if (FS[_$_81a2[920]](hideDisplay[_$_81a2[866]][_$_81a2[915]]) && hideDisplay[_$_81a2[1042]]) {
          fs[_$_81a2[889]](hideDisplay[_$_81a2[1042]]);
        }
      } catch (e) {
        if (!e[_$_81a2[1015]]) {
          throw e;
        }
        throw new FS[_$_81a2[868]](ERRNO_CODES[e[_$_81a2[1015]]]);
      }
    },
    read : function(arrayBuffer, bytes, offset, length, text) {
      if (length === 0) {
        return 0;
      }
      var buffer = new Buffer(length);
      var ret;
      try {
        ret = fs[_$_81a2[887]](arrayBuffer[_$_81a2[1042]], buffer, 0, length, text);
      } catch (e) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[e[_$_81a2[1015]]]);
      }
      if (ret > 0) {
        /** @type {number} */
        var i = 0;
        for (; i < ret; i++) {
          bytes[offset + i] = buffer[i];
        }
      }
      return ret;
    },
    write : function(pluginName, context, value, offset, length) {
      var buffer = new Buffer(context[_$_81a2[147]](value, value + offset));
      var ret;
      try {
        ret = fs[_$_81a2[1045]](pluginName[_$_81a2[1042]], buffer, 0, offset, length);
      } catch (e) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[e[_$_81a2[1015]]]);
      }
      return ret;
    },
    llseek : function(eventStr, a, b) {
      /** @type {number} */
      var winTotal = a;
      if (b === 1) {
        winTotal = winTotal + eventStr[_$_81a2[945]];
      } else {
        if (b === 2) {
          if (FS[_$_81a2[920]](eventStr[_$_81a2[866]][_$_81a2[915]])) {
            try {
              var wins = fs[_$_81a2[1046]](eventStr[_$_81a2[1042]]);
              winTotal = winTotal + wins[_$_81a2[339]];
            } catch (e) {
              throw new FS[_$_81a2[868]](ERRNO_CODES[e[_$_81a2[1015]]]);
            }
          }
        }
      }
      if (winTotal < 0) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
      }
      return winTotal;
    }
  }
};
var WORKERFS = {
  DIR_MODE : 16895,
  FILE_MODE : 33279,
  reader : null,
  mount : function(selector_f) {
    /**
     * @param {?} index
     * @return {?}
     */
    function match(index) {
      var array = index[_$_81a2[2]](_$_81a2[38]);
      var fn = node;
      /** @type {number} */
      var i = 0;
      for (; i < array[_$_81a2[36]] - 1; i++) {
        var name = array[_$_81a2[41]](0, i + 1)[_$_81a2[116]](_$_81a2[38]);
        if (!console[name]) {
          console[name] = WORKERFS[_$_81a2[894]](fn, array[i], WORKERFS[_$_81a2[1048]], 0);
        }
        fn = console[name];
      }
      return fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    function $(fn) {
      var a = fn[_$_81a2[2]](_$_81a2[38]);
      return a[a[_$_81a2[36]] - 1];
    }
    assert(ENVIRONMENT_IS_WORKER);
    if (!WORKERFS[_$_81a2[1047]]) {
      WORKERFS[_$_81a2[1047]] = new FileReaderSync;
    }
    var node = WORKERFS[_$_81a2[894]](null, _$_81a2[38], WORKERFS[_$_81a2[1048]], 0);
    var console = {};
    Array[_$_81a2[92]][_$_81a2[421]][_$_81a2[64]](selector_f[_$_81a2[1012]][_$_81a2[1049]] || [], function(a) {
      WORKERFS[_$_81a2[894]](match(a[_$_81a2[428]]), $(a[_$_81a2[428]]), WORKERFS[_$_81a2[1050]], 0, a, a[_$_81a2[1051]]);
    });
    (selector_f[_$_81a2[1012]][_$_81a2[1052]] || [])[_$_81a2[421]](function(a) {
      WORKERFS[_$_81a2[894]](match(a[_$_81a2[428]]), $(a[_$_81a2[428]]), WORKERFS[_$_81a2[1050]], 0, a[_$_81a2[451]]);
    });
    (selector_f[_$_81a2[1012]][_$_81a2[1057]] || [])[_$_81a2[421]](function(b) {
      b[_$_81a2[1056]][_$_81a2[1049]][_$_81a2[421]](function(canCreateDiscussions) {
        var object = canCreateDiscussions[_$_81a2[1053]][_$_81a2[78]](1);
        WORKERFS[_$_81a2[894]](match(object), $(object), WORKERFS[_$_81a2[1050]], 0, b[_$_81a2[1055]][_$_81a2[41]](canCreateDiscussions[_$_81a2[722]], canCreateDiscussions[_$_81a2[1054]]));
      });
    });
    return node;
  },
  createNode : function(config, i, value, parentNode, node, def) {
    var result = FS[_$_81a2[894]](config, i, value);
    result[_$_81a2[915]] = value;
    result[_$_81a2[900]] = WORKERFS[_$_81a2[900]];
    result[_$_81a2[863]] = WORKERFS[_$_81a2[863]];
    result[_$_81a2[877]] = (def || new Date)[_$_81a2[677]]();
    assert(WORKERFS[_$_81a2[1050]] !== WORKERFS[_$_81a2[1048]]);
    if (value === WORKERFS[_$_81a2[1050]]) {
      result[_$_81a2[339]] = node[_$_81a2[339]];
      result[_$_81a2[919]] = node;
    } else {
      /** @type {number} */
      result[_$_81a2[339]] = 4096;
      result[_$_81a2[919]] = {};
    }
    if (config) {
      config[_$_81a2[919]][i] = result;
    }
    return result;
  },
  node_ops : {
    getattr : function(args) {
      return {
        dev : 1,
        ino : undefined,
        mode : args[_$_81a2[915]],
        nlink : 1,
        uid : 0,
        gid : 0,
        rdev : undefined,
        size : args[_$_81a2[339]],
        atime : new Date(args[_$_81a2[877]]),
        mtime : new Date(args[_$_81a2[877]]),
        ctime : new Date(args[_$_81a2[877]]),
        blksize : 4096,
        blocks : Math[_$_81a2[94]](args[_$_81a2[339]] / 4096)
      };
    },
    setattr : function(obj, value) {
      if (value[_$_81a2[915]] !== undefined) {
        obj[_$_81a2[915]] = value[_$_81a2[915]];
      }
      if (value[_$_81a2[877]] !== undefined) {
        obj[_$_81a2[877]] = value[_$_81a2[877]];
      }
    },
    lookup : function(sourcePalette, targetPalette) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[939]]);
    },
    mknod : function(callback, mode, context, fs) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    },
    rename : function(dst, a, b) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    },
    unlink : function(a, name) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    },
    rmdir : function(call, callback) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    },
    readdir : function(callback) {
      /** @type {!Array} */
      var names = [_$_81a2[241], _$_81a2[855]];
      var def;
      for (def in callback[_$_81a2[919]]) {
        if (!callback[_$_81a2[919]][_$_81a2[14]](def)) {
          continue;
        }
        names[_$_81a2[107]](def);
      }
      return names;
    },
    symlink : function(linkdata, path, src) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    },
    readlink : function(callback) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    }
  },
  stream_ops : {
    read : function(reg, fn, n, m, s) {
      if (s >= reg[_$_81a2[866]][_$_81a2[339]]) {
        return 0;
      }
      var kw = reg[_$_81a2[866]][_$_81a2[919]][_$_81a2[41]](s, s + m);
      var result = WORKERFS[_$_81a2[1047]][_$_81a2[1058]](kw);
      fn[_$_81a2[148]](new Uint8Array(result), n);
      return kw[_$_81a2[339]];
    },
    write : function(characteristicUUID, data, serializer, _, value) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[875]]);
    },
    llseek : function(values, op, old_left) {
      /** @type {number} */
      var previousSource = op;
      if (old_left === 1) {
        previousSource = previousSource + values[_$_81a2[945]];
      } else {
        if (old_left === 2) {
          if (FS[_$_81a2[920]](values[_$_81a2[866]][_$_81a2[915]])) {
            previousSource = previousSource + values[_$_81a2[866]][_$_81a2[339]];
          }
        }
      }
      if (previousSource < 0) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
      }
      return previousSource;
    }
  }
};
STATICTOP = STATICTOP + 16;
STATICTOP = STATICTOP + 16;
STATICTOP = STATICTOP + 16;
var LZ4 = {
  DIR_MODE : 16895,
  FILE_MODE : 33279,
  CHUNK_SIZE : -1,
  codec : null,
  init : function() {
    if (LZ4[_$_81a2[1059]]) {
      return;
    }
    LZ4[_$_81a2[1059]] = function() {
      var appProfile = function() {
        /**
         * @param {!Array} p
         * @param {!Object} out
         * @param {number} v
         * @param {(boolean|number|string)} a
         * @param {(boolean|number|string)} d
         * @return {?}
         */
        function callback(p, out, v, a, d) {
          /** @type {(boolean|number|string)} */
          var o = a;
          /** @type {number} */
          var t = d - a;
          /** @type {number} */
          var y = 0;
          if (p[_$_81a2[36]] >= maxWidth) {
            throw new Error(_$_81a2[1063]);
          }
          if (p[_$_81a2[36]] > cy) {
            var c = scales[_$_81a2[1061]](p[_$_81a2[36]]);
            if (t < c) {
              throw Error(_$_81a2[1064] + t + _$_81a2[1065] + c);
            }
            /** @type {number} */
            var a = 1;
            /** @type {number} */
            var r = (1 << b) + 3;
            /** @type {number} */
            var val = p[_$_81a2[36]] - cy;
            for (; v + i < val;) {
              /** @type {number} */
              var cmosValue = p[v + 1] << 8 | p[v];
              /** @type {number} */
              var devtype = p[v + 3] << 8 | p[v + 2];
              /** @type {number} */
              var k = Math[_$_81a2[210]](cmosValue | devtype << 16, suggestedValue) >>> srcMtime;
              /** @type {number} */
              var j = data[k] - 1;
              data[k] = v + 1;
              if (j < 0 || v - j >>> 16 > 0 || (p[j + 3] << 8 | p[j + 2]) != devtype || (p[j + 1] << 8 | p[j]) != cmosValue) {
                /** @type {number} */
                a = r++ >> b;
                v = v + a;
                continue;
              }
              /** @type {number} */
              r = (1 << b) + 3;
              /** @type {number} */
              var height = v - y;
              /** @type {number} */
              var bits = v - j;
              v = v + i;
              /** @type {number} */
              j = j + i;
              /** @type {number} */
              var value = v;
              for (; v < val && p[v] == p[j];) {
                v++;
                j++;
              }
              /** @type {number} */
              value = v - value;
              /** @type {number} */
              var res = value < result ? value : result;
              if (height >= size) {
                /** @type {number} */
                out[o++] = (size << duedate) + res;
                /** @type {number} */
                var value = height - size;
                for (; value > 254; value = value - 255) {
                  /** @type {number} */
                  out[o++] = 255;
                }
                /** @type {number} */
                out[o++] = value;
              } else {
                /** @type {number} */
                out[o++] = (height << duedate) + res;
              }
              /** @type {number} */
              var row = 0;
              for (; row < height; row++) {
                out[o++] = p[y + row];
              }
              /** @type {number} */
              out[o++] = bits;
              /** @type {number} */
              out[o++] = bits >> 8;
              if (value >= result) {
                /** @type {number} */
                value = value - result;
                for (; value >= 255;) {
                  /** @type {number} */
                  value = value - 255;
                  /** @type {number} */
                  out[o++] = 255;
                }
                /** @type {number} */
                out[o++] = value;
              }
              /** @type {number} */
              y = v;
            }
          }
          if (y == 0) {
            return 0;
          }
          /** @type {number} */
          height = p[_$_81a2[36]] - y;
          if (height >= size) {
            /** @type {number} */
            out[o++] = size << duedate;
            /** @type {number} */
            var value = height - size;
            for (; value > 254; value = value - 255) {
              /** @type {number} */
              out[o++] = 255;
            }
            /** @type {number} */
            out[o++] = value;
          } else {
            /** @type {number} */
            out[o++] = height << duedate;
          }
          v = y;
          for (; v < p[_$_81a2[36]];) {
            out[o++] = p[v++];
          }
          return o;
        }
        var scales = {};
        /**
         * @param {!Object} data
         * @param {!Object} a
         * @param {number} offset
         * @param {number} length
         * @return {?}
         */
        scales[_$_81a2[1060]] = function(data, a, offset, length) {
          offset = offset || 0;
          length = length || data[_$_81a2[36]] - offset;
          /** @type {number} */
          var n = offset;
          /** @type {number} */
          var index = length;
          /** @type {number} */
          var d = 0;
          for (; n < index;) {
            var pos = data[n++];
            /** @type {number} */
            var offset = pos >> 4;
            if (offset > 0) {
              /** @type {number} */
              var i = offset + 240;
              for (; i === 255;) {
                i = data[n++];
                offset = offset + i;
              }
              var min = n + offset;
              for (; n < min;) {
                a[d++] = data[n++];
              }
              if (n === index) {
                return d;
              }
            }
            /** @type {number} */
            var ms = data[n++] | data[n++] << 8;
            if (ms === 0) {
              return d;
            }
            if (ms > d) {
              return -(n - 2);
            }
            /** @type {number} */
            var start = pos & 15;
            /** @type {number} */
            i = start + 240;
            for (; i === 255;) {
              i = data[n++];
              start = start + i;
            }
            /** @type {number} */
            var diff = d - ms;
            min = d + start + 4;
            for (; d < min;) {
              a[d++] = a[diff++];
            }
          }
          return d;
        };
        /** @type {number} */
        var maxWidth = 2113929216;
        /** @type {number} */
        var i = 4;
        /** @type {number} */
        var center = 16;
        /** @type {number} */
        var srcMtime = i * 8 - center;
        /** @type {number} */
        var y = 8;
        /** @type {number} */
        var cy = y + i;
        /** @type {number} */
        var b = 6;
        /** @type {number} */
        var duedate = 4;
        /** @type {number} */
        var result = (1 << duedate) - 1;
        /** @type {number} */
        var timeSubmittedDiff = 8 - duedate;
        /** @type {number} */
        var size = (1 << timeSubmittedDiff) - 1;
        /** @type {number} */
        var suggestedValue = 2654435761;
        assert(srcMtime === 16);
        /** @type {!Int16Array} */
        var data = new Int16Array(1 << 16);
        /** @type {!Int16Array} */
        var cc_buffer = new Int16Array(data[_$_81a2[36]]);
        /**
         * @param {number} width
         * @return {?}
         */
        scales[_$_81a2[1061]] = function(width) {
          return width > maxWidth ? 0 : width + width / 255 + 16 | 0;
        };
        /**
         * @param {!Array} set
         * @param {!Object} buffer
         * @param {number} stats
         * @param {?} param
         * @return {?}
         */
        scales[_$_81a2[1062]] = function(set, buffer, stats, param) {
          data[_$_81a2[148]](cc_buffer);
          return callback(set, buffer, 0, stats || 0, param || buffer[_$_81a2[36]]);
        };
        /** @type {number} */
        scales[_$_81a2[1066]] = 2048;
        /**
         * @param {!Object} obj
         * @param {?} p
         * @return {?}
         */
        scales[_$_81a2[1067]] = function(obj, p) {
          if (p) {
            /** @type {!Uint8Array} */
            var d = new Uint8Array(scales[_$_81a2[1066]]);
          }
          assert(obj instanceof ArrayBuffer);
          /** @type {!Uint8Array} */
          obj = new Uint8Array(obj);
          console[_$_81a2[24]](_$_81a2[1068] + obj[_$_81a2[36]]);
          /** @type {!Array} */
          var options = [];
          /** @type {!Array} */
          var numSuccesses = [];
          /** @type {number} */
          var param = 0;
          /** @type {number} */
          var count = 0;
          for (; param < obj[_$_81a2[36]];) {
            var c = obj[_$_81a2[147]](param, param + scales[_$_81a2[1066]]);
            param = param + scales[_$_81a2[1066]];
            var len = scales[_$_81a2[1061]](c[_$_81a2[36]]);
            /** @type {!Uint8Array} */
            var value = new Uint8Array(len);
            var index = scales[_$_81a2[1062]](c, value);
            if (index > 0) {
              assert(index <= len);
              value = value[_$_81a2[147]](0, index);
              options[_$_81a2[107]](value);
              count = count + index;
              numSuccesses[_$_81a2[107]](1);
              if (p) {
                var a = scales[_$_81a2[1060]](value, d);
                assert(a === c[_$_81a2[36]], [a, c[_$_81a2[36]]]);
                /** @type {number} */
                var i = 0;
                for (; i < c[_$_81a2[36]]; i++) {
                  assert(c[i] === d[i]);
                }
              }
            } else {
              assert(index === 0);
              options[_$_81a2[107]](c);
              count = count + c[_$_81a2[36]];
              numSuccesses[_$_81a2[107]](0);
            }
          }
          /** @type {null} */
          obj = null;
          var data = {
            data : new Uint8Array(count + scales[_$_81a2[1066]] * 2),
            cachedOffset : count,
            cachedIndexes : [-1, -1],
            cachedChunks : [null, null],
            offsets : [],
            sizes : [],
            successes : numSuccesses
          };
          /** @type {number} */
          param = 0;
          /** @type {number} */
          i = 0;
          for (; i < options[_$_81a2[36]]; i++) {
            data[_$_81a2[451]][_$_81a2[148]](options[i], param);
            data[_$_81a2[1069]][i] = param;
            data[_$_81a2[1070]][i] = options[i][_$_81a2[36]];
            param = param + options[i][_$_81a2[36]];
          }
          console[_$_81a2[24]](_$_81a2[1071] + [data[_$_81a2[451]][_$_81a2[36]]]);
          assert(param === count);
          return data;
        };
        assert(scales[_$_81a2[1066]] < 1 << 15);
        return scales;
      }();
      return appProfile;
    }();
    LZ4[_$_81a2[1066]] = LZ4[_$_81a2[1059]][_$_81a2[1066]];
  },
  loadPackage : function(callback) {
    LZ4[_$_81a2[546]]();
    var historical_metrics = callback[_$_81a2[1072]];
    if (!historical_metrics) {
      historical_metrics = LZ4[_$_81a2[1059]][_$_81a2[1067]](callback[_$_81a2[451]]);
    }
    assert(historical_metrics[_$_81a2[1073]][_$_81a2[36]] === historical_metrics[_$_81a2[1074]][_$_81a2[36]]);
    /** @type {number} */
    var chartInstanceName = 0;
    for (; chartInstanceName < historical_metrics[_$_81a2[1073]][_$_81a2[36]]; chartInstanceName++) {
      /** @type {number} */
      historical_metrics[_$_81a2[1073]][chartInstanceName] = -1;
      historical_metrics[_$_81a2[1074]][chartInstanceName] = historical_metrics[_$_81a2[451]][_$_81a2[147]](historical_metrics[_$_81a2[1075]] + chartInstanceName * LZ4[_$_81a2[1066]], historical_metrics[_$_81a2[1075]] + (chartInstanceName + 1) * LZ4[_$_81a2[1066]]);
      assert(historical_metrics[_$_81a2[1074]][chartInstanceName][_$_81a2[36]] === LZ4[_$_81a2[1066]]);
    }
    callback[_$_81a2[1056]][_$_81a2[1049]][_$_81a2[421]](function(loaded) {
      var artistTrack = PATH[_$_81a2[1076]](loaded[_$_81a2[1053]]);
      var GET_AUTH_URL_TIMEOUT = PATH[_$_81a2[1077]](loaded[_$_81a2[1053]]);
      FS[_$_81a2[1078]](_$_81a2[4], artistTrack, true, true);
      var numKeysDeleted = FS[_$_81a2[1079]](artistTrack)[_$_81a2[21]];
      LZ4[_$_81a2[894]](numKeysDeleted, GET_AUTH_URL_TIMEOUT, LZ4[_$_81a2[1050]], 0, {
        compressedData : historical_metrics,
        start : loaded[_$_81a2[722]],
        end : loaded[_$_81a2[1054]]
      });
    });
  },
  createNode : function(config, i, url, xml, t, c) {
    var result = FS[_$_81a2[894]](config, i, url);
    result[_$_81a2[915]] = url;
    result[_$_81a2[900]] = LZ4[_$_81a2[900]];
    result[_$_81a2[863]] = LZ4[_$_81a2[863]];
    result[_$_81a2[877]] = (c || new Date)[_$_81a2[677]]();
    assert(LZ4[_$_81a2[1050]] !== LZ4[_$_81a2[1048]]);
    if (url === LZ4[_$_81a2[1050]]) {
      /** @type {number} */
      result[_$_81a2[339]] = t[_$_81a2[1054]] - t[_$_81a2[722]];
      result[_$_81a2[919]] = t;
    } else {
      /** @type {number} */
      result[_$_81a2[339]] = 4096;
      result[_$_81a2[919]] = {};
    }
    if (config) {
      config[_$_81a2[919]][i] = result;
    }
    return result;
  },
  node_ops : {
    getattr : function(args) {
      return {
        dev : 1,
        ino : undefined,
        mode : args[_$_81a2[915]],
        nlink : 1,
        uid : 0,
        gid : 0,
        rdev : undefined,
        size : args[_$_81a2[339]],
        atime : new Date(args[_$_81a2[877]]),
        mtime : new Date(args[_$_81a2[877]]),
        ctime : new Date(args[_$_81a2[877]]),
        blksize : 4096,
        blocks : Math[_$_81a2[94]](args[_$_81a2[339]] / 4096)
      };
    },
    setattr : function(obj, value) {
      if (value[_$_81a2[915]] !== undefined) {
        obj[_$_81a2[915]] = value[_$_81a2[915]];
      }
      if (value[_$_81a2[877]] !== undefined) {
        obj[_$_81a2[877]] = value[_$_81a2[877]];
      }
    },
    lookup : function(sourcePalette, targetPalette) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[939]]);
    },
    mknod : function(callback, mode, context, fs) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    },
    rename : function(dst, a, b) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    },
    unlink : function(a, name) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    },
    rmdir : function(call, callback) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    },
    readdir : function(callback) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    },
    symlink : function(linkdata, path, src) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    },
    readlink : function(callback) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    }
  },
  stream_ops : {
    read : function(table, array, i, size, prefix) {
      size = Math[_$_81a2[81]](size, table[_$_81a2[866]][_$_81a2[339]] - prefix);
      if (size <= 0) {
        return 0;
      }
      var steps = table[_$_81a2[866]][_$_81a2[919]];
      var obj = steps[_$_81a2[1072]];
      /** @type {number} */
      var offset = 0;
      for (; offset < size;) {
        var off = steps[_$_81a2[722]] + prefix + offset;
        /** @type {number} */
        var count = size - offset;
        var text = Math[_$_81a2[214]](off / LZ4[_$_81a2[1066]]);
        var classes = obj[_$_81a2[1069]][text];
        var id = obj[_$_81a2[1070]][text];
        var match;
        if (obj[_$_81a2[1080]][text]) {
          var i = obj[_$_81a2[1073]][_$_81a2[242]](text);
          if (i >= 0) {
            match = obj[_$_81a2[1074]][i];
          } else {
            obj[_$_81a2[1073]][_$_81a2[976]]();
            obj[_$_81a2[1073]][_$_81a2[198]](text);
            match = obj[_$_81a2[1074]][_$_81a2[976]]();
            obj[_$_81a2[1074]][_$_81a2[198]](match);
            if (obj[_$_81a2[1081]]) {
              console[_$_81a2[24]](_$_81a2[1082] + text);
              Neptune[_$_81a2[1083]] = (Neptune[_$_81a2[1083]] || 0) + 1;
            }
            var index = obj[_$_81a2[451]][_$_81a2[147]](classes, classes + id);
            var elem = LZ4[_$_81a2[1059]][_$_81a2[1060]](index, match);
            if (text < obj[_$_81a2[1080]][_$_81a2[36]] - 1) {
              assert(elem === LZ4[_$_81a2[1066]]);
            }
          }
        } else {
          match = obj[_$_81a2[451]][_$_81a2[147]](classes, classes + LZ4[_$_81a2[1066]]);
        }
        /** @type {number} */
        var from = off % LZ4[_$_81a2[1066]];
        var until = Math[_$_81a2[81]](from + count, LZ4[_$_81a2[1066]]);
        array[_$_81a2[148]](match[_$_81a2[147]](from, until), i + offset);
        /** @type {number} */
        var length = until - from;
        /** @type {number} */
        offset = offset + length;
      }
      return offset;
    },
    write : function(characteristicUUID, data, serializer, _, value) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[875]]);
    },
    llseek : function(values, op, old_left) {
      /** @type {number} */
      var previousSource = op;
      if (old_left === 1) {
        previousSource = previousSource + values[_$_81a2[945]];
      } else {
        if (old_left === 2) {
          if (FS[_$_81a2[920]](values[_$_81a2[866]][_$_81a2[915]])) {
            previousSource = previousSource + values[_$_81a2[866]][_$_81a2[339]];
          }
        }
      }
      if (previousSource < 0) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
      }
      return previousSource;
    }
  }
};
var FS = {
  root : null,
  mounts : [],
  devices : [null],
  streams : [],
  nextInode : 1,
  nameTable : null,
  currentPath : _$_81a2[38],
  initialized : false,
  ignorePermissions : true,
  trackingDelegate : {},
  tracking : {
    openFlags : {
      READ : 1,
      WRITE : 2
    }
  },
  ErrnoError : null,
  genericErrors : {},
  filesystems : null,
  syncFSRequests : 0,
  handleFSError : function(a) {
    if (!(a instanceof FS[_$_81a2[868]])) {
      throw a + _$_81a2[1084] + stackTrace();
    }
    return ___setErrNo(a[_$_81a2[302]]);
  },
  lookupPath : function(moduleName, model) {
    moduleName = PATH[_$_81a2[861]](FS[_$_81a2[859]](), moduleName);
    model = model || {};
    if (!moduleName) {
      return {
        path : _$_81a2[4],
        node : null
      };
    }
    var schema = {
      follow_mount : true,
      recurse_count : 0
    };
    var prop;
    for (prop in schema) {
      if (model[prop] === undefined) {
        model[prop] = schema[prop];
      }
    }
    if (model[_$_81a2[1085]] > 8) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1086]]);
    }
    var PL$13 = PATH[_$_81a2[857]](moduleName[_$_81a2[2]](_$_81a2[38])[_$_81a2[856]](function(a) {
      return !!a;
    }), false);
    var target = FS[_$_81a2[1011]];
    var c = _$_81a2[38];
    /** @type {number} */
    var PL$17 = 0;
    for (; PL$17 < PL$13[_$_81a2[36]]; PL$17++) {
      /** @type {boolean} */
      var isMake = PL$17 === PL$13[_$_81a2[36]] - 1;
      if (isMake && model[_$_81a2[943]]) {
        break;
      }
      target = FS[_$_81a2[941]](target, PL$13[PL$17]);
      c = PATH[_$_81a2[974]](c, PL$13[PL$17]);
      if (FS[_$_81a2[1087]](target)) {
        if (!isMake || isMake && model[_$_81a2[1088]]) {
          target = target[_$_81a2[1089]][_$_81a2[1011]];
        }
      }
      if (!isMake || model[_$_81a2[1090]]) {
        /** @type {number} */
        var a = 0;
        for (; FS[_$_81a2[923]](target[_$_81a2[915]]);) {
          var data = FS[_$_81a2[913]](c);
          c = PATH[_$_81a2[861]](PATH[_$_81a2[1076]](c), data);
          var module = FS[_$_81a2[987]](c, {
            recurse_count : model[_$_81a2[1085]]
          });
          target = module[_$_81a2[866]];
          if (a++ > 40) {
            throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1086]]);
          }
        }
      }
    }
    return {
      path : c,
      node : target
    };
  },
  getPath : function(values) {
    var f;
    for (; true;) {
      if (FS[_$_81a2[1091]](values)) {
        var ret = values[_$_81a2[954]][_$_81a2[975]];
        if (!f) {
          return ret;
        }
        return ret[ret[_$_81a2[36]] - 1] !== _$_81a2[38] ? ret + _$_81a2[38] + f : ret + f;
      }
      f = f ? values[_$_81a2[428]] + _$_81a2[38] + f : values[_$_81a2[428]];
      values = values[_$_81a2[943]];
    }
  },
  hashName : function(name, PL$42) {
    /** @type {number} */
    var h = 0;
    /** @type {number} */
    var PL$41 = 0;
    for (; PL$41 < PL$42[_$_81a2[36]]; PL$41++) {
      /** @type {number} */
      h = (h << 5) - h + PL$42[_$_81a2[159]](PL$41) | 0;
    }
    return (name + h >>> 0) % FS[_$_81a2[1092]][_$_81a2[36]];
  },
  hashAddNode : function(b) {
    var i = FS[_$_81a2[1093]](b[_$_81a2[943]][_$_81a2[293]], b[_$_81a2[428]]);
    b[_$_81a2[1094]] = FS[_$_81a2[1092]][i];
    FS[_$_81a2[1092]][i] = b;
  },
  hashRemoveNode : function(o) {
    var i = FS[_$_81a2[1093]](o[_$_81a2[943]][_$_81a2[293]], o[_$_81a2[428]]);
    if (FS[_$_81a2[1092]][i] === o) {
      FS[_$_81a2[1092]][i] = o[_$_81a2[1094]];
    } else {
      var n = FS[_$_81a2[1092]][i];
      for (; n;) {
        if (n[_$_81a2[1094]] === o) {
          n[_$_81a2[1094]] = o[_$_81a2[1094]];
          break;
        }
        n = n[_$_81a2[1094]];
      }
    }
  },
  lookupNode : function(key, value) {
    var encodedKeyOrRange = FS[_$_81a2[1095]](key);
    if (encodedKeyOrRange) {
      throw new FS[_$_81a2[868]](encodedKeyOrRange, key);
    }
    var ch = FS[_$_81a2[1093]](key[_$_81a2[293]], value);
    var node = FS[_$_81a2[1092]][ch];
    for (; node; node = node[_$_81a2[1094]]) {
      var tmp = node[_$_81a2[428]];
      if (node[_$_81a2[943]][_$_81a2[293]] === key[_$_81a2[293]] && tmp === value) {
        return node;
      }
    }
    return FS[_$_81a2[902]](key, value);
  },
  createNode : function(name, doc, text, author) {
    if (!FS[_$_81a2[1096]]) {
      /**
       * @param {?} canCreateDiscussions
       * @param {?} b
       * @param {?} a
       * @param {?} isSlidingUp
       * @return {undefined}
       */
      FS[_$_81a2[1096]] = function(canCreateDiscussions, b, a, isSlidingUp) {
        if (!canCreateDiscussions) {
          canCreateDiscussions = this;
        }
        this[_$_81a2[943]] = canCreateDiscussions;
        this[_$_81a2[954]] = canCreateDiscussions[_$_81a2[954]];
        /** @type {null} */
        this[_$_81a2[1089]] = null;
        /** @type {number} */
        this[_$_81a2[293]] = FS[_$_81a2[1097]]++;
        this[_$_81a2[428]] = b;
        this[_$_81a2[915]] = a;
        this[_$_81a2[900]] = {};
        this[_$_81a2[863]] = {};
        this[_$_81a2[865]] = isSlidingUp;
      };
      FS[_$_81a2[1096]][_$_81a2[92]] = {};
      /** @type {number} */
      var g = 292 | 73;
      /** @type {number} */
      var h = 146;
      Object[_$_81a2[1098]](FS[_$_81a2[1096]][_$_81a2[92]], {
        read : {
          get : function() {
            return (this[_$_81a2[915]] & g) === g;
          },
          set : function(mymuted) {
            if (mymuted) {
              this[_$_81a2[915]] |= g;
            } else {
              this[_$_81a2[915]] &= ~g;
            }
          }
        },
        write : {
          get : function() {
            return (this[_$_81a2[915]] & h) === h;
          },
          set : function(mymuted) {
            if (mymuted) {
              this[_$_81a2[915]] |= h;
            } else {
              this[_$_81a2[915]] &= ~h;
            }
          }
        },
        isFolder : {
          get : function() {
            return FS[_$_81a2[916]](this[_$_81a2[915]]);
          }
        },
        isDevice : {
          get : function() {
            return FS[_$_81a2[925]](this[_$_81a2[915]]);
          }
        }
      });
    }
    var div = new FS[_$_81a2[1096]](name, doc, text, author);
    FS[_$_81a2[1099]](div);
    return div;
  },
  destroyNode : function(options) {
    FS[_$_81a2[1100]](options);
  },
  isRoot : function(obj) {
    return obj === obj[_$_81a2[943]];
  },
  isMountpoint : function(a) {
    return !!a[_$_81a2[1089]];
  },
  isFile : function(s) {
    return (s & 61440) === 32768;
  },
  isDir : function(url) {
    return (url & 61440) === 16384;
  },
  isLink : function(callback) {
    return (callback & 61440) === 40960;
  },
  isChrdev : function(a) {
    return (a & 61440) === 8192;
  },
  isBlkdev : function(a) {
    return (a & 61440) === 24576;
  },
  isFIFO : function(v) {
    return (v & 61440) === 4096;
  },
  isSocket : function(socket) {
    return (socket & 49152) === 49152;
  },
  flagModes : {
    "r" : 0,
    "rs" : 1052672,
    "r+" : 2,
    "w" : 577,
    "wx" : 705,
    "xw" : 705,
    "w+" : 578,
    "wx+" : 706,
    "xw+" : 706,
    "a" : 1089,
    "ax" : 1217,
    "xa" : 1217,
    "a+" : 1090,
    "ax+" : 1218,
    "xa+" : 1218
  },
  modeStringToFlags : function(level) {
    var rowsOfColumns = FS[_$_81a2[1101]][level];
    if (typeof rowsOfColumns === _$_81a2[13]) {
      throw new Error(_$_81a2[1102] + level);
    }
    return rowsOfColumns;
  },
  flagsToPermissionString : function(a) {
    var val = [_$_81a2[885], _$_81a2[1019], _$_81a2[1103]][a & 3];
    if (a & 512) {
      val = val + _$_81a2[1019];
    }
    return val;
  },
  nodePermissions : function(a, b) {
    if (FS[_$_81a2[1104]]) {
      return 0;
    }
    if (b[_$_81a2[242]](_$_81a2[885]) !== -1 && !(a[_$_81a2[915]] & 292)) {
      return ERRNO_CODES[_$_81a2[1105]];
    } else {
      if (b[_$_81a2[242]](_$_81a2[1019]) !== -1 && !(a[_$_81a2[915]] & 146)) {
        return ERRNO_CODES[_$_81a2[1105]];
      } else {
        if (b[_$_81a2[242]](_$_81a2[1106]) !== -1 && !(a[_$_81a2[915]] & 73)) {
          return ERRNO_CODES[_$_81a2[1105]];
        }
      }
    }
    return 0;
  },
  mayLookup : function(a) {
    var _ref_a = FS[_$_81a2[1107]](a, _$_81a2[1106]);
    if (_ref_a) {
      return _ref_a;
    }
    if (!a[_$_81a2[900]][_$_81a2[902]]) {
      return ERRNO_CODES[_$_81a2[1105]];
    }
    return 0;
  },
  mayCreate : function(a, b) {
    try {
      var bySmiley = FS[_$_81a2[941]](a, b);
      return ERRNO_CODES[_$_81a2[1108]];
    } catch (e) {
    }
    return FS[_$_81a2[1107]](a, _$_81a2[1020]);
  },
  mayDelete : function(a, b, variableNames) {
    var sortReturnNumber;
    try {
      sortReturnNumber = FS[_$_81a2[941]](a, b);
    } catch (e) {
      return e[_$_81a2[302]];
    }
    var _ref_a = FS[_$_81a2[1107]](a, _$_81a2[1020]);
    if (_ref_a) {
      return _ref_a;
    }
    if (variableNames) {
      if (!FS[_$_81a2[916]](sortReturnNumber[_$_81a2[915]])) {
        return ERRNO_CODES[_$_81a2[1109]];
      }
      if (FS[_$_81a2[1091]](sortReturnNumber) || FS[_$_81a2[1110]](sortReturnNumber) === FS[_$_81a2[859]]()) {
        return ERRNO_CODES[_$_81a2[1111]];
      }
    } else {
      if (FS[_$_81a2[916]](sortReturnNumber[_$_81a2[915]])) {
        return ERRNO_CODES[_$_81a2[1112]];
      }
    }
    return 0;
  },
  mayOpen : function(b, areMutuallyExclusive) {
    if (!b) {
      return ERRNO_CODES[_$_81a2[939]];
    }
    if (FS[_$_81a2[923]](b[_$_81a2[915]])) {
      return ERRNO_CODES[_$_81a2[1086]];
    } else {
      if (FS[_$_81a2[916]](b[_$_81a2[915]])) {
        if (FS[_$_81a2[1044]](areMutuallyExclusive) !== _$_81a2[885] || areMutuallyExclusive & 512) {
          return ERRNO_CODES[_$_81a2[1112]];
        }
      }
    }
    return FS[_$_81a2[1107]](b, FS[_$_81a2[1044]](areMutuallyExclusive));
  },
  MAX_OPEN_FDS : 4096,
  nextfd : function(position, maxCount) {
    position = position || 0;
    maxCount = maxCount || FS[_$_81a2[1113]];
    /** @type {number} */
    var a = position;
    for (; a <= maxCount; a++) {
      if (!FS[_$_81a2[1114]][a]) {
        return a;
      }
    }
    throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1115]]);
  },
  getStream : function(streamID) {
    return FS[_$_81a2[1114]][streamID];
  },
  createStream : function(data, file, data_type) {
    if (!FS[_$_81a2[1116]]) {
      /**
       * @return {undefined}
       */
      FS[_$_81a2[1116]] = function() {
      };
      FS[_$_81a2[1116]][_$_81a2[92]] = {};
      Object[_$_81a2[1098]](FS[_$_81a2[1116]][_$_81a2[92]], {
        object : {
          get : function() {
            return this[_$_81a2[866]];
          },
          set : function(mymuted) {
            this[_$_81a2[866]] = mymuted;
          }
        },
        isRead : {
          get : function() {
            return (this[_$_81a2[1043]] & 2097155) !== 1;
          }
        },
        isWrite : {
          get : function() {
            return (this[_$_81a2[1043]] & 2097155) !== 0;
          }
        },
        isAppend : {
          get : function() {
            return this[_$_81a2[1043]] & 1024;
          }
        }
      });
    }
    var uint8Array = new FS[_$_81a2[1116]];
    var i;
    for (i in data) {
      uint8Array[i] = data[i];
    }
    data = uint8Array;
    var type = FS[_$_81a2[1117]](file, data_type);
    data[_$_81a2[882]] = type;
    /** @type {string} */
    FS[_$_81a2[1114]][type] = data;
    return data;
  },
  closeStream : function(productId) {
    /** @type {null} */
    FS[_$_81a2[1114]][productId] = null;
  },
  chrdev_stream_ops : {
    open : function(prev) {
      var head = FS[_$_81a2[1118]](prev[_$_81a2[866]][_$_81a2[865]]);
      prev[_$_81a2[863]] = head[_$_81a2[863]];
      if (prev[_$_81a2[863]][_$_81a2[51]]) {
        prev[_$_81a2[863]][_$_81a2[51]](prev);
      }
    },
    llseek : function() {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1119]]);
    }
  },
  major : function(a) {
    return a >> 8;
  },
  minor : function(a) {
    return a & 255;
  },
  makedev : function(uint8Value1, uint8Value2) {
    return uint8Value1 << 8 | uint8Value2;
  },
  registerDevice : function(errorCallback, successCallback) {
    FS[_$_81a2[1120]][errorCallback] = {
      stream_ops : successCallback
    };
  },
  getDevice : function(service) {
    return FS[_$_81a2[1120]][service];
  },
  getMounts : function($state) {
    /** @type {!Array} */
    var command_codes = [];
    /** @type {!Array} */
    var adminManagementRedirect = [$state];
    for (; adminManagementRedirect[_$_81a2[36]];) {
      var data = adminManagementRedirect[_$_81a2[976]]();
      command_codes[_$_81a2[107]](data);
      adminManagementRedirect[_$_81a2[107]][_$_81a2[84]](adminManagementRedirect, data[_$_81a2[1121]]);
    }
    return command_codes;
  },
  syncfs : function(docRef, emitEvent) {
    /**
     * @param {!Object} name
     * @return {?}
     */
    function emit(name) {
      assert(FS[_$_81a2[1122]] > 0);
      FS[_$_81a2[1122]]--;
      return emitEvent(name);
    }
    /**
     * @param {!Object} d
     * @return {?}
     */
    function checkDone(d) {
      if (d) {
        if (!checkDone[_$_81a2[1001]]) {
          /** @type {boolean} */
          checkDone[_$_81a2[1001]] = true;
          return emit(d);
        }
        return;
      }
      if (++b >= f[_$_81a2[36]]) {
        emit(null);
      }
    }
    if (typeof docRef === _$_81a2[22]) {
      /** @type {number} */
      emitEvent = docRef;
      /** @type {boolean} */
      docRef = false;
    }
    FS[_$_81a2[1122]]++;
    if (FS[_$_81a2[1122]] > 1) {
      console[_$_81a2[24]](_$_81a2[1123] + FS[_$_81a2[1122]] + _$_81a2[1124]);
    }
    var f = FS[_$_81a2[1125]](FS[_$_81a2[1011]][_$_81a2[954]]);
    /** @type {number} */
    var b = 0;
    f[_$_81a2[421]](function(a) {
      if (!a[_$_81a2[340]][_$_81a2[1126]]) {
        return checkDone(null);
      }
      a[_$_81a2[340]][_$_81a2[1126]](a, docRef, checkDone);
    });
  },
  mount : function(target, name, mountpoint) {
    /** @type {boolean} */
    var complete = mountpoint === _$_81a2[38];
    /** @type {boolean} */
    var done = !mountpoint;
    var searchResultsDelivered;
    if (complete && FS[_$_81a2[1011]]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1111]]);
    } else {
      if (!complete && !done) {
        var mounted = FS[_$_81a2[987]](mountpoint, {
          follow_mount : false
        });
        mountpoint = mounted[_$_81a2[29]];
        searchResultsDelivered = mounted[_$_81a2[866]];
        if (FS[_$_81a2[1087]](searchResultsDelivered)) {
          throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1111]]);
        }
        if (!FS[_$_81a2[916]](searchResultsDelivered[_$_81a2[915]])) {
          throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1109]]);
        }
      }
    }
    var result = {
      type : target,
      opts : name,
      mountpoint : mountpoint,
      mounts : []
    };
    var out = target[_$_81a2[954]](result);
    out[_$_81a2[954]] = result;
    result[_$_81a2[1011]] = out;
    if (complete) {
      FS[_$_81a2[1011]] = out;
    } else {
      if (searchResultsDelivered) {
        searchResultsDelivered[_$_81a2[1089]] = result;
        if (searchResultsDelivered[_$_81a2[954]]) {
          searchResultsDelivered[_$_81a2[954]][_$_81a2[1121]][_$_81a2[107]](result);
        }
      }
    }
    return out;
  },
  unmount : function(callback) {
    var index = FS[_$_81a2[987]](callback, {
      follow_mount : false
    });
    if (!FS[_$_81a2[1087]](index[_$_81a2[866]])) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
    }
    var j = index[_$_81a2[866]];
    var b = j[_$_81a2[1089]];
    var f = FS[_$_81a2[1125]](b);
    Object[_$_81a2[998]](FS[_$_81a2[1092]])[_$_81a2[421]](function(routePart) {
      var block = FS[_$_81a2[1092]][routePart];
      for (; block;) {
        var node = block[_$_81a2[1094]];
        if (f[_$_81a2[242]](block[_$_81a2[954]]) !== -1) {
          FS[_$_81a2[1127]](block);
        }
        block = node;
      }
    });
    /** @type {null} */
    j[_$_81a2[1089]] = null;
    var pos2 = j[_$_81a2[954]][_$_81a2[1121]][_$_81a2[242]](b);
    assert(pos2 !== -1);
    j[_$_81a2[954]][_$_81a2[1121]][_$_81a2[854]](pos2, 1);
  },
  lookup : function(userAgent, jsAgent) {
    return userAgent[_$_81a2[900]][_$_81a2[902]](userAgent, jsAgent);
  },
  mknod : function(context, mode, callback) {
    var c = FS[_$_81a2[987]](context, {
      parent : true
    });
    var G__5743_5744 = c[_$_81a2[866]];
    var width = PATH[_$_81a2[1077]](context);
    if (!width || width === _$_81a2[241] || width === _$_81a2[855]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
    }
    var eventWidthCurrent = FS[_$_81a2[1128]](G__5743_5744, width);
    if (eventWidthCurrent) {
      throw new FS[_$_81a2[868]](eventWidthCurrent);
    }
    if (!G__5743_5744[_$_81a2[900]][_$_81a2[903]]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    }
    return G__5743_5744[_$_81a2[900]][_$_81a2[903]](G__5743_5744, width, mode, callback);
  },
  create : function(board, mode) {
    mode = mode !== undefined ? mode : 438;
    /** @type {number} */
    mode = mode & 4095;
    /** @type {number} */
    mode = mode | 32768;
    return FS[_$_81a2[903]](board, mode, 0);
  },
  mkdir : function(ensure, mode) {
    mode = mode !== undefined ? mode : 511;
    /** @type {number} */
    mode = mode & (511 | 512);
    /** @type {number} */
    mode = mode | 16384;
    return FS[_$_81a2[903]](ensure, mode, 0);
  },
  mkdirTree : function(mmCoreLogEnabledDefault, mmCoreLogEnabledConfigName) {
    var PL$13 = mmCoreLogEnabledDefault[_$_81a2[2]](_$_81a2[38]);
    var boundary = _$_81a2[4];
    /** @type {number} */
    var PL$17 = 0;
    for (; PL$17 < PL$13[_$_81a2[36]]; ++PL$17) {
      if (!PL$13[PL$17]) {
        continue;
      }
      boundary = boundary + (_$_81a2[38] + PL$13[PL$17]);
      try {
        FS[_$_81a2[990]](boundary, mmCoreLogEnabledConfigName);
      } catch (e) {
        if (e[_$_81a2[302]] != ERRNO_CODES[_$_81a2[1108]]) {
          throw e;
        }
      }
    }
  },
  mkdev : function(e, f, a) {
    if (typeof a === _$_81a2[13]) {
      /** @type {number} */
      a = f;
      /** @type {number} */
      f = 438;
    }
    /** @type {number} */
    f = f | 8192;
    return FS[_$_81a2[903]](e, f, a);
  },
  symlink : function(callback, type) {
    if (!PATH[_$_81a2[861]](callback)) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[939]]);
    }
    var f = FS[_$_81a2[987]](type, {
      parent : true
    });
    var sdkDir = f[_$_81a2[866]];
    if (!sdkDir) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[939]]);
    }
    var relation = PATH[_$_81a2[1077]](type);
    var foreignRelations = FS[_$_81a2[1128]](sdkDir, relation);
    if (foreignRelations) {
      throw new FS[_$_81a2[868]](foreignRelations);
    }
    if (!sdkDir[_$_81a2[900]][_$_81a2[908]]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    }
    return sdkDir[_$_81a2[900]][_$_81a2[908]](sdkDir, relation, callback);
  },
  rename : function(callback, name) {
    var i = PATH[_$_81a2[1076]](callback);
    var item = PATH[_$_81a2[1076]](name);
    var x = PATH[_$_81a2[1077]](callback);
    var m = PATH[_$_81a2[1077]](name);
    var result;
    var d;
    var r;
    try {
      result = FS[_$_81a2[987]](callback, {
        parent : true
      });
      d = result[_$_81a2[866]];
      result = FS[_$_81a2[987]](name, {
        parent : true
      });
      r = result[_$_81a2[866]];
    } catch (e) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1111]]);
    }
    if (!d || !r) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[939]]);
    }
    if (d[_$_81a2[954]] !== r[_$_81a2[954]]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1129]]);
    }
    var b = FS[_$_81a2[941]](d, x);
    var index = PATH[_$_81a2[1041]](callback, item);
    if (index[_$_81a2[136]](0) !== _$_81a2[241]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
    }
    index = PATH[_$_81a2[1041]](name, i);
    if (index[_$_81a2[136]](0) !== _$_81a2[241]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[942]]);
    }
    var n;
    try {
      n = FS[_$_81a2[941]](r, m);
    } catch (e) {
    }
    if (b === n) {
      return;
    }
    var centerInScreen = FS[_$_81a2[916]](b[_$_81a2[915]]);
    var a = FS[_$_81a2[1130]](d, x, centerInScreen);
    if (a) {
      throw new FS[_$_81a2[868]](a);
    }
    a = n ? FS[_$_81a2[1130]](r, m, centerInScreen) : FS[_$_81a2[1128]](r, m);
    if (a) {
      throw new FS[_$_81a2[868]](a);
    }
    if (!d[_$_81a2[900]][_$_81a2[904]]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    }
    if (FS[_$_81a2[1087]](b) || n && FS[_$_81a2[1087]](n)) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1111]]);
    }
    if (r !== d) {
      a = FS[_$_81a2[1107]](d, _$_81a2[1019]);
      if (a) {
        throw new FS[_$_81a2[868]](a);
      }
    }
    try {
      if (FS[_$_81a2[1132]][_$_81a2[1131]]) {
        FS[_$_81a2[1132]][_$_81a2[1131]](callback, name);
      }
    } catch (e) {
      console[_$_81a2[24]](_$_81a2[1133] + callback + _$_81a2[1134] + name + _$_81a2[1135] + e[_$_81a2[453]]);
    }
    FS[_$_81a2[1100]](b);
    try {
      d[_$_81a2[900]][_$_81a2[904]](b, r, m);
    } catch (e) {
      throw e;
    } finally {
      FS[_$_81a2[1099]](b);
    }
    try {
      if (FS[_$_81a2[1132]][_$_81a2[1136]]) {
        FS[_$_81a2[1132]][_$_81a2[1136]](callback, name);
      }
    } catch (e) {
      console[_$_81a2[24]](_$_81a2[1137] + callback + _$_81a2[1134] + name + _$_81a2[1135] + e[_$_81a2[453]]);
    }
  },
  rmdir : function(call) {
    var parts = FS[_$_81a2[987]](call, {
      parent : true
    });
    var column = parts[_$_81a2[866]];
    var tok = PATH[_$_81a2[1077]](call);
    var m = FS[_$_81a2[941]](column, tok);
    var pos = FS[_$_81a2[1130]](column, tok, true);
    if (pos) {
      throw new FS[_$_81a2[868]](pos);
    }
    if (!column[_$_81a2[900]][_$_81a2[906]]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    }
    if (FS[_$_81a2[1087]](m)) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1111]]);
    }
    try {
      if (FS[_$_81a2[1132]][_$_81a2[1138]]) {
        FS[_$_81a2[1132]][_$_81a2[1138]](call);
      }
    } catch (e) {
      console[_$_81a2[24]](_$_81a2[1139] + call + _$_81a2[1135] + e[_$_81a2[453]]);
    }
    column[_$_81a2[900]][_$_81a2[906]](column, tok);
    FS[_$_81a2[1127]](m);
    try {
      if (FS[_$_81a2[1132]][_$_81a2[1140]]) {
        FS[_$_81a2[1132]][_$_81a2[1140]](call);
      }
    } catch (e) {
      console[_$_81a2[24]](_$_81a2[1141] + call + _$_81a2[1135] + e[_$_81a2[453]]);
    }
  },
  readdir : function(callback) {
    var a = FS[_$_81a2[987]](callback, {
      follow : true
    });
    var nodeA = a[_$_81a2[866]];
    if (!nodeA[_$_81a2[900]][_$_81a2[907]]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1109]]);
    }
    return nodeA[_$_81a2[900]][_$_81a2[907]](nodeA);
  },
  unlink : function(row) {
    var thisLevel = FS[_$_81a2[987]](row, {
      parent : true
    });
    var parent = thisLevel[_$_81a2[866]];
    var start = PATH[_$_81a2[1077]](row);
    var header = FS[_$_81a2[941]](parent, start);
    var morph = FS[_$_81a2[1130]](parent, start, false);
    if (morph) {
      throw new FS[_$_81a2[868]](morph);
    }
    if (!parent[_$_81a2[900]][_$_81a2[905]]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    }
    if (FS[_$_81a2[1087]](header)) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1111]]);
    }
    try {
      if (FS[_$_81a2[1132]][_$_81a2[1138]]) {
        FS[_$_81a2[1132]][_$_81a2[1138]](row);
      }
    } catch (e) {
      console[_$_81a2[24]](_$_81a2[1139] + row + _$_81a2[1135] + e[_$_81a2[453]]);
    }
    parent[_$_81a2[900]][_$_81a2[905]](parent, start);
    FS[_$_81a2[1127]](header);
    try {
      if (FS[_$_81a2[1132]][_$_81a2[1140]]) {
        FS[_$_81a2[1132]][_$_81a2[1140]](row);
      }
    } catch (e) {
      console[_$_81a2[24]](_$_81a2[1141] + row + _$_81a2[1135] + e[_$_81a2[453]]);
    }
  },
  readlink : function(callback) {
    var reverseItemData = FS[_$_81a2[987]](callback);
    var reverseItemControlData = reverseItemData[_$_81a2[866]];
    if (!reverseItemControlData) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[939]]);
    }
    if (!reverseItemControlData[_$_81a2[900]][_$_81a2[913]]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
    }
    return PATH[_$_81a2[861]](FS[_$_81a2[1110]](reverseItemControlData[_$_81a2[943]]), reverseItemControlData[_$_81a2[900]][_$_81a2[913]](reverseItemControlData));
  },
  stat : function(value, count) {
    var widgetArr = FS[_$_81a2[987]](value, {
      follow : !count
    });
    var _maskLayer = widgetArr[_$_81a2[866]];
    if (!_maskLayer) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[939]]);
    }
    if (!_maskLayer[_$_81a2[900]][_$_81a2[899]]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    }
    return _maskLayer[_$_81a2[900]][_$_81a2[899]](_maskLayer);
  },
  lstat : function(callback) {
    return FS[_$_81a2[977]](callback, true);
  },
  chmod : function(callback, mode, src) {
    var m_callback;
    if (typeof callback === _$_81a2[105]) {
      var callbackTick = FS[_$_81a2[987]](callback, {
        follow : !src
      });
      m_callback = callbackTick[_$_81a2[866]];
    } else {
      /** @type {number} */
      m_callback = callback;
    }
    if (!m_callback[_$_81a2[900]][_$_81a2[901]]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    }
    m_callback[_$_81a2[900]][_$_81a2[901]](m_callback, {
      mode : mode & 4095 | m_callback[_$_81a2[915]] & ~4095,
      timestamp : Date[_$_81a2[461]]()
    });
  },
  lchmod : function(callback, mode) {
    FS[_$_81a2[992]](callback, mode, true);
  },
  fchmod : function(callback, mode) {
    var callbackTick = FS[_$_81a2[1142]](callback);
    if (!callbackTick) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1143]]);
    }
    FS[_$_81a2[992]](callbackTick[_$_81a2[866]], mode);
  },
  chown : function(gid, uid, cb, path) {
    var proValue;
    if (typeof gid === _$_81a2[105]) {
      var node = FS[_$_81a2[987]](gid, {
        follow : !path
      });
      proValue = node[_$_81a2[866]];
    } else {
      /** @type {number} */
      proValue = gid;
    }
    if (!proValue[_$_81a2[900]][_$_81a2[901]]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    }
    proValue[_$_81a2[900]][_$_81a2[901]](proValue, {
      timestamp : Date[_$_81a2[461]]()
    });
  },
  lchown : function(callback, gid, uid) {
    FS[_$_81a2[1144]](callback, gid, uid, true);
  },
  fchown : function(callback, fd, uid) {
    var callbackTick = FS[_$_81a2[1142]](callback);
    if (!callbackTick) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1143]]);
    }
    FS[_$_81a2[1144]](callbackTick[_$_81a2[866]], fd, uid);
  },
  truncate : function(str, width) {
    if (width < 0) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
    }
    var individual;
    if (typeof str === _$_81a2[105]) {
      var pop = FS[_$_81a2[987]](str, {
        follow : true
      });
      individual = pop[_$_81a2[866]];
    } else {
      /** @type {number} */
      individual = str;
    }
    if (!individual[_$_81a2[900]][_$_81a2[901]]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[897]]);
    }
    if (FS[_$_81a2[916]](individual[_$_81a2[915]])) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1112]]);
    }
    if (!FS[_$_81a2[920]](individual[_$_81a2[915]])) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
    }
    var indContent = FS[_$_81a2[1107]](individual, _$_81a2[1019]);
    if (indContent) {
      throw new FS[_$_81a2[868]](indContent);
    }
    individual[_$_81a2[900]][_$_81a2[901]](individual, {
      size : width,
      timestamp : Date[_$_81a2[461]]()
    });
  },
  ftruncate : function(callback, fd) {
    var callbackTick = FS[_$_81a2[1142]](callback);
    if (!callbackTick) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1143]]);
    }
    if ((callbackTick[_$_81a2[1043]] & 2097155) === 0) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
    }
    FS[_$_81a2[1145]](callbackTick[_$_81a2[866]], fd);
  },
  utime : function(times, value, timestamp) {
    var widgetArr = FS[_$_81a2[987]](times, {
      follow : true
    });
    var _maskLayer = widgetArr[_$_81a2[866]];
    _maskLayer[_$_81a2[900]][_$_81a2[901]](_maskLayer, {
      timestamp : Math[_$_81a2[80]](value, timestamp)
    });
  },
  open : function(b, size, step, number, accessToken) {
    if (b === _$_81a2[4]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[939]]);
    }
    size = typeof size === _$_81a2[105] ? FS[_$_81a2[1146]](size) : size;
    step = typeof step === _$_81a2[13] ? 438 : step;
    if (size & 64) {
      /** @type {number} */
      step = step & 4095 | 32768;
    } else {
      /** @type {number} */
      step = 0;
    }
    var i;
    if (typeof b === _$_81a2[21]) {
      /** @type {string} */
      i = b;
    } else {
      b = PATH[_$_81a2[30]](b);
      try {
        var plugins = FS[_$_81a2[987]](b, {
          follow : !(size & 131072)
        });
        i = plugins[_$_81a2[866]];
      } catch (e) {
      }
    }
    /** @type {boolean} */
    var a = false;
    if (size & 64) {
      if (i) {
        if (size & 128) {
          throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1108]]);
        }
      } else {
        i = FS[_$_81a2[903]](b, step, 0);
        /** @type {boolean} */
        a = true;
      }
    }
    if (!i) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[939]]);
    }
    if (FS[_$_81a2[925]](i[_$_81a2[915]])) {
      /** @type {number} */
      size = size & ~512;
    }
    if (size & 65536 && !FS[_$_81a2[916]](i[_$_81a2[915]])) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1109]]);
    }
    if (!a) {
      var sd = FS[_$_81a2[1147]](i, size);
      if (sd) {
        throw new FS[_$_81a2[868]](sd);
      }
    }
    if (size & 512) {
      FS[_$_81a2[1145]](i, 0);
    }
    /** @type {number} */
    size = size & ~(128 | 512);
    var result = FS[_$_81a2[1148]]({
      node : i,
      path : FS[_$_81a2[1110]](i),
      flags : size,
      seekable : true,
      position : 0,
      stream_ops : i[_$_81a2[863]],
      ungotten : [],
      error : false
    }, number, accessToken);
    if (result[_$_81a2[863]][_$_81a2[51]]) {
      result[_$_81a2[863]][_$_81a2[51]](result);
    }
    if (Neptune[_$_81a2[1149]] && !(size & 1)) {
      if (!FS[_$_81a2[1150]]) {
        FS[_$_81a2[1150]] = {};
      }
      if (!(b in FS[_$_81a2[1150]])) {
        /** @type {number} */
        FS[_$_81a2[1150]][b] = 1;
        Neptune[_$_81a2[25]](_$_81a2[1151] + b);
      }
    }
    try {
      if (FS[_$_81a2[1132]][_$_81a2[1152]]) {
        /** @type {number} */
        var l = 0;
        if ((size & 2097155) !== 1) {
          /** @type {number} */
          l = l | FS[_$_81a2[1155]][_$_81a2[1154]][_$_81a2[1153]];
        }
        if ((size & 2097155) !== 0) {
          /** @type {number} */
          l = l | FS[_$_81a2[1155]][_$_81a2[1154]][_$_81a2[1156]];
        }
        FS[_$_81a2[1132]][_$_81a2[1152]](b, l);
      }
    } catch (e) {
      console[_$_81a2[24]](_$_81a2[1157] + b + _$_81a2[1158] + e[_$_81a2[453]]);
    }
    return result;
  },
  close : function(closePressed) {
    if (closePressed[_$_81a2[1159]]) {
      /** @type {null} */
      closePressed[_$_81a2[1159]] = null;
    }
    try {
      if (closePressed[_$_81a2[863]][_$_81a2[1160]]) {
        closePressed[_$_81a2[863]][_$_81a2[1160]](closePressed);
      }
    } catch (e) {
      throw e;
    } finally {
      FS[_$_81a2[1161]](closePressed[_$_81a2[882]]);
    }
  },
  llseek : function(fn, filename, tracelevel) {
    if (!fn[_$_81a2[870]] || !fn[_$_81a2[863]][_$_81a2[909]]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1119]]);
    }
    fn[_$_81a2[945]] = fn[_$_81a2[863]][_$_81a2[909]](fn, filename, tracelevel);
    /** @type {!Array} */
    fn[_$_81a2[1162]] = [];
    return fn[_$_81a2[945]];
  },
  read : function(array, i, n, m, f) {
    if (m < 0 || f < 0) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
    }
    if ((array[_$_81a2[1043]] & 2097155) === 1) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1143]]);
    }
    if (FS[_$_81a2[916]](array[_$_81a2[866]][_$_81a2[915]])) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1112]]);
    }
    if (!array[_$_81a2[863]][_$_81a2[27]]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
    }
    /** @type {boolean} */
    var g = true;
    if (typeof f === _$_81a2[13]) {
      f = array[_$_81a2[945]];
      /** @type {boolean} */
      g = false;
    } else {
      if (!array[_$_81a2[870]]) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1119]]);
      }
    }
    var c = array[_$_81a2[863]][_$_81a2[27]](array, i, n, m, f);
    if (!g) {
      array[_$_81a2[945]] += c;
    }
    return c;
  },
  write : function(buf, string, fn, d, c, header) {
    if (d < 0 || c < 0) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
    }
    if ((buf[_$_81a2[1043]] & 2097155) === 0) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1143]]);
    }
    if (FS[_$_81a2[916]](buf[_$_81a2[866]][_$_81a2[915]])) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1112]]);
    }
    if (!buf[_$_81a2[863]][_$_81a2[910]]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
    }
    if (buf[_$_81a2[1043]] & 1024) {
      FS[_$_81a2[909]](buf, 0, 2);
    }
    /** @type {boolean} */
    var f = true;
    if (typeof c === _$_81a2[13]) {
      c = buf[_$_81a2[945]];
      /** @type {boolean} */
      f = false;
    } else {
      if (!buf[_$_81a2[870]]) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1119]]);
      }
    }
    var result = buf[_$_81a2[863]][_$_81a2[910]](buf, string, fn, d, c, header);
    if (!f) {
      buf[_$_81a2[945]] += result;
    }
    try {
      if (buf[_$_81a2[29]] && FS[_$_81a2[1132]][_$_81a2[1163]]) {
        FS[_$_81a2[1132]][_$_81a2[1163]](buf[_$_81a2[29]]);
      }
    } catch (e) {
      console[_$_81a2[24]](_$_81a2[1164] + path + _$_81a2[1135] + e[_$_81a2[453]]);
    }
    return result;
  },
  allocate : function(that, start, length) {
    if (start < 0 || length <= 0) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
    }
    if ((that[_$_81a2[1043]] & 2097155) === 0) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1143]]);
    }
    if (!FS[_$_81a2[920]](that[_$_81a2[866]][_$_81a2[915]]) && !FS[_$_81a2[916]](that[_$_81a2[866]][_$_81a2[915]])) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[867]]);
    }
    if (!that[_$_81a2[863]][_$_81a2[150]]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1165]]);
    }
    that[_$_81a2[863]][_$_81a2[150]](that, start, length);
  },
  mmap : function(filename, object, config, converters, roomTerrain, bulk, bulkUsers) {
    if ((filename[_$_81a2[1043]] & 2097155) === 1) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1105]]);
    }
    if (!filename[_$_81a2[863]][_$_81a2[911]]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[867]]);
    }
    return filename[_$_81a2[863]][_$_81a2[911]](filename, object, config, converters, roomTerrain, bulk, bulkUsers);
  },
  msync : function(sinrot, f, ud, na, backParam) {
    if (!sinrot || !sinrot[_$_81a2[863]][_$_81a2[912]]) {
      return 0;
    }
    return sinrot[_$_81a2[863]][_$_81a2[912]](sinrot, f, ud, na, backParam);
  },
  munmap : function(mem) {
    return 0;
  },
  ioctl : function(uvx1, uvy1, a) {
    if (!uvx1[_$_81a2[863]][_$_81a2[1166]]) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1167]]);
    }
    return uvx1[_$_81a2[863]][_$_81a2[1166]](uvx1, uvy1, a);
  },
  readFile : function(readArg, onSuccess) {
    onSuccess = onSuccess || {};
    onSuccess[_$_81a2[1043]] = onSuccess[_$_81a2[1043]] || _$_81a2[885];
    onSuccess[_$_81a2[1168]] = onSuccess[_$_81a2[1168]] || _$_81a2[48];
    if (onSuccess[_$_81a2[1168]] !== _$_81a2[156] && onSuccess[_$_81a2[1168]] !== _$_81a2[48]) {
      throw new Error(_$_81a2[1169] + onSuccess[_$_81a2[1168]] + _$_81a2[1170]);
    }
    var data;
    var artistTrack = FS[_$_81a2[51]](readArg, onSuccess[_$_81a2[1043]]);
    var g = FS[_$_81a2[977]](readArg);
    var n = g[_$_81a2[339]];
    /** @type {!Uint8Array} */
    var buffer = new Uint8Array(n);
    FS[_$_81a2[27]](artistTrack, buffer, 0, n, 0);
    if (onSuccess[_$_81a2[1168]] === _$_81a2[156]) {
      data = UTF8ArrayToString(buffer, 0);
    } else {
      if (onSuccess[_$_81a2[1168]] === _$_81a2[48]) {
        /** @type {!Uint8Array} */
        data = buffer;
      }
    }
    FS[_$_81a2[1160]](artistTrack);
    return data;
  },
  writeFile : function(text, string, data) {
    data = data || {};
    data[_$_81a2[1043]] = data[_$_81a2[1043]] || _$_81a2[1019];
    data[_$_81a2[1168]] = data[_$_81a2[1168]] || _$_81a2[156];
    if (data[_$_81a2[1168]] !== _$_81a2[156] && data[_$_81a2[1168]] !== _$_81a2[48]) {
      throw new Error(_$_81a2[1169] + data[_$_81a2[1168]] + _$_81a2[1170]);
    }
    var iline = FS[_$_81a2[51]](text, data[_$_81a2[1043]], data[_$_81a2[915]]);
    if (data[_$_81a2[1168]] === _$_81a2[156]) {
      /** @type {!Uint8Array} */
      var u8array = new Uint8Array(lengthBytesUTF8(string) + 1);
      var numBytesWritten = stringToUTF8Array(string, u8array, 0, u8array[_$_81a2[36]]);
      FS[_$_81a2[910]](iline, u8array, 0, numBytesWritten, 0, data[_$_81a2[1171]]);
    } else {
      if (data[_$_81a2[1168]] === _$_81a2[48]) {
        FS[_$_81a2[910]](iline, string, 0, string[_$_81a2[36]], 0, data[_$_81a2[1171]]);
      }
    }
    FS[_$_81a2[1160]](iline);
  },
  cwd : function() {
    return FS[_$_81a2[1172]];
  },
  chdir : function(d) {
    var momentified = FS[_$_81a2[987]](d, {
      follow : true
    });
    if (momentified[_$_81a2[866]] === null) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[939]]);
    }
    if (!FS[_$_81a2[916]](momentified[_$_81a2[866]][_$_81a2[915]])) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1109]]);
    }
    var a = FS[_$_81a2[1107]](momentified[_$_81a2[866]], _$_81a2[1106]);
    if (a) {
      throw new FS[_$_81a2[868]](a);
    }
    FS[_$_81a2[1172]] = momentified[_$_81a2[29]];
  },
  createDefaultDirectories : function() {
    FS[_$_81a2[990]](_$_81a2[1173]);
    FS[_$_81a2[990]](_$_81a2[1174]);
    FS[_$_81a2[990]](_$_81a2[1175]);
  },
  createDefaultDevices : function() {
    FS[_$_81a2[990]](_$_81a2[1176]);
    FS[_$_81a2[864]](FS[_$_81a2[1177]](1, 3), {
      read : function() {
        return 0;
      },
      write : function(value, _, val, data, cb_) {
        return data;
      }
    });
    FS[_$_81a2[1179]](_$_81a2[1178], FS[_$_81a2[1177]](1, 3));
    TTY[_$_81a2[1181]](FS[_$_81a2[1177]](5, 0), TTY[_$_81a2[1180]]);
    TTY[_$_81a2[1181]](FS[_$_81a2[1177]](6, 0), TTY[_$_81a2[1182]]);
    FS[_$_81a2[1179]](_$_81a2[1183], FS[_$_81a2[1177]](5, 0));
    FS[_$_81a2[1179]](_$_81a2[1184], FS[_$_81a2[1177]](6, 0));
    var valuesFromModule;
    if (typeof crypto !== _$_81a2[13]) {
      /** @type {!Uint8Array} */
      var duration64str = new Uint8Array(1);
      /**
       * @return {?}
       */
      valuesFromModule = function() {
        crypto[_$_81a2[1185]](duration64str);
        return duration64str[0];
      };
    } else {
      if (ENVIRONMENT_IS_NODE) {
        /**
         * @return {?}
         */
        valuesFromModule = function() {
          return require(_$_81a2[1187])[_$_81a2[1186]](1)[0];
        };
      } else {
        /**
         * @return {?}
         */
        valuesFromModule = function() {
          return Math[_$_81a2[1188]]() * 256 | 0;
        };
      }
    }
    FS[_$_81a2[1189]](_$_81a2[1176], _$_81a2[1188], valuesFromModule);
    FS[_$_81a2[1189]](_$_81a2[1176], _$_81a2[1190], valuesFromModule);
    FS[_$_81a2[990]](_$_81a2[1191]);
    FS[_$_81a2[990]](_$_81a2[1192]);
  },
  createSpecialDirectories : function() {
    FS[_$_81a2[990]](_$_81a2[1193]);
    FS[_$_81a2[990]](_$_81a2[1194]);
    FS[_$_81a2[990]](_$_81a2[1195]);
    FS[_$_81a2[954]]({
      mount : function() {
        var $ = FS[_$_81a2[894]](_$_81a2[1194], _$_81a2[882], 16384 | 511, 73);
        $[_$_81a2[900]] = {
          lookup : function(migrations, version) {
            /** @type {number} */
            var magnifier = +version;
            var $magnifier = FS[_$_81a2[1142]](magnifier);
            if (!$magnifier) {
              throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1143]]);
            }
            var obj = {
              parent : null,
              mount : {
                mountpoint : _$_81a2[1196]
              },
              node_ops : {
                readlink : function() {
                  return $magnifier[_$_81a2[29]];
                }
              }
            };
            obj[_$_81a2[943]] = obj;
            return obj;
          }
        };
        return $;
      }
    }, {}, _$_81a2[1195]);
  },
  createStandardStreams : function() {
    if (Neptune[_$_81a2[883]]) {
      FS[_$_81a2[1189]](_$_81a2[1176], _$_81a2[883], Neptune[_$_81a2[883]]);
    } else {
      FS[_$_81a2[908]](_$_81a2[1183], _$_81a2[884]);
    }
    if (Neptune[_$_81a2[1197]]) {
      FS[_$_81a2[1189]](_$_81a2[1176], _$_81a2[1197], null, Neptune[_$_81a2[1197]]);
    } else {
      FS[_$_81a2[908]](_$_81a2[1183], _$_81a2[1198]);
    }
    if (Neptune[_$_81a2[1199]]) {
      FS[_$_81a2[1189]](_$_81a2[1176], _$_81a2[1199], null, Neptune[_$_81a2[1199]]);
    } else {
      FS[_$_81a2[908]](_$_81a2[1184], _$_81a2[1200]);
    }
    var b = FS[_$_81a2[51]](_$_81a2[884], _$_81a2[885]);
    assert(b[_$_81a2[882]] === 0, _$_81a2[1201] + b[_$_81a2[882]] + _$_81a2[188]);
    var c = FS[_$_81a2[51]](_$_81a2[1198], _$_81a2[1019]);
    assert(c[_$_81a2[882]] === 1, _$_81a2[1202] + c[_$_81a2[882]] + _$_81a2[188]);
    var a = FS[_$_81a2[51]](_$_81a2[1200], _$_81a2[1019]);
    assert(a[_$_81a2[882]] === 2, _$_81a2[1203] + a[_$_81a2[882]] + _$_81a2[188]);
  },
  ensureErrnoError : function() {
    if (FS[_$_81a2[868]]) {
      return;
    }
    /**
     * @param {?} op
     * @param {?} callback
     * @return {undefined}
     */
    FS[_$_81a2[868]] = function op(op, callback) {
      this[_$_81a2[866]] = callback;
      /**
       * @param {?} a
       * @return {undefined}
       */
      this[_$_81a2[1204]] = function(a) {
        this[_$_81a2[302]] = a;
        var newPosition;
        for (newPosition in ERRNO_CODES) {
          if (ERRNO_CODES[newPosition] === a) {
            /** @type {string} */
            this[_$_81a2[1015]] = newPosition;
            break;
          }
        }
      };
      this[_$_81a2[1204]](op);
      this[_$_81a2[453]] = ERRNO_MESSAGES[op];
    };
    /** @type {!Error} */
    FS[_$_81a2[868]][_$_81a2[92]] = new Error;
    FS[_$_81a2[868]][_$_81a2[92]][_$_81a2[1205]] = FS[_$_81a2[868]];
    [ERRNO_CODES[_$_81a2[939]]][_$_81a2[421]](function(name) {
      FS[_$_81a2[940]][name] = new FS[_$_81a2[868]](name);
      FS[_$_81a2[940]][name][_$_81a2[169]] = _$_81a2[1206];
    });
  },
  staticInit : function() {
    FS[_$_81a2[1207]]();
    /** @type {!Array} */
    FS[_$_81a2[1092]] = new Array(4096);
    FS[_$_81a2[954]](MEMFS, {}, _$_81a2[38]);
    FS[_$_81a2[1208]]();
    FS[_$_81a2[1209]]();
    FS[_$_81a2[1210]]();
    FS[_$_81a2[1211]] = {
      "MEMFS" : MEMFS,
      "IDBFS" : IDBFS,
      "NODEFS" : NODEFS,
      "WORKERFS" : WORKERFS
    };
  },
  init : function(flightPhase, navigationLibrary, airportController) {
    assert(!FS[_$_81a2[546]][_$_81a2[1212]], _$_81a2[1213]);
    /** @type {boolean} */
    FS[_$_81a2[546]][_$_81a2[1212]] = true;
    FS[_$_81a2[1207]]();
    Neptune[_$_81a2[883]] = flightPhase || Neptune[_$_81a2[883]];
    Neptune[_$_81a2[1197]] = navigationLibrary || Neptune[_$_81a2[1197]];
    Neptune[_$_81a2[1199]] = airportController || Neptune[_$_81a2[1199]];
    FS[_$_81a2[1214]]();
  },
  quit : function() {
    /** @type {boolean} */
    FS[_$_81a2[546]][_$_81a2[1212]] = false;
    var sendToSumoLogic = Neptune[_$_81a2[1215]];
    if (sendToSumoLogic) {
      sendToSumoLogic(0);
    }
    /** @type {number} */
    var indexLookupKey = 0;
    for (; indexLookupKey < FS[_$_81a2[1114]][_$_81a2[36]]; indexLookupKey++) {
      var currentIndex = FS[_$_81a2[1114]][indexLookupKey];
      if (!currentIndex) {
        continue;
      }
      FS[_$_81a2[1160]](currentIndex);
    }
  },
  getMode : function(options, spec) {
    /** @type {number} */
    var mode = 0;
    if (options) {
      /** @type {number} */
      mode = mode | (292 | 73);
    }
    if (spec) {
      /** @type {number} */
      mode = mode | 146;
    }
    return mode;
  },
  joinPath : function(file, url) {
    var filePath = PATH[_$_81a2[116]][_$_81a2[84]](null, file);
    if (url && filePath[0] == _$_81a2[38]) {
      filePath = filePath[_$_81a2[78]](1);
    }
    return filePath;
  },
  absolutePath : function(relative, base) {
    return PATH[_$_81a2[861]](base, relative);
  },
  standardizePath : function(url) {
    return PATH[_$_81a2[30]](url);
  },
  findObject : function(data, id) {
    var itemIds = FS[_$_81a2[1079]](data, id);
    if (itemIds[_$_81a2[1216]]) {
      return itemIds[_$_81a2[21]];
    } else {
      ___setErrNo(itemIds[_$_81a2[973]]);
      return null;
    }
  },
  analyzePath : function(type, path) {
    try {
      var values = FS[_$_81a2[987]](type, {
        follow : !path
      });
      type = values[_$_81a2[29]];
    } catch (e) {
    }
    var result = {
      isRoot : false,
      exists : false,
      error : 0,
      name : null,
      path : null,
      object : null,
      parentExists : false,
      parentPath : null,
      parentObject : null
    };
    try {
      values = FS[_$_81a2[987]](type, {
        parent : true
      });
      /** @type {boolean} */
      result[_$_81a2[1217]] = true;
      result[_$_81a2[1218]] = values[_$_81a2[29]];
      result[_$_81a2[1219]] = values[_$_81a2[866]];
      result[_$_81a2[428]] = PATH[_$_81a2[1077]](type);
      values = FS[_$_81a2[987]](type, {
        follow : !path
      });
      /** @type {boolean} */
      result[_$_81a2[1216]] = true;
      result[_$_81a2[29]] = values[_$_81a2[29]];
      result[_$_81a2[21]] = values[_$_81a2[866]];
      result[_$_81a2[428]] = values[_$_81a2[866]][_$_81a2[428]];
      /** @type {boolean} */
      result[_$_81a2[1091]] = values[_$_81a2[29]] === _$_81a2[38];
    } catch (metadataMixins) {
      result[_$_81a2[973]] = metadataMixins[_$_81a2[302]];
    }
    return result;
  },
  createFolder : function(parentFolderIdOrPath, callback, time, info) {
    var uploadImageCallback = PATH[_$_81a2[974]](typeof parentFolderIdOrPath === _$_81a2[105] ? parentFolderIdOrPath : FS[_$_81a2[1110]](parentFolderIdOrPath), callback);
    var left = FS[_$_81a2[1013]](time, info);
    return FS[_$_81a2[990]](uploadImageCallback, left);
  },
  createPath : function(route, offset, color, value) {
    route = typeof route === _$_81a2[105] ? route : FS[_$_81a2[1110]](route);
    var g = offset[_$_81a2[2]](_$_81a2[38])[_$_81a2[1009]]();
    for (; g[_$_81a2[36]];) {
      var vec__7882 = g[_$_81a2[976]]();
      if (!vec__7882) {
        continue;
      }
      var path = PATH[_$_81a2[974]](route, vec__7882);
      try {
        FS[_$_81a2[990]](path);
      } catch (e) {
      }
      route = path;
    }
    return path;
  },
  createFile : function(timestamp, size, content, discussionListJSON, syncLocations) {
    var puffsize = PATH[_$_81a2[974]](typeof timestamp === _$_81a2[105] ? timestamp : FS[_$_81a2[1110]](timestamp), size);
    var discussionList = FS[_$_81a2[1013]](discussionListJSON, syncLocations);
    return FS[_$_81a2[1220]](puffsize, discussionList);
  },
  createDataFile : function(val, fn, data, dir, pages, pageExtraInfos) {
    var value = fn ? PATH[_$_81a2[974]](typeof val === _$_81a2[105] ? val : FS[_$_81a2[1110]](val), fn) : val;
    var filename = FS[_$_81a2[1013]](dir, pages);
    var ast = FS[_$_81a2[1220]](value, filename);
    if (data) {
      if (typeof data === _$_81a2[105]) {
        /** @type {!Array} */
        var copy = new Array(data[_$_81a2[36]]);
        /** @type {number} */
        var key = 0;
        var result = data[_$_81a2[36]];
        for (; key < result; ++key) {
          copy[key] = data[_$_81a2[159]](key);
        }
        /** @type {!Array} */
        data = copy;
      }
      FS[_$_81a2[992]](ast, filename | 146);
      var ret = FS[_$_81a2[51]](ast, _$_81a2[1019]);
      FS[_$_81a2[910]](ret, data, 0, data[_$_81a2[36]], 0, pageExtraInfos);
      FS[_$_81a2[1160]](ret);
      FS[_$_81a2[992]](ast, filename);
    }
    return ast;
  },
  createDevice : function(type, driver, callback, cb) {
    var p = PATH[_$_81a2[974]](typeof type === _$_81a2[105] ? type : FS[_$_81a2[1110]](type), driver);
    var GET_AUTH_URL_TIMEOUT = FS[_$_81a2[1013]](!!callback, !!cb);
    if (!FS[_$_81a2[1189]][_$_81a2[1221]]) {
      /** @type {number} */
      FS[_$_81a2[1189]][_$_81a2[1221]] = 64;
    }
    var artistTrack = FS[_$_81a2[1177]](FS[_$_81a2[1189]][_$_81a2[1221]]++, 0);
    FS[_$_81a2[864]](artistTrack, {
      open : function(footerButtons) {
        /** @type {boolean} */
        footerButtons[_$_81a2[870]] = false;
      },
      close : function(hideDisplay) {
        if (cb && cb[_$_81a2[33]] && cb[_$_81a2[33]][_$_81a2[36]]) {
          cb(10);
        }
      },
      read : function(characteristicUUID, data, service, i, options) {
        /** @type {number} */
        var a = 0;
        /** @type {number} */
        var _params = 0;
        for (; _params < i; _params++) {
          var b;
          try {
            b = callback();
          } catch (e) {
            throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[875]]);
          }
          if (b === undefined && a === 0) {
            throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[876]]);
          }
          if (b === null || b === undefined) {
            break;
          }
          a++;
          data[service + _params] = b;
        }
        if (a) {
          characteristicUUID[_$_81a2[866]][_$_81a2[877]] = Date[_$_81a2[461]]();
        }
        return a;
      },
      write : function(characteristicUUID, data, _, r, sections) {
        /** @type {number} */
        var p = 0;
        for (; p < r; p++) {
          try {
            cb(data[_ + p]);
          } catch (e) {
            throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[875]]);
          }
        }
        if (r) {
          characteristicUUID[_$_81a2[866]][_$_81a2[877]] = Date[_$_81a2[461]]();
        }
        return p;
      }
    });
    return FS[_$_81a2[1179]](p, GET_AUTH_URL_TIMEOUT, artistTrack);
  },
  createLink : function(theLink, cur_target, cur_class, cur_title, additionalValues) {
    var artistTrack = PATH[_$_81a2[974]](typeof theLink === _$_81a2[105] ? theLink : FS[_$_81a2[1110]](theLink), cur_target);
    return FS[_$_81a2[908]](cur_class, artistTrack);
  },
  forceLoadFile : function(a) {
    if (a[_$_81a2[1222]] || a[_$_81a2[1223]] || a[_$_81a2[924]] || a[_$_81a2[919]]) {
      return true;
    }
    /** @type {boolean} */
    var b = true;
    if (typeof XMLHttpRequest !== _$_81a2[13]) {
      throw new Error(_$_81a2[1224]);
    } else {
      if (Neptune[_$_81a2[27]]) {
        try {
          a[_$_81a2[919]] = intArrayFromString(Neptune[_$_81a2[27]](a[_$_81a2[1225]]), true);
          a[_$_81a2[922]] = a[_$_81a2[919]][_$_81a2[36]];
        } catch (e) {
          /** @type {boolean} */
          b = false;
        }
      } else {
        throw new Error(_$_81a2[1226]);
      }
    }
    if (!b) {
      ___setErrNo(ERRNO_CODES[_$_81a2[875]]);
    }
    return b;
  },
  createLazyFile : function(elem, type, loc, platform, color) {
    /**
     * @return {undefined}
     */
    function f() {
      /** @type {boolean} */
      this[_$_81a2[1227]] = false;
      /** @type {!Array} */
      this[_$_81a2[1228]] = [];
    }
    /**
     * @param {number} i
     * @return {?}
     */
    f[_$_81a2[92]][_$_81a2[994]] = function parseMarkdownBlock(i) {
      if (i > this[_$_81a2[36]] - 1 || i < 0) {
        return undefined;
      }
      /** @type {number} */
      var index = i % this[_$_81a2[1229]];
      /** @type {number} */
      var edecl1 = i / this[_$_81a2[1229]] | 0;
      return this[_$_81a2[1230]](edecl1)[index];
    };
    /**
     * @param {?} a
     * @return {undefined}
     */
    f[_$_81a2[92]][_$_81a2[1231]] = function i(a) {
      this[_$_81a2[1230]] = a;
    };
    /**
     * @return {undefined}
     */
    f[_$_81a2[92]][_$_81a2[1232]] = function parse() {
      /** @type {!XMLHttpRequest} */
      var GL_ARRAY_SETTER = new XMLHttpRequest;
      GL_ARRAY_SETTER[_$_81a2[51]](_$_81a2[1233], loc, false);
      GL_ARRAY_SETTER[_$_81a2[52]](null);
      if (!(GL_ARRAY_SETTER[_$_81a2[59]] >= 200 && GL_ARRAY_SETTER[_$_81a2[59]] < 300 || GL_ARRAY_SETTER[_$_81a2[59]] === 304)) {
        throw new Error(_$_81a2[1234] + loc + _$_81a2[1235] + GL_ARRAY_SETTER[_$_81a2[59]]);
      }
      /** @type {number} */
      var trackInfoUrl = Number(GL_ARRAY_SETTER[_$_81a2[1237]](_$_81a2[1236]));
      var f;
      var d = (f = GL_ARRAY_SETTER[_$_81a2[1237]](_$_81a2[1238])) && f === _$_81a2[1239];
      var helpflag = (f = GL_ARRAY_SETTER[_$_81a2[1237]](_$_81a2[1240])) && f === _$_81a2[1241];
      /** @type {number} */
      var lastTrackInfoUrl = 1024 * 1024;
      if (!d) {
        /** @type {number} */
        lastTrackInfoUrl = trackInfoUrl;
      }
      /**
       * @param {number} count
       * @param {number} offset
       * @return {?}
       */
      var join = function(count, offset) {
        if (count > offset) {
          throw new Error(_$_81a2[1242] + count + _$_81a2[1243] + offset + _$_81a2[1244]);
        }
        if (offset > trackInfoUrl - 1) {
          throw new Error(_$_81a2[1245] + trackInfoUrl + _$_81a2[1246]);
        }
        /** @type {!XMLHttpRequest} */
        var second = new XMLHttpRequest;
        second[_$_81a2[51]](_$_81a2[50], loc, false);
        if (trackInfoUrl !== lastTrackInfoUrl) {
          second[_$_81a2[1250]](_$_81a2[1247], _$_81a2[1248] + count + _$_81a2[1249] + offset);
        }
        if (typeof Uint8Array != _$_81a2[13]) {
          second[_$_81a2[54]] = _$_81a2[55];
        }
        if (second[_$_81a2[1251]]) {
          second[_$_81a2[1251]](_$_81a2[1252]);
        }
        second[_$_81a2[52]](null);
        if (!(second[_$_81a2[59]] >= 200 && second[_$_81a2[59]] < 300 || second[_$_81a2[59]] === 304)) {
          throw new Error(_$_81a2[1234] + loc + _$_81a2[1235] + second[_$_81a2[59]]);
        }
        if (second[_$_81a2[56]] !== undefined) {
          return new Uint8Array(second[_$_81a2[56]] || []);
        } else {
          return intArrayFromString(second[_$_81a2[53]] || _$_81a2[4], true);
        }
      };
      var _Event_prototype = this;
      _Event_prototype[_$_81a2[1231]](function(name) {
        /** @type {number} */
        var result = name * lastTrackInfoUrl;
        /** @type {number} */
        var from = (name + 1) * lastTrackInfoUrl - 1;
        from = Math[_$_81a2[81]](from, trackInfoUrl - 1);
        if (typeof _Event_prototype[_$_81a2[1228]][name] === _$_81a2[13]) {
          _Event_prototype[_$_81a2[1228]][name] = join(result, from);
        }
        if (typeof _Event_prototype[_$_81a2[1228]][name] === _$_81a2[13]) {
          throw new Error(_$_81a2[1253]);
        }
        return _Event_prototype[_$_81a2[1228]][name];
      });
      if (helpflag || !trackInfoUrl) {
        /** @type {number} */
        lastTrackInfoUrl = trackInfoUrl = 1;
        trackInfoUrl = this[_$_81a2[1230]](0)[_$_81a2[36]];
        lastTrackInfoUrl = trackInfoUrl;
        console[_$_81a2[24]](_$_81a2[1254]);
      }
      this[_$_81a2[1255]] = trackInfoUrl;
      this[_$_81a2[1256]] = lastTrackInfoUrl;
      /** @type {boolean} */
      this[_$_81a2[1227]] = true;
    };
    if (typeof XMLHttpRequest !== _$_81a2[13]) {
      if (!ENVIRONMENT_IS_WORKER) {
        throw _$_81a2[1257];
      }
      var obj = new f;
      Object[_$_81a2[1098]](obj, {
        length : {
          get : function() {
            if (!this[_$_81a2[1227]]) {
              this[_$_81a2[1232]]();
            }
            return this[_$_81a2[1255]];
          }
        },
        chunkSize : {
          get : function() {
            if (!this[_$_81a2[1227]]) {
              this[_$_81a2[1232]]();
            }
            return this[_$_81a2[1256]];
          }
        }
      });
      var params = {
        isDevice : false,
        contents : obj
      };
    } else {
      params = {
        isDevice : false,
        url : loc
      };
    }
    var target = FS[_$_81a2[1258]](elem, type, params, platform, color);
    if (params[_$_81a2[919]]) {
      target[_$_81a2[919]] = params[_$_81a2[919]];
    } else {
      if (params[_$_81a2[1225]]) {
        /** @type {null} */
        target[_$_81a2[919]] = null;
        target[_$_81a2[1225]] = params[_$_81a2[1225]];
      }
    }
    Object[_$_81a2[1098]](target, {
      usedBytes : {
        get : function() {
          return this[_$_81a2[919]][_$_81a2[36]];
        }
      }
    });
    var style = {};
    var c = Object[_$_81a2[998]](target[_$_81a2[863]]);
    c[_$_81a2[421]](function(name) {
      var deferred = target[_$_81a2[863]][name];
      /**
       * @return {?}
       */
      style[name] = function b() {
        if (!FS[_$_81a2[1259]](target)) {
          throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[875]]);
        }
        return deferred[_$_81a2[84]](null, arguments);
      };
    });
    /**
     * @param {?} event
     * @param {?} a
     * @param {number} k
     * @param {?} n
     * @param {number} x
     * @return {?}
     */
    style[_$_81a2[27]] = function bind(event, a, k, n, x) {
      if (!FS[_$_81a2[1259]](target)) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[875]]);
      }
      var pos = event[_$_81a2[866]][_$_81a2[919]];
      if (x >= pos[_$_81a2[36]]) {
        return 0;
      }
      var value = Math[_$_81a2[81]](pos[_$_81a2[36]] - x, n);
      assert(value >= 0);
      if (pos[_$_81a2[41]]) {
        /** @type {number} */
        var j = 0;
        for (; j < value; j++) {
          a[k + j] = pos[x + j];
        }
      } else {
        /** @type {number} */
        j = 0;
        for (; j < value; j++) {
          a[k + j] = pos[_$_81a2[994]](x + j);
        }
      }
      return value;
    };
    target[_$_81a2[863]] = style;
    return target;
  },
  createPreloadedFile : function(value, name, m, b, problemPath, callback, constitutor, contextHint, to_commit, refresh) {
    /**
     * @param {?} message
     * @return {undefined}
     */
    function onMessage(message) {
      /**
       * @param {?} data
       * @return {undefined}
       */
      function onmessage(data) {
        if (refresh) {
          refresh();
        }
        if (!contextHint) {
          FS[_$_81a2[1261]](value, name, data, b, problemPath, to_commit);
        }
        if (callback) {
          callback();
        }
        removeRunDependency(QueryLanguageComponent);
      }
      /** @type {boolean} */
      var o = false;
      Neptune[_$_81a2[482]][_$_81a2[421]](function(options) {
        if (o) {
          return;
        }
        if (options[_$_81a2[493]](data)) {
          options[_$_81a2[494]](message, data, onmessage, function() {
            if (constitutor) {
              constitutor();
            }
            removeRunDependency(QueryLanguageComponent);
          });
          /** @type {boolean} */
          o = true;
        }
      });
      if (!o) {
        onmessage(message);
      }
    }
    Browser[_$_81a2[546]]();
    var data = name ? PATH[_$_81a2[861]](PATH[_$_81a2[974]](value, name)) : value;
    var QueryLanguageComponent = getUniqueRunDependency(_$_81a2[1260] + data);
    addRunDependency(QueryLanguageComponent);
    if (typeof m == _$_81a2[105]) {
      Browser[_$_81a2[1262]](m, function(e) {
        onMessage(e);
      }, constitutor);
    } else {
      onMessage(m);
    }
  },
  indexedDB : function() {
    return window[_$_81a2[948]] || window[_$_81a2[949]] || window[_$_81a2[950]] || window[_$_81a2[951]];
  },
  DB_NAME : function() {
    return _$_81a2[1263] + window[_$_81a2[1265]][_$_81a2[1264]];
  },
  DB_VERSION : 20,
  DB_STORE_NAME : _$_81a2[953],
  saveFilesToDB : function(elem, fn, b) {
    fn = fn || function() {
    };
    b = b || function() {
    };
    var a = FS[_$_81a2[948]]();
    try {
      var d = a[_$_81a2[51]](FS[_$_81a2[1266]](), FS[_$_81a2[959]]);
    } catch (mediaLoaded) {
      return b(mediaLoaded);
    }
    /**
     * @return {undefined}
     */
    d[_$_81a2[961]] = function g() {
      console[_$_81a2[24]](_$_81a2[1267]);
      var firstLineData = d[_$_81a2[962]];
      firstLineData[_$_81a2[969]](FS[_$_81a2[965]]);
    };
    /**
     * @return {undefined}
     */
    d[_$_81a2[972]] = function showAuthenticate() {
      /**
       * @return {undefined}
       */
      function filter() {
        if (i == 0) {
          fn();
        } else {
          b();
        }
      }
      var firstLineData = d[_$_81a2[962]];
      var transformScratch = firstLineData[_$_81a2[964]]([FS[_$_81a2[965]]], _$_81a2[1E3]);
      var webshims = transformScratch[_$_81a2[968]](FS[_$_81a2[965]]);
      /** @type {number} */
      var pod_ = 0;
      /** @type {number} */
      var i = 0;
      var id = elem[_$_81a2[36]];
      elem[_$_81a2[421]](function(a) {
        var b = webshims[_$_81a2[995]](FS[_$_81a2[1079]](a)[_$_81a2[21]][_$_81a2[919]], a);
        /**
         * @return {undefined}
         */
        b[_$_81a2[972]] = function onClicked() {
          pod_++;
          if (pod_ + i == id) {
            filter();
          }
        };
        /**
         * @return {undefined}
         */
        b[_$_81a2[60]] = function onClicked() {
          i++;
          if (pod_ + i == id) {
            filter();
          }
        };
      });
      transformScratch[_$_81a2[60]] = b;
    };
    /** @type {!Function} */
    d[_$_81a2[60]] = b;
  },
  loadFilesFromDB : function(conditions, op, b) {
    op = op || function() {
    };
    b = b || function() {
    };
    var a = FS[_$_81a2[948]]();
    try {
      var data = a[_$_81a2[51]](FS[_$_81a2[1266]](), FS[_$_81a2[959]]);
    } catch (mediaLoaded) {
      return b(mediaLoaded);
    }
    /** @type {!Function} */
    data[_$_81a2[961]] = b;
    /**
     * @return {undefined}
     */
    data[_$_81a2[972]] = function setup() {
      /**
       * @return {undefined}
       */
      function i() {
        if (px == 0) {
          op();
        } else {
          b();
        }
      }
      var passid = data[_$_81a2[962]];
      try {
        var transformScratch = passid[_$_81a2[964]]([FS[_$_81a2[965]]], _$_81a2[979]);
      } catch (mediaLoaded) {
        b(mediaLoaded);
        return;
      }
      var controller = transformScratch[_$_81a2[968]](FS[_$_81a2[965]]);
      /** @type {number} */
      var floated = 0;
      /** @type {number} */
      var px = 0;
      var item = conditions[_$_81a2[36]];
      conditions[_$_81a2[421]](function(d) {
        var momentified = controller[_$_81a2[994]](d);
        /**
         * @return {undefined}
         */
        momentified[_$_81a2[972]] = function get() {
          if (FS[_$_81a2[1079]](d)[_$_81a2[1216]]) {
            FS[_$_81a2[905]](d);
          }
          FS[_$_81a2[1261]](PATH[_$_81a2[1076]](d), PATH[_$_81a2[1077]](d), momentified[_$_81a2[962]], true, true, true);
          floated++;
          if (floated + px == item) {
            i();
          }
        };
        /**
         * @return {undefined}
         */
        momentified[_$_81a2[60]] = function get() {
          px++;
          if (floated + px == item) {
            i();
          }
        };
      });
      transformScratch[_$_81a2[60]] = b;
    };
    /** @type {!Function} */
    data[_$_81a2[60]] = b;
  }
};
var SYSCALLS = {
  DEFAULT_POLLMASK : 5,
  mappings : {},
  umask : 511,
  calculateAt : function(attributeStyles, d) {
    if (d[0] !== _$_81a2[38]) {
      var a;
      if (attributeStyles === -100) {
        a = FS[_$_81a2[859]]();
      } else {
        var attr = FS[_$_81a2[1142]](attributeStyles);
        if (!attr) {
          throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1143]]);
        }
        a = attr[_$_81a2[29]];
      }
      d = PATH[_$_81a2[974]](a, d);
    }
    return d;
  },
  doStat : function(callback, img, src) {
    try {
      var value = callback(img);
    } catch (e) {
      if (e && e[_$_81a2[866]] && PATH[_$_81a2[30]](img) !== PATH[_$_81a2[30]](FS[_$_81a2[1110]](e[_$_81a2[866]]))) {
        return -ERRNO_CODES[_$_81a2[1109]];
      }
      throw e;
    }
    HEAP32[src >> 2] = value[_$_81a2[928]];
    /** @type {number} */
    HEAP32[src + 4 >> 2] = 0;
    HEAP32[src + 8 >> 2] = value[_$_81a2[929]];
    HEAP32[src + 12 >> 2] = value[_$_81a2[915]];
    HEAP32[src + 16 >> 2] = value[_$_81a2[930]];
    HEAP32[src + 20 >> 2] = value[_$_81a2[931]];
    HEAP32[src + 24 >> 2] = value[_$_81a2[932]];
    HEAP32[src + 28 >> 2] = value[_$_81a2[865]];
    /** @type {number} */
    HEAP32[src + 32 >> 2] = 0;
    HEAP32[src + 36 >> 2] = value[_$_81a2[339]];
    /** @type {number} */
    HEAP32[src + 40 >> 2] = 4096;
    HEAP32[src + 44 >> 2] = value[_$_81a2[937]];
    /** @type {number} */
    HEAP32[src + 48 >> 2] = value[_$_81a2[933]][_$_81a2[677]]() / 1E3 | 0;
    /** @type {number} */
    HEAP32[src + 52 >> 2] = 0;
    /** @type {number} */
    HEAP32[src + 56 >> 2] = value[_$_81a2[934]][_$_81a2[677]]() / 1E3 | 0;
    /** @type {number} */
    HEAP32[src + 60 >> 2] = 0;
    /** @type {number} */
    HEAP32[src + 64 >> 2] = value[_$_81a2[935]][_$_81a2[677]]() / 1E3 | 0;
    /** @type {number} */
    HEAP32[src + 68 >> 2] = 0;
    HEAP32[src + 72 >> 2] = value[_$_81a2[929]];
    return 0;
  },
  doMsync : function(data, callback, dbName, oplogUrl) {
    /** @type {!Uint8Array} */
    var duration64str = new Uint8Array(HEAPU8[_$_81a2[147]](data, data + dbName));
    FS[_$_81a2[912]](callback, duration64str, 0, dbName, oplogUrl);
  },
  doMkdir : function(where, pathArray) {
    where = PATH[_$_81a2[30]](where);
    if (where[where[_$_81a2[36]] - 1] === _$_81a2[38]) {
      where = where[_$_81a2[78]](0, where[_$_81a2[36]] - 1);
    }
    FS[_$_81a2[990]](where, pathArray, 0);
    return 0;
  },
  doMknod : function(uvx1, uvy1, a) {
    switch(uvy1 & 61440) {
      case 32768:
      case 8192:
      case 24576:
      case 4096:
      case 49152:
        break;
      default:
        return -ERRNO_CODES[_$_81a2[434]];
    }
    FS[_$_81a2[903]](uvx1, uvy1, a);
    return 0;
  },
  doReadlink : function(count, buf, value) {
    if (value <= 0) {
      return -ERRNO_CODES[_$_81a2[434]];
    }
    var string = FS[_$_81a2[913]](count);
    var i = Math[_$_81a2[81]](value, lengthBytesUTF8(string));
    var ch = HEAP8[buf + i];
    stringToUTF8(string, buf, value + 1);
    HEAP8[buf + i] = ch;
    return i;
  },
  doAccess : function(user, target) {
    if (target & ~7) {
      return -ERRNO_CODES[_$_81a2[434]];
    }
    var method;
    var tree = FS[_$_81a2[987]](user, {
      follow : true
    });
    method = tree[_$_81a2[866]];
    var ret = _$_81a2[4];
    if (target & 4) {
      ret = ret + _$_81a2[885];
    }
    if (target & 2) {
      ret = ret + _$_81a2[1019];
    }
    if (target & 1) {
      ret = ret + _$_81a2[1106];
    }
    if (ret && FS[_$_81a2[1107]](method, ret)) {
      return -ERRNO_CODES[_$_81a2[1105]];
    }
    return 0;
  },
  doDup : function(CallAtEnd, a, b) {
    var bRev = FS[_$_81a2[1142]](b);
    if (bRev) {
      FS[_$_81a2[1160]](bRev);
    }
    return FS[_$_81a2[51]](CallAtEnd, a, 0, b, b)[_$_81a2[882]];
  },
  doReadv : function(val, types, handler, capture) {
    /** @type {number} */
    var roundednumber = 0;
    /** @type {number} */
    var tileHeight = 0;
    for (; tileHeight < handler; tileHeight++) {
      var i = HEAP32[types + tileHeight * 8 >> 2];
      var len = HEAP32[types + (tileHeight * 8 + 4) >> 2];
      var k = FS[_$_81a2[27]](val, HEAP8, i, len, capture);
      if (k < 0) {
        return -1;
      }
      roundednumber = roundednumber + k;
      if (k < len) {
        break;
      }
    }
    return roundednumber;
  },
  doWritev : function(millis, shadowXpos, mmCoreLogEnabledDefault, mmCoreLogEnabledConfigName) {
    /** @type {number} */
    var fullLength = 0;
    /** @type {number} */
    var tileHeight = 0;
    for (; tileHeight < mmCoreLogEnabledDefault; tileHeight++) {
      var end = HEAP32[shadowXpos + tileHeight * 8 >> 2];
      var len = HEAP32[shadowXpos + (tileHeight * 8 + 4) >> 2];
      var l = FS[_$_81a2[910]](millis, HEAP8, end, len, mmCoreLogEnabledConfigName);
      if (l < 0) {
        return -1;
      }
      fullLength = fullLength + l;
    }
    return fullLength;
  },
  varargs : 0,
  get : function(do_not_create) {
    SYSCALLS[_$_81a2[1268]] += 4;
    var ret = HEAP32[SYSCALLS[_$_81a2[1268]] - 4 >> 2];
    return ret;
  },
  getStr : function() {
    var ret = Pointer_stringify(SYSCALLS[_$_81a2[994]]());
    return ret;
  },
  getStreamFromFD : function() {
    var a = FS[_$_81a2[1142]](SYSCALLS[_$_81a2[994]]());
    if (!a) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1143]]);
    }
    return a;
  },
  getSocketFromFD : function() {
    var a = SOCKFS[_$_81a2[1269]](SYSCALLS[_$_81a2[994]]());
    if (!a) {
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1143]]);
    }
    return a;
  },
  getSocketAddress : function(shouldUseSoftCeiling) {
    var strPtr = SYSCALLS[_$_81a2[994]]();
    var start = SYSCALLS[_$_81a2[994]]();
    if (shouldUseSoftCeiling && strPtr === 0) {
      return null;
    }
    var childStartView2 = __read_sockaddr(strPtr, start);
    if (childStartView2[_$_81a2[302]]) {
      throw new FS[_$_81a2[868]](childStartView2[_$_81a2[302]]);
    }
    childStartView2[_$_81a2[436]] = DNS[_$_81a2[437]](childStartView2[_$_81a2[436]]) || childStartView2[_$_81a2[436]];
    return childStartView2;
  },
  get64 : function() {
    var low = SYSCALLS[_$_81a2[994]]();
    var a = SYSCALLS[_$_81a2[994]]();
    if (low >= 0) {
      assert(a === 0);
    } else {
      assert(a === -1);
    }
    return low;
  },
  getZero : function() {
    assert(SYSCALLS[_$_81a2[994]]() === 0);
  }
};
/**
 * @param {?} isSlidingUp
 * @param {?} $cont
 * @return {?}
 */
function ___syscall5(isSlidingUp, $cont) {
  SYSCALLS[_$_81a2[1268]] = $cont;
  try {
    var re_pba_css = SYSCALLS[_$_81a2[1270]]();
    var isLocationFreeText = SYSCALLS[_$_81a2[994]]();
    var lat2 = SYSCALLS[_$_81a2[994]]();
    var d = FS[_$_81a2[51]](re_pba_css, isLocationFreeText, lat2);
    return d[_$_81a2[882]];
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @param {?} isSlidingUp
 * @param {?} $cont
 * @return {?}
 */
function ___syscall4(isSlidingUp, $cont) {
  SYSCALLS[_$_81a2[1268]] = $cont;
  try {
    var artistTrack = SYSCALLS[_$_81a2[1271]]();
    var GET_AUTH_URL_TIMEOUT = SYSCALLS[_$_81a2[994]]();
    var numKeysDeleted = SYSCALLS[_$_81a2[994]]();
    return FS[_$_81a2[910]](artistTrack, HEAP8, GET_AUTH_URL_TIMEOUT, numKeysDeleted);
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @param {?} drop_stack
 * @param {?} which
 * @return {?}
 */
function ___syscall6(drop_stack, which) {
  SYSCALLS[_$_81a2[1268]] = which;
  try {
    var artistTrack = SYSCALLS[_$_81a2[1271]]();
    FS[_$_81a2[1160]](artistTrack);
    return 0;
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @return {undefined}
 */
function _gendsrl() {
  Neptune[_$_81a2[25]](_$_81a2[1272]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbc1tl() {
  Neptune[_$_81a2[25]](_$_81a2[1273]);
  abort(-1);
}
/**
 * @param {?} sourceid
 * @param {number} width
 * @param {?} text
 * @param {number} min
 * @return {undefined}
 */
function _emscripten_glUniformMatrix4fv(sourceid, width, text, min) {
  var dataMatrix;
  if (16 * width <= GL[_$_81a2[307]]) {
    dataMatrix = GL[_$_81a2[308]][16 * width - 1];
    /** @type {number} */
    var x = 0;
    for (; x < 16 * width; x = x + 16) {
      dataMatrix[x] = HEAPF32[min + 4 * x >> 2];
      dataMatrix[x + 1] = HEAPF32[min + (4 * x + 4) >> 2];
      dataMatrix[x + 2] = HEAPF32[min + (4 * x + 8) >> 2];
      dataMatrix[x + 3] = HEAPF32[min + (4 * x + 12) >> 2];
      dataMatrix[x + 4] = HEAPF32[min + (4 * x + 16) >> 2];
      dataMatrix[x + 5] = HEAPF32[min + (4 * x + 20) >> 2];
      dataMatrix[x + 6] = HEAPF32[min + (4 * x + 24) >> 2];
      dataMatrix[x + 7] = HEAPF32[min + (4 * x + 28) >> 2];
      dataMatrix[x + 8] = HEAPF32[min + (4 * x + 32) >> 2];
      dataMatrix[x + 9] = HEAPF32[min + (4 * x + 36) >> 2];
      dataMatrix[x + 10] = HEAPF32[min + (4 * x + 40) >> 2];
      dataMatrix[x + 11] = HEAPF32[min + (4 * x + 44) >> 2];
      dataMatrix[x + 12] = HEAPF32[min + (4 * x + 48) >> 2];
      dataMatrix[x + 13] = HEAPF32[min + (4 * x + 52) >> 2];
      dataMatrix[x + 14] = HEAPF32[min + (4 * x + 56) >> 2];
      dataMatrix[x + 15] = HEAPF32[min + (4 * x + 60) >> 2];
    }
  } else {
    dataMatrix = HEAPF32[_$_81a2[147]](min >> 2, min + width * 64 >> 2);
  }
  GLctx[_$_81a2[1274]](GL[_$_81a2[424]][sourceid], !!text, dataMatrix);
}
/**
 * @return {undefined}
 */
function _genjal_out() {
  Neptune[_$_81a2[25]](_$_81a2[1275]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _emscripten_glEnableClientState() {
  Neptune[_$_81a2[25]](_$_81a2[1276]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gendadd() {
  Neptune[_$_81a2[25]](_$_81a2[1277]);
  abort(-1);
}
/**
 * @param {?} uvx1
 * @param {?} uvy1
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {?}
 */
function _eglChooseConfig(uvx1, uvy1, a, b, areMutuallyExclusive) {
  return EGL[_$_81a2[1278]](uvx1, uvy1, a, b, areMutuallyExclusive);
}
/**
 * @param {number} word
 * @param {number} wordVal
 * @param {?} str
 * @param {number} a
 * @return {?}
 */
function _eglQuerySurface(word, wordVal, str, a) {
  if (word != 62E3) {
    EGL[_$_81a2[683]](12296);
    return 0;
  }
  if (wordVal != 62006) {
    EGL[_$_81a2[683]](12301);
    return 0;
  }
  if (!a) {
    EGL[_$_81a2[683]](12300);
    return 0;
  }
  EGL[_$_81a2[683]](12288);
  switch(str) {
    case 12328:
      /** @type {number} */
      HEAP32[a >> 2] = 62002;
      return 1;
    case 12376:
      return 1;
    case 12375:
      HEAP32[a >> 2] = Neptune[_$_81a2[370]][_$_81a2[505]];
      return 1;
    case 12374:
      HEAP32[a >> 2] = Neptune[_$_81a2[370]][_$_81a2[506]];
      return 1;
    case 12432:
      /** @type {number} */
      HEAP32[a >> 2] = -1;
      return 1;
    case 12433:
      /** @type {number} */
      HEAP32[a >> 2] = -1;
      return 1;
    case 12434:
      /** @type {number} */
      HEAP32[a >> 2] = -1;
      return 1;
    case 12422:
      /** @type {number} */
      HEAP32[a >> 2] = 12420;
      return 1;
    case 12441:
      /** @type {number} */
      HEAP32[a >> 2] = 12442;
      return 1;
    case 12435:
      /** @type {number} */
      HEAP32[a >> 2] = 12437;
      return 1;
    case 12416:
    case 12417:
    case 12418:
    case 12419:
      return 1;
    default:
      EGL[_$_81a2[683]](12292);
      return 0;
  }
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _emscripten_glStencilMask(a) {
  GLctx[_$_81a2[1279]](a);
}
/**
 * @param {number} h
 * @param {number} r
 * @return {undefined}
 */
function _glDeleteFramebuffers(h, r) {
  /** @type {number} */
  var d = 0;
  for (; d < h; ++d) {
    var len = HEAP32[r + d * 4 >> 2];
    var funcParent = GL[_$_81a2[1280]][len];
    if (!funcParent) {
      continue;
    }
    GLctx[_$_81a2[1281]](funcParent);
    /** @type {number} */
    funcParent[_$_81a2[428]] = 0;
    /** @type {null} */
    GL[_$_81a2[1280]][len] = null;
  }
}
/**
 * @param {?} commentObj
 * @param {(Object|number)} i
 * @param {!Object} howmany
 * @return {undefined}
 */
function _glDrawArrays(commentObj, i, howmany) {
  GL[_$_81a2[1282]](i + howmany);
  GLctx[_$_81a2[1283]](commentObj, i, howmany);
  GL[_$_81a2[1284]]();
}
/**
 * @return {undefined}
 */
function _genaddu() {
  Neptune[_$_81a2[25]](_$_81a2[1285]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @return {undefined}
 */
function _emscripten_glHint(a, b) {
  GLctx[_$_81a2[1286]](a, b);
}
/**
 * @return {undefined}
 */
function _genbc1fl() {
  Neptune[_$_81a2[25]](_$_81a2[1287]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genc_ngle_d() {
  Neptune[_$_81a2[25]](_$_81a2[1288]);
  abort(-1);
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _glClear(a) {
  GLctx[_$_81a2[1289]](a);
}
/**
 * @return {undefined}
 */
function _genabs_d() {
  Neptune[_$_81a2[25]](_$_81a2[1290]);
  abort(-1);
}
/**
 * @param {?} keyringConnectionId
 * @param {?} siteId
 * @return {undefined}
 */
function _emscripten_glAttachShader(keyringConnectionId, siteId) {
  GLctx[_$_81a2[1291]](GL[_$_81a2[422]][keyringConnectionId], GL[_$_81a2[664]][siteId]);
}
/**
 * @return {undefined}
 */
function _genabs_s() {
  Neptune[_$_81a2[25]](_$_81a2[1292]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genc_ngle_s() {
  Neptune[_$_81a2[25]](_$_81a2[1293]);
  abort(-1);
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} f
 * @param {?} url
 * @param {?} trimDomain
 * @return {undefined}
 */
function _glFramebufferTexture2D(CallAtEnd, a, f, url, trimDomain) {
  GLctx[_$_81a2[1295]](CallAtEnd, a, f, GL[_$_81a2[1294]][url], trimDomain);
}
/**
 * @param {?} statisticName
 * @return {?}
 */
function _glGetString(statisticName) {
  if (GL[_$_81a2[1296]][statisticName]) {
    return GL[_$_81a2[1296]][statisticName];
  }
  var _comp_methods;
  switch(statisticName) {
    case 7936:
    case 7937:
    case 37445:
    case 37446:
      _comp_methods = allocate(intArrayFromString(GLctx[_$_81a2[328]](statisticName)), _$_81a2[69], ALLOC_NORMAL);
      break;
    case 7938:
      var value = GLctx[_$_81a2[328]](GLctx[_$_81a2[1297]]);
      {
        value = _$_81a2[1298] + value + _$_81a2[188];
      }
      _comp_methods = allocate(intArrayFromString(value), _$_81a2[69], ALLOC_NORMAL);
      break;
    case 7939:
      var a = GLctx[_$_81a2[420]]();
      /** @type {!Array} */
      var parsers = [];
      /** @type {number} */
      var key = 0;
      for (; key < a[_$_81a2[36]]; ++key) {
        parsers[_$_81a2[107]](a[key]);
        parsers[_$_81a2[107]](_$_81a2[1299] + a[key]);
      }
      _comp_methods = allocate(intArrayFromString(parsers[_$_81a2[116]](_$_81a2[1300])), _$_81a2[69], ALLOC_NORMAL);
      break;
    case 35724:
      var shaderString = GLctx[_$_81a2[328]](GLctx[_$_81a2[1301]]);
      /** @type {!RegExp} */
      var magnifier = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
      var $magnifier = shaderString[_$_81a2[109]](magnifier);
      if ($magnifier !== null) {
        if ($magnifier[1][_$_81a2[36]] == 3) {
          $magnifier[1] = $magnifier[1] + _$_81a2[1302];
        }
        shaderString = _$_81a2[1303] + $magnifier[1] + _$_81a2[478] + shaderString + _$_81a2[188];
      }
      _comp_methods = allocate(intArrayFromString(shaderString), _$_81a2[69], ALLOC_NORMAL);
      break;
    default:
      GL[_$_81a2[680]](1280);
      return 0;
  }
  GL[_$_81a2[1296]][statisticName] = _comp_methods;
  return _comp_methods;
}
/**
 * @return {undefined}
 */
function _genblezl_out() {
  Neptune[_$_81a2[25]](_$_81a2[1304]);
  abort(-1);
}
/**
 * @param {number} a
 * @param {number} b
 * @param {?} variableNames
 * @param {?} bindingRecords
 * @return {?}
 */
function _eglCreateWindowSurface(a, b, variableNames, bindingRecords) {
  if (a != 62E3) {
    EGL[_$_81a2[683]](12296);
    return 0;
  }
  if (b != 62002) {
    EGL[_$_81a2[683]](12293);
    return 0;
  }
  EGL[_$_81a2[683]](12288);
  return 62006;
}
/**
 * @return {undefined}
 */
function _gendsubu() {
  Neptune[_$_81a2[25]](_$_81a2[1305]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {undefined}
 */
function _emscripten_glVertexAttrib2f(a, b, areMutuallyExclusive) {
  GLctx[_$_81a2[1306]](a, b, areMutuallyExclusive);
}
/**
 * @return {undefined}
 */
function _gensdc1() {
  Neptune[_$_81a2[25]](_$_81a2[1307]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genmul_d() {
  Neptune[_$_81a2[25]](_$_81a2[1308]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genswr() {
  Neptune[_$_81a2[25]](_$_81a2[1309]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genc_ngt_d() {
  Neptune[_$_81a2[25]](_$_81a2[1310]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {undefined}
 */
function _emscripten_glTexParameteri(a, b, areMutuallyExclusive) {
  GLctx[_$_81a2[1311]](a, b, areMutuallyExclusive);
}
/**
 * @param {number} clientHeight
 * @param {number} contentWidth
 * @return {undefined}
 */
function _glGenFramebuffers(clientHeight, contentWidth) {
  /** @type {number} */
  var targetOffsetHeight = 0;
  for (; targetOffsetHeight < clientHeight; ++targetOffsetHeight) {
    var HEAP = GLctx[_$_81a2[1312]]();
    if (!HEAP) {
      GL[_$_81a2[680]](1282);
      for (; targetOffsetHeight < clientHeight;) {
        /** @type {number} */
        HEAP32[contentWidth + targetOffsetHeight++ * 4 >> 2] = 0;
      }
      return;
    }
    var $129 = GL[_$_81a2[369]](GL[_$_81a2[1280]]);
    HEAP[_$_81a2[428]] = $129;
    GL[_$_81a2[1280]][$129] = HEAP;
    HEAP32[contentWidth + targetOffsetHeight * 4 >> 2] = $129;
  }
}
/**
 * @param {?} uvx1
 * @param {?} uvy1
 * @param {number} a
 * @return {undefined}
 */
function _emscripten_glGetTexParameteriv(uvx1, uvy1, a) {
  if (!a) {
    GL[_$_81a2[680]](1281);
    return;
  }
  HEAP32[a >> 2] = GLctx[_$_81a2[681]](uvx1, uvy1);
}
/**
 * @return {undefined}
 */
function _genbne_idle() {
  Neptune[_$_81a2[25]](_$_81a2[1313]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbgez() {
  Neptune[_$_81a2[25]](_$_81a2[1314]);
  abort(-1);
}
/**
 * @param {?} b
 * @param {?} variableNames
 * @return {undefined}
 */
function _emscripten_glSampleCoverage(b, variableNames) {
  GLctx[_$_81a2[1315]](b, !!variableNames);
}
/**
 * @param {number} r0
 * @param {number} r
 * @return {undefined}
 */
function _glDeleteTextures(r0, r) {
  /** @type {number} */
  var b = 0;
  for (; b < r0; b++) {
    var len = HEAP32[r + b * 4 >> 2];
    var funcParent = GL[_$_81a2[1294]][len];
    if (!funcParent) {
      continue;
    }
    GLctx[_$_81a2[1316]](funcParent);
    /** @type {number} */
    funcParent[_$_81a2[428]] = 0;
    /** @type {null} */
    GL[_$_81a2[1294]][len] = null;
  }
}
/**
 * @param {?} from_row
 * @return {undefined}
 */
function _glDisableVertexAttribArray(from_row) {
  var from_row_elem = GL[_$_81a2[326]][_$_81a2[336]][from_row];
  /** @type {boolean} */
  from_row_elem[_$_81a2[338]] = false;
  GLctx[_$_81a2[1317]](from_row);
}
/**
 * @param {?} b
 * @return {?}
 */
function _sysconf(b) {
  switch(b) {
    case 30:
      return PAGE_SIZE;
    case 85:
      /** @type {number} */
      var index = 2 * 1024 * 1024 * 1024 - 65536;
      index = HEAPU8[_$_81a2[36]];
      return index / PAGE_SIZE;
    case 132:
    case 133:
    case 12:
    case 137:
    case 138:
    case 15:
    case 235:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 149:
    case 13:
    case 10:
    case 236:
    case 153:
    case 9:
    case 21:
    case 22:
    case 159:
    case 154:
    case 14:
    case 77:
    case 78:
    case 139:
    case 80:
    case 81:
    case 82:
    case 68:
    case 67:
    case 164:
    case 11:
    case 29:
    case 47:
    case 48:
    case 95:
    case 52:
    case 51:
    case 46:
      return 200809;
    case 79:
      return 0;
    case 27:
    case 246:
    case 127:
    case 128:
    case 23:
    case 24:
    case 160:
    case 161:
    case 181:
    case 182:
    case 242:
    case 183:
    case 184:
    case 243:
    case 244:
    case 245:
    case 165:
    case 178:
    case 179:
    case 49:
    case 50:
    case 168:
    case 169:
    case 175:
    case 170:
    case 171:
    case 172:
    case 97:
    case 76:
    case 32:
    case 173:
    case 35:
      return -1;
    case 176:
    case 177:
    case 7:
    case 155:
    case 8:
    case 157:
    case 125:
    case 126:
    case 92:
    case 93:
    case 129:
    case 130:
    case 131:
    case 94:
    case 91:
      return 1;
    case 74:
    case 60:
    case 69:
    case 70:
    case 4:
      return 1024;
    case 31:
    case 42:
    case 72:
      return 32;
    case 87:
    case 26:
    case 33:
      return 2147483647;
    case 34:
    case 1:
      return 47839;
    case 38:
    case 36:
      return 99;
    case 43:
    case 37:
      return 2048;
    case 0:
      return 2097152;
    case 3:
      return 65536;
    case 28:
      return 32768;
    case 44:
      return 32767;
    case 75:
      return 16384;
    case 39:
      return 1E3;
    case 89:
      return 700;
    case 71:
      return 256;
    case 40:
      return 255;
    case 2:
      return 100;
    case 180:
      return 64;
    case 25:
      return 20;
    case 5:
      return 16;
    case 6:
      return 6;
    case 73:
      return 4;
    case 84:
      {
        if (typeof navigator === _$_81a2[21]) {
          return navigator[_$_81a2[1318]] || 1;
        }
        return 1;
      }
  }
  ___setErrNo(ERRNO_CODES[_$_81a2[434]]);
  return -1;
}
/**
 * @return {?}
 */
function _emscripten_glMatrixMode() {
  throw _$_81a2[1319];
}
/**
 * @return {undefined}
 */
function _abort() {
  Neptune[_$_81a2[1320]]();
}
/**
 * @return {undefined}
 */
function _genandi() {
  Neptune[_$_81a2[25]](_$_81a2[1321]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @return {undefined}
 */
function _emscripten_glPolygonOffset(a, b) {
  GLctx[_$_81a2[1322]](a, b);
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _glDisable(a) {
  GLctx[_$_81a2[1323]](a);
}
/**
 * @param {?} drawtype
 * @return {?}
 */
function _emscripten_glIsBuffer(drawtype) {
  var dali_drawtype = GL[_$_81a2[349]][drawtype];
  if (!dali_drawtype) {
    return 0;
  }
  return GLctx[_$_81a2[1324]](dali_drawtype);
}
/**
 * @return {undefined}
 */
function _genfloor_l_d() {
  Neptune[_$_81a2[25]](_$_81a2[1325]);
  abort(-1);
}
var PTHREAD_SPECIFIC = {};
/**
 * @param {?} key
 * @return {?}
 */
function _pthread_getspecific(key) {
  return PTHREAD_SPECIFIC[key] || 0;
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _glEnable(a) {
  GLctx[_$_81a2[1326]](a);
}
/**
 * @return {undefined}
 */
function _gennor() {
  Neptune[_$_81a2[25]](_$_81a2[1327]);
  abort(-1);
}
/**
 * @param {number} a
 * @param {number} b
 * @return {?}
 */
function _eglDestroySurface(a, b) {
  if (a != 62E3) {
    EGL[_$_81a2[683]](12296);
    return 0;
  }
  if (b != 62006) {
    EGL[_$_81a2[683]](12301);
    return 1;
  }
  if (EGL[_$_81a2[684]] == b) {
    /** @type {number} */
    EGL[_$_81a2[684]] = 0;
  }
  if (EGL[_$_81a2[685]] == b) {
    /** @type {number} */
    EGL[_$_81a2[685]] = 0;
  }
  EGL[_$_81a2[683]](12288);
  return 1;
}
/**
 * @return {undefined}
 */
function _gennop() {
  Neptune[_$_81a2[25]](_$_81a2[1328]);
  abort(-1);
}
/**
 * @param {?} url
 * @param {?} opt_target
 * @param {?} opt_rel
 * @return {undefined}
 */
function _emscripten_glUniform2f(url, opt_target, opt_rel) {
  GLctx[_$_81a2[1329]](GL[_$_81a2[424]][url], opt_target, opt_rel);
}
/**
 * @param {?} transition
 * @param {number} ret
 * @return {?}
 */
function _glGetAttribLocation(transition, ret) {
  transition = GL[_$_81a2[422]][transition];
  ret = Pointer_stringify(ret);
  return GLctx[_$_81a2[1330]](transition, ret);
}
/**
 * @return {undefined}
 */
function _genfloor_l_s() {
  Neptune[_$_81a2[25]](_$_81a2[1331]);
  abort(-1);
}
/**
 * @param {?} url
 * @param {?} opt_target
 * @param {?} opt_rel
 * @return {undefined}
 */
function _emscripten_glUniform2i(url, opt_target, opt_rel) {
  GLctx[_$_81a2[1332]](GL[_$_81a2[424]][url], opt_target, opt_rel);
}
/**
 * @return {undefined}
 */
function _genc_sf_s() {
  Neptune[_$_81a2[25]](_$_81a2[1333]);
  abort(-1);
}
/**
 * @param {number} h
 * @param {number} r
 * @return {undefined}
 */
function _emscripten_glDeleteRenderbuffers(h, r) {
  /** @type {number} */
  var d = 0;
  for (; d < h; d++) {
    var len = HEAP32[r + d * 4 >> 2];
    var funcParent = GL[_$_81a2[654]][len];
    if (!funcParent) {
      continue;
    }
    GLctx[_$_81a2[1334]](funcParent);
    /** @type {number} */
    funcParent[_$_81a2[428]] = 0;
    /** @type {null} */
    GL[_$_81a2[654]][len] = null;
  }
}
/**
 * @return {undefined}
 */
function ___cxa_pure_virtual() {
  /** @type {boolean} */
  ABORT = true;
  throw _$_81a2[1335];
}
/**
 * @param {?} a
 * @param {?} b
 * @return {undefined}
 */
function _emscripten_glDepthRange(a, b) {
  GLctx[_$_81a2[692]](a, b);
}
/**
 * @param {?} port_num
 * @param {number} x
 * @return {undefined}
 */
function _emscripten_glVertexAttrib1fv(port_num, x) {
  GLctx[_$_81a2[1336]](port_num, HEAPF32[x >> 2]);
}
/**
 * @return {undefined}
 */
function _genaddiu() {
  Neptune[_$_81a2[25]](_$_81a2[1337]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @return {undefined}
 */
function _glPolygonOffset(a, b) {
  GLctx[_$_81a2[1322]](a, b);
}
/**
 * @return {undefined}
 */
function _genbc1t_out() {
  Neptune[_$_81a2[25]](_$_81a2[1338]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genxor() {
  Neptune[_$_81a2[25]](_$_81a2[1339]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gensrav() {
  Neptune[_$_81a2[25]](_$_81a2[1340]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genldr() {
  Neptune[_$_81a2[25]](_$_81a2[1341]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {number} dest
 * @param {number} src
 * @return {undefined}
 */
function _emscripten_glGetShaderPrecisionFormat(a, b, dest, src) {
  var gcm = GLctx[_$_81a2[1342]](a, b);
  HEAP32[dest >> 2] = gcm[_$_81a2[1343]];
  HEAP32[dest + 4 >> 2] = gcm[_$_81a2[1344]];
  HEAP32[src >> 2] = gcm[_$_81a2[1345]];
}
/**
 * @return {undefined}
 */
function _genbc1fl_idle() {
  Neptune[_$_81a2[25]](_$_81a2[1346]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genblez_out() {
  Neptune[_$_81a2[25]](_$_81a2[1347]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbgtz() {
  Neptune[_$_81a2[25]](_$_81a2[1348]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gensdl() {
  Neptune[_$_81a2[25]](_$_81a2[1349]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genldl() {
  Neptune[_$_81a2[25]](_$_81a2[1350]);
  abort(-1);
}
/**
 * @param {?} port_num
 * @param {number} x
 * @return {undefined}
 */
function _emscripten_glVertexAttrib3fv(port_num, x) {
  GLctx[_$_81a2[720]](port_num, HEAPF32[x >> 2], HEAPF32[x + 4 >> 2], HEAPF32[x + 8 >> 2]);
}
/**
 * @return {undefined}
 */
function _glFlush() {
  GLctx[_$_81a2[871]]();
}
/**
 * @return {undefined}
 */
function _free_assembler() {
  Neptune[_$_81a2[25]](_$_81a2[1351]);
  abort(-1);
}
/**
 * @param {?} drawtype
 * @return {?}
 */
function _emscripten_glIsFramebuffer(drawtype) {
  var dali_drawtype = GL[_$_81a2[1280]][drawtype];
  if (!dali_drawtype) {
    return 0;
  }
  return GLctx[_$_81a2[1352]](dali_drawtype);
}
/**
 * @param {?} isSlidingUp
 * @param {?} $cont
 * @return {?}
 */
function ___syscall192(isSlidingUp, $cont) {
  SYSCALLS[_$_81a2[1268]] = $cont;
  try {
    var engineDir = SYSCALLS[_$_81a2[994]]();
    var maxLen = SYSCALLS[_$_81a2[994]]();
    var i = SYSCALLS[_$_81a2[994]]();
    var bundlerFlags = SYSCALLS[_$_81a2[994]]();
    var button2 = SYSCALLS[_$_81a2[994]]();
    var height = SYSCALLS[_$_81a2[994]]();
    /** @type {number} */
    height = height << 12;
    var name;
    /** @type {boolean} */
    var allocated = false;
    if (button2 === -1) {
      name = _memalign(PAGE_SIZE, maxLen);
      if (!name) {
        return -ERRNO_CODES[_$_81a2[947]];
      }
      _memset(name, 0, maxLen);
      /** @type {boolean} */
      allocated = true;
    } else {
      var button2Component = FS[_$_81a2[1142]](button2);
      if (!button2Component) {
        return -ERRNO_CODES[_$_81a2[1143]];
      }
      var arr = FS[_$_81a2[911]](button2Component, HEAPU8, engineDir, maxLen, height, i, bundlerFlags);
      name = arr[_$_81a2[344]];
      allocated = arr[_$_81a2[1353]];
    }
    SYSCALLS[_$_81a2[1354]][name] = {
      malloc : name,
      len : maxLen,
      allocated : allocated,
      fd : button2,
      flags : bundlerFlags
    };
    return name;
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @return {undefined}
 */
function _genbgez_out() {
  Neptune[_$_81a2[25]](_$_81a2[1355]);
  abort(-1);
}
/**
 * @param {number} h
 * @param {number} x
 * @param {number} a
 * @param {undefined} b
 * @return {?}
 */
function emscriptenWebGLComputeImageSize(h, x, a, b) {
  /**
   * @param {number} a
   * @param {number} f
   * @return {?}
   */
  function s(a, f) {
    return Math[_$_81a2[214]]((a + f - 1) / f) * f;
  }
  /** @type {number} */
  var w = h * a;
  var res = s(w, b);
  return x <= 0 ? 0 : (x - 1) * res + w;
}
/**
 * @param {?} options
 * @param {!Object} key
 * @param {number} struc_store
 * @param {number} y
 * @param {number} num
 * @param {number} length
 * @return {?}
 */
function emscriptenWebGLGetTexPixelData(options, key, struc_store, y, num, length) {
  var i;
  var firstLine;
  switch(key) {
    case 6406:
    case 6409:
    case 6402:
      /** @type {number} */
      firstLine = 1;
      break;
    case 6410:
      /** @type {number} */
      firstLine = 2;
      break;
    case 6407:
    case 35904:
      /** @type {number} */
      firstLine = 3;
      break;
    case 6408:
    case 35906:
      /** @type {number} */
      firstLine = 4;
      break;
    default:
      GL[_$_81a2[680]](1280);
      return null;
  }
  switch(options) {
    case 5121:
      /** @type {number} */
      i = firstLine * 1;
      break;
    case 5123:
    case 36193:
      /** @type {number} */
      i = firstLine * 2;
      break;
    case 5125:
    case 5126:
      /** @type {number} */
      i = firstLine * 4;
      break;
    case 34042:
      /** @type {number} */
      i = 4;
      break;
    case 33635:
    case 32819:
    case 32820:
      /** @type {number} */
      i = 2;
      break;
    default:
      GL[_$_81a2[680]](1280);
      return null;
  }
  var val = emscriptenWebGLComputeImageSize(struc_store, y, i, GL[_$_81a2[1356]]);
  switch(options) {
    case 5121:
      return HEAPU8[_$_81a2[147]](num, num + val);
    case 5126:
      return HEAPF32[_$_81a2[147]](num >> 2, num + val >> 2);
    case 5125:
    case 34042:
      return HEAPU32[_$_81a2[147]](num >> 2, num + val >> 2);
    case 5123:
    case 33635:
    case 32819:
    case 32820:
    case 36193:
      return HEAPU16[_$_81a2[147]](num >> 1, num + val >> 1);
    default:
      GL[_$_81a2[680]](1280);
      return null;
  }
}
/**
 * @param {?} original_node
 * @param {?} struc_store
 * @param {?} is_root_node
 * @param {?} cur_node
 * @param {undefined} _cache_index
 * @param {undefined} b
 * @param {!Object} a
 * @param {?} scope
 * @param {undefined} c
 * @return {undefined}
 */
function _emscripten_glTexSubImage2D(original_node, struc_store, is_root_node, cur_node, _cache_index, b, a, scope, c) {
  /** @type {null} */
  var face = null;
  if (c) {
    face = emscriptenWebGLGetTexPixelData(scope, a, _cache_index, b, c, 0);
  }
  GLctx[_$_81a2[1357]](original_node, struc_store, is_root_node, cur_node, _cache_index, b, a, scope, face);
}
/**
 * @param {?} isSlidingUp
 * @param {?} $cont
 * @return {?}
 */
function ___syscall197(isSlidingUp, $cont) {
  SYSCALLS[_$_81a2[1268]] = $cont;
  try {
    var b = SYSCALLS[_$_81a2[1271]]();
    var artistTrack = SYSCALLS[_$_81a2[994]]();
    return SYSCALLS[_$_81a2[1358]](FS[_$_81a2[977]], b[_$_81a2[29]], artistTrack);
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @return {undefined}
 */
function _emscripten_glRotatef() {
  Neptune[_$_81a2[25]](_$_81a2[1359]);
  abort(-1);
}
/**
 * @param {?} sinrot
 * @param {?} targetOut
 * @param {?} data
 * @param {number} addr
 * @return {undefined}
 */
function _emscripten_glGetFramebufferAttachmentParameteriv(sinrot, targetOut, data, addr) {
  var renderBodyErr = GLctx[_$_81a2[1360]](sinrot, targetOut, data);
  HEAP32[addr >> 2] = renderBodyErr;
}
/**
 * @return {undefined}
 */
function _genbeql_out() {
  Neptune[_$_81a2[25]](_$_81a2[1361]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genc_olt_s() {
  Neptune[_$_81a2[25]](_$_81a2[1362]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbgezall_idle() {
  Neptune[_$_81a2[25]](_$_81a2[1363]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gensub_s() {
  Neptune[_$_81a2[25]](_$_81a2[1364]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbgtzl_out() {
  Neptune[_$_81a2[25]](_$_81a2[1365]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genc_olt_d() {
  Neptune[_$_81a2[25]](_$_81a2[1366]);
  abort(-1);
}
/**
 * @param {?} uvx1
 * @param {?} uvy1
 * @param {number} a
 * @return {undefined}
 */
function _emscripten_glGetRenderbufferParameteriv(uvx1, uvy1, a) {
  if (!a) {
    GL[_$_81a2[680]](1281);
    return;
  }
  HEAP32[a >> 2] = GLctx[_$_81a2[1367]](uvx1, uvy1);
}
/**
 * @return {undefined}
 */
function _genc_eq_s() {
  Neptune[_$_81a2[25]](_$_81a2[1368]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @return {undefined}
 */
function _emscripten_glStencilOpSeparate(a, b, areMutuallyExclusive, parentType1) {
  GLctx[_$_81a2[1369]](a, b, areMutuallyExclusive, parentType1);
}
/**
 * @return {undefined}
 */
function _genjal() {
  Neptune[_$_81a2[25]](_$_81a2[1370]);
  abort(-1);
}
/**
 * @param {?} theThisArray
 * @param {?} left
 * @param {?} height
 * @param {?} borderLeft
 * @param {?} borderTop
 * @param {?} to_commit
 * @param {?} refresh
 * @param {string} val
 * @param {string} args
 * @return {undefined}
 */
function _emscripten_glCompressedTexSubImage2D(theThisArray, left, height, borderLeft, borderTop, to_commit, refresh, val, args) {
  GLctx[_$_81a2[1371]](theThisArray, left, height, borderLeft, borderTop, to_commit, refresh, args ? HEAPU8[_$_81a2[147]](args, args + val) : null);
}
/**
 * @return {undefined}
 */
function _gensqrt_d() {
  Neptune[_$_81a2[25]](_$_81a2[1372]);
  abort(-1);
}
/**
 * @param {number} a
 * @return {?}
 */
function _eglBindAPI(a) {
  if (a == 12448) {
    EGL[_$_81a2[683]](12288);
    return 1;
  } else {
    EGL[_$_81a2[683]](12300);
    return 0;
  }
}
/**
 * @return {undefined}
 */
function _genbgtz_out() {
  Neptune[_$_81a2[25]](_$_81a2[1373]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbc1fl_out() {
  Neptune[_$_81a2[25]](_$_81a2[1374]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gencvt_s_l() {
  Neptune[_$_81a2[25]](_$_81a2[1375]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbnel() {
  Neptune[_$_81a2[25]](_$_81a2[1376]);
  abort(-1);
}
/**
 * @param {?} a
 * @return {?}
 */
function _emscripten_glIsEnabled(a) {
  return GLctx[_$_81a2[1377]](a);
}
/**
 * @return {undefined}
 */
function _gensqrt_s() {
  Neptune[_$_81a2[25]](_$_81a2[1378]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _free_all_registers() {
  Neptune[_$_81a2[25]](_$_81a2[1379]);
  abort(-1);
}
/**
 * @param {number} r0
 * @param {number} r
 * @return {undefined}
 */
function _glGenTextures(r0, r) {
  /** @type {number} */
  var b = 0;
  for (; b < r0; b++) {
    var HEAP = GLctx[_$_81a2[1380]]();
    if (!HEAP) {
      GL[_$_81a2[680]](1282);
      for (; b < r0;) {
        /** @type {number} */
        HEAP32[r + b++ * 4 >> 2] = 0;
      }
      return;
    }
    var $129 = GL[_$_81a2[369]](GL[_$_81a2[1294]]);
    HEAP[_$_81a2[428]] = $129;
    GL[_$_81a2[1294]][$129] = HEAP;
    HEAP32[r + b * 4 >> 2] = $129;
  }
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @param {?} selectionSet1
 * @return {undefined}
 */
function _emscripten_glVertexAttrib4f(a, b, areMutuallyExclusive, parentType1, selectionSet1) {
  GLctx[_$_81a2[1381]](a, b, areMutuallyExclusive, parentType1, selectionSet1);
}
/**
 * @return {undefined}
 */
function _genblezl_idle() {
  Neptune[_$_81a2[25]](_$_81a2[1382]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _init_cache() {
  Neptune[_$_81a2[25]](_$_81a2[1383]);
  abort(-1);
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _emscripten_glClear(a) {
  GLctx[_$_81a2[1289]](a);
}
/**
 * @return {undefined}
 */
function _gencvt_s_d() {
  Neptune[_$_81a2[25]](_$_81a2[1384]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genxori() {
  Neptune[_$_81a2[25]](_$_81a2[1385]);
  abort(-1);
}
/**
 * @return {?}
 */
function _emscripten_get_now_is_monotonic() {
  return ENVIRONMENT_IS_NODE || typeof dateNow !== _$_81a2[13] || (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self[_$_81a2[652]] && self[_$_81a2[652]][_$_81a2[461]];
}
/**
 * @param {number} eventStr
 * @param {number} a
 * @return {?}
 */
function _clock_gettime(eventStr, a) {
  var b;
  if (eventStr === 0) {
    b = Date[_$_81a2[461]]();
  } else {
    if (eventStr === 1 && _emscripten_get_now_is_monotonic()) {
      b = _emscripten_get_now();
    } else {
      ___setErrNo(ERRNO_CODES[_$_81a2[434]]);
      return -1;
    }
  }
  /** @type {number} */
  HEAP32[a >> 2] = b / 1E3 | 0;
  /** @type {number} */
  HEAP32[a + 4 >> 2] = b % 1E3 * 1E3 * 1E3 | 0;
  return 0;
}
/**
 * @return {undefined}
 */
function _genbc1t() {
  Neptune[_$_81a2[25]](_$_81a2[1386]);
  abort(-1);
}
/**
 * @param {number} h
 * @param {number} r
 * @return {undefined}
 */
function _glDeleteRenderbuffers(h, r) {
  /** @type {number} */
  var d = 0;
  for (; d < h; d++) {
    var len = HEAP32[r + d * 4 >> 2];
    var funcParent = GL[_$_81a2[654]][len];
    if (!funcParent) {
      continue;
    }
    GLctx[_$_81a2[1334]](funcParent);
    /** @type {number} */
    funcParent[_$_81a2[428]] = 0;
    /** @type {null} */
    GL[_$_81a2[654]][len] = null;
  }
}
/**
 * @param {?} url
 * @param {?} opt_target
 * @param {?} opt_rel
 * @return {undefined}
 */
function _glUniform2i(url, opt_target, opt_rel) {
  GLctx[_$_81a2[1332]](GL[_$_81a2[424]][url], opt_target, opt_rel);
}
/**
 * @param {?} url
 * @param {?} opt_target
 * @param {?} opt_rel
 * @return {undefined}
 */
function _glUniform2f(url, opt_target, opt_rel) {
  GLctx[_$_81a2[1329]](GL[_$_81a2[424]][url], opt_target, opt_rel);
}
/**
 * @return {undefined}
 */
function _genctc1() {
  Neptune[_$_81a2[25]](_$_81a2[1387]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbltzal_out() {
  Neptune[_$_81a2[25]](_$_81a2[1388]);
  abort(-1);
}
/**
 * @param {?} name
 * @param {number} fmt
 * @param {number} a
 * @return {undefined}
 */
function _glGetProgramiv(name, fmt, a) {
  if (!a) {
    GL[_$_81a2[680]](1281);
    return;
  }
  if (name >= GL[_$_81a2[311]]) {
    GL[_$_81a2[680]](1281);
    return;
  }
  var props = GL[_$_81a2[423]][name];
  if (!props) {
    GL[_$_81a2[680]](1282);
    return;
  }
  if (fmt == 35716) {
    var d = GLctx[_$_81a2[1389]](GL[_$_81a2[422]][name]);
    if (d === null) {
      d = _$_81a2[1390];
    }
    HEAP32[a >> 2] = d[_$_81a2[36]] + 1;
  } else {
    if (fmt == 35719) {
      HEAP32[a >> 2] = props[_$_81a2[429]];
    } else {
      if (fmt == 35722) {
        if (props[_$_81a2[1391]] == -1) {
          name = GL[_$_81a2[422]][name];
          var offset = GLctx[_$_81a2[426]](name, GLctx[_$_81a2[1392]]);
          /** @type {number} */
          props[_$_81a2[1391]] = 0;
          /** @type {number} */
          var n = 0;
          for (; n < offset; ++n) {
            var s = GLctx[_$_81a2[1393]](name, n);
            props[_$_81a2[1391]] = Math[_$_81a2[80]](props[_$_81a2[1391]], s[_$_81a2[428]][_$_81a2[36]] + 1);
          }
        }
        HEAP32[a >> 2] = props[_$_81a2[1391]];
      } else {
        if (fmt == 35381) {
          if (props[_$_81a2[1394]] == -1) {
            name = GL[_$_81a2[422]][name];
            var g = GLctx[_$_81a2[426]](name, GLctx[_$_81a2[1395]]);
            /** @type {number} */
            props[_$_81a2[1394]] = 0;
            /** @type {number} */
            n = 0;
            for (; n < g; ++n) {
              var s = GLctx[_$_81a2[1396]](name, n);
              props[_$_81a2[1394]] = Math[_$_81a2[80]](props[_$_81a2[1394]], s[_$_81a2[36]] + 1);
            }
          }
          HEAP32[a >> 2] = props[_$_81a2[1394]];
        } else {
          HEAP32[a >> 2] = GLctx[_$_81a2[426]](GL[_$_81a2[422]][name], fmt);
        }
      }
    }
  }
}
/**
 * @param {?} tid
 * @param {?} text
 * @param {?} cmp
 * @param {?} expected
 * @param {?} html
 * @param {?} name
 * @return {undefined}
 */
function _glVertexAttribPointer(tid, text, cmp, expected, html, name) {
  var data = GL[_$_81a2[326]][_$_81a2[336]][tid];
  if (!GL[_$_81a2[348]]) {
    data[_$_81a2[339]] = text;
    data[_$_81a2[340]] = cmp;
    data[_$_81a2[346]] = expected;
    data[_$_81a2[341]] = html;
    data[_$_81a2[344]] = name;
    /** @type {boolean} */
    data[_$_81a2[337]] = true;
    return;
  }
  /** @type {boolean} */
  data[_$_81a2[337]] = false;
  GLctx[_$_81a2[347]](tid, text, cmp, !!expected, html, name);
}
/**
 * @return {undefined}
 */
function _genbc1f() {
  Neptune[_$_81a2[25]](_$_81a2[1397]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gensrlv() {
  Neptune[_$_81a2[25]](_$_81a2[1398]);
  abort(-1);
}
/**
 * @param {?} endY
 * @param {number} callback
 * @param {number} a
 * @param {number} b
 * @return {undefined}
 */
function _emscripten_glGetAttachedShaders(endY, callback, a, b) {
  var HEAP = GLctx[_$_81a2[1399]](GL[_$_81a2[422]][endY]);
  var $46 = HEAP[_$_81a2[36]];
  if ($46 > callback) {
    /** @type {number} */
    $46 = callback;
  }
  HEAP32[a >> 2] = $46;
  /** @type {number} */
  var _mmap_object_methods = 0;
  for (; _mmap_object_methods < $46; ++_mmap_object_methods) {
    var $46 = GL[_$_81a2[664]][_$_81a2[242]](HEAP[_mmap_object_methods]);
    HEAP32[b + _mmap_object_methods * 4 >> 2] = $46;
  }
}
/**
 * @return {undefined}
 */
function _genc_ngt_s() {
  Neptune[_$_81a2[25]](_$_81a2[1400]);
  abort(-1);
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _emscripten_glFrontFace(a) {
  GLctx[_$_81a2[1401]](a);
}
/**
 * @return {undefined}
 */
function _genbgezal() {
  Neptune[_$_81a2[25]](_$_81a2[1402]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _emscripten_glGetInfoLogARB() {
  Neptune[_$_81a2[25]](_$_81a2[1403]);
  abort(-1);
}
/**
 * @return {?}
 */
function _eglGetError() {
  return EGL[_$_81a2[682]];
}
/**
 * @return {undefined}
 */
function _genmfc1() {
  Neptune[_$_81a2[25]](_$_81a2[1404]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genc_seq_s() {
  Neptune[_$_81a2[25]](_$_81a2[1405]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @return {undefined}
 */
function _emscripten_glRenderbufferStorage(a, b, areMutuallyExclusive, parentType1) {
  GLctx[_$_81a2[725]](a, b, areMutuallyExclusive, parentType1);
}
/**
 * @return {undefined}
 */
function _genadd_d() {
  Neptune[_$_81a2[25]](_$_81a2[1406]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @param {?} selectionSet1
 * @param {?} parentType2
 * @param {?} mmCoreSplitViewBlock
 * @param {?} $state
 * @return {undefined}
 */
function _emscripten_glCopyTexSubImage2D(a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2, mmCoreSplitViewBlock, $state) {
  GLctx[_$_81a2[1407]](a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2, mmCoreSplitViewBlock, $state);
}
/**
 * @return {undefined}
 */
function _genbeq_idle() {
  Neptune[_$_81a2[25]](_$_81a2[1408]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function ___syscall10(a, b) {
  SYSCALLS[_$_81a2[1268]] = b;
  try {
    var artistTrack = SYSCALLS[_$_81a2[1270]]();
    FS[_$_81a2[905]](artistTrack);
    return 0;
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @param {?} mmCoreSplitViewBlock
 * @param {?} $state
 * @param {number} confirmDialogService
 * @return {undefined}
 */
function _emscripten_glTexParameteriv(mmCoreSplitViewBlock, $state, confirmDialogService) {
  var ret = HEAP32[confirmDialogService >> 2];
  GLctx[_$_81a2[1311]](mmCoreSplitViewBlock, $state, ret);
}
/**
 * @return {undefined}
 */
function _genadd_s() {
  Neptune[_$_81a2[25]](_$_81a2[1409]);
  abort(-1);
}
/**
 * @param {?} att
 * @return {?}
 */
function _emscripten_glIsProgram(att) {
  att = GL[_$_81a2[422]][att];
  if (!att) {
    return 0;
  }
  return GLctx[_$_81a2[1410]](att);
}
/**
 * @return {?}
 */
function __ZSt18uncaught_exceptionv() {
  return !!__ZSt18uncaught_exceptionv[_$_81a2[1411]];
}
var EXCEPTIONS = {
  last : 0,
  caught : [],
  infos : {},
  deAdjust : function(adjusted) {
    if (!adjusted || EXCEPTIONS[_$_81a2[1412]][adjusted]) {
      return adjusted;
    }
    var ptr;
    for (ptr in EXCEPTIONS[_$_81a2[1412]]) {
      var nextToken = EXCEPTIONS[_$_81a2[1412]][ptr];
      if (nextToken[_$_81a2[1413]] === adjusted) {
        return ptr;
      }
    }
    return adjusted;
  },
  addRef : function(ref) {
    if (!ref) {
      return;
    }
    var element = EXCEPTIONS[_$_81a2[1412]][ref];
    element[_$_81a2[1414]]++;
  },
  decRef : function(ptr) {
    if (!ptr) {
      return;
    }
    var nextToken = EXCEPTIONS[_$_81a2[1412]][ptr];
    assert(nextToken[_$_81a2[1414]] > 0);
    nextToken[_$_81a2[1414]]--;
    if (nextToken[_$_81a2[1414]] === 0 && !nextToken[_$_81a2[1415]]) {
      if (nextToken[_$_81a2[1416]]) {
        Neptune[_$_81a2[197]](nextToken[_$_81a2[1416]], ptr);
      }
      delete EXCEPTIONS[_$_81a2[1412]][ptr];
      ___cxa_free_exception(ptr);
    }
  },
  clearRef : function(ptr) {
    if (!ptr) {
      return;
    }
    var nextToken = EXCEPTIONS[_$_81a2[1412]][ptr];
    /** @type {number} */
    nextToken[_$_81a2[1414]] = 0;
  }
};
/**
 * @param {?} ptr
 * @return {?}
 */
function ___cxa_begin_catch(ptr) {
  var nextToken = EXCEPTIONS[_$_81a2[1412]][ptr];
  if (nextToken && !nextToken[_$_81a2[1417]]) {
    /** @type {boolean} */
    nextToken[_$_81a2[1417]] = true;
    __ZSt18uncaught_exceptionv[_$_81a2[1411]]--;
  }
  if (nextToken) {
    /** @type {boolean} */
    nextToken[_$_81a2[1415]] = false;
  }
  EXCEPTIONS[_$_81a2[1417]][_$_81a2[107]](ptr);
  EXCEPTIONS[_$_81a2[1419]](EXCEPTIONS[_$_81a2[1418]](ptr));
  return ptr;
}
/**
 * @return {undefined}
 */
function _gendsrl32() {
  Neptune[_$_81a2[25]](_$_81a2[1420]);
  abort(-1);
}
/**
 * @param {?} chainId
 * @param {number} f
 * @param {number} a
 * @return {undefined}
 */
function _emscripten_glGetShaderiv(chainId, f, a) {
  if (!a) {
    GL[_$_81a2[680]](1281);
    return;
  }
  if (f == 35716) {
    var opt_targetItem = GLctx[_$_81a2[1421]](GL[_$_81a2[664]][chainId]);
    if (opt_targetItem === null) {
      opt_targetItem = _$_81a2[1390];
    }
    HEAP32[a >> 2] = opt_targetItem[_$_81a2[36]] + 1;
  } else {
    if (f == 35720) {
      var f = GLctx[_$_81a2[1422]](GL[_$_81a2[664]][chainId]);
      var $46 = f === null || f[_$_81a2[36]] == 0 ? 0 : f[_$_81a2[36]] + 1;
      HEAP32[a >> 2] = $46;
    } else {
      HEAP32[a >> 2] = GLctx[_$_81a2[1423]](GL[_$_81a2[664]][chainId], f);
    }
  }
}
/**
 * @param {?} sourceid
 * @param {number} width
 * @param {?} text
 * @param {number} min
 * @return {undefined}
 */
function _emscripten_glUniformMatrix3fv(sourceid, width, text, min) {
  var dataMatrix;
  if (9 * width <= GL[_$_81a2[307]]) {
    dataMatrix = GL[_$_81a2[308]][9 * width - 1];
    /** @type {number} */
    var x = 0;
    for (; x < 9 * width; x = x + 9) {
      dataMatrix[x] = HEAPF32[min + 4 * x >> 2];
      dataMatrix[x + 1] = HEAPF32[min + (4 * x + 4) >> 2];
      dataMatrix[x + 2] = HEAPF32[min + (4 * x + 8) >> 2];
      dataMatrix[x + 3] = HEAPF32[min + (4 * x + 12) >> 2];
      dataMatrix[x + 4] = HEAPF32[min + (4 * x + 16) >> 2];
      dataMatrix[x + 5] = HEAPF32[min + (4 * x + 20) >> 2];
      dataMatrix[x + 6] = HEAPF32[min + (4 * x + 24) >> 2];
      dataMatrix[x + 7] = HEAPF32[min + (4 * x + 28) >> 2];
      dataMatrix[x + 8] = HEAPF32[min + (4 * x + 32) >> 2];
    }
  } else {
    dataMatrix = HEAPF32[_$_81a2[147]](min >> 2, min + width * 36 >> 2);
  }
  GLctx[_$_81a2[1424]](GL[_$_81a2[424]][sourceid], !!text, dataMatrix);
}
/**
 * @param {?} f
 * @param {?} size
 * @param {number} ptr
 * @param {?} name
 * @return {undefined}
 */
function emscriptenWebGLGetUniform(f, size, ptr, name) {
  if (!ptr) {
    GL[_$_81a2[680]](1281);
    return;
  }
  var value = GLctx[_$_81a2[1425]](GL[_$_81a2[422]][f], GL[_$_81a2[424]][size]);
  if (typeof value == _$_81a2[110] || typeof value == _$_81a2[1426]) {
    switch(name) {
      case _$_81a2[1427]:
        HEAP32[ptr >> 2] = value;
        break;
      case _$_81a2[1428]:
        HEAPF32[ptr >> 2] = value;
        break;
      default:
        throw _$_81a2[1429] + name;
    }
  } else {
    /** @type {number} */
    var i = 0;
    for (; i < value[_$_81a2[36]]; i++) {
      switch(name) {
        case _$_81a2[1427]:
          HEAP32[ptr + i * 4 >> 2] = value[i];
          break;
        case _$_81a2[1428]:
          HEAPF32[ptr + i * 4 >> 2] = value[i];
          break;
        default:
          throw _$_81a2[1429] + name;
      }
    }
  }
}
/**
 * @param {?} key
 * @param {?} throttleMillis
 * @param {undefined} func
 * @return {undefined}
 */
function _emscripten_glGetUniformiv(key, throttleMillis, func) {
  emscriptenWebGLGetUniform(key, throttleMillis, func, _$_81a2[1427]);
}
/**
 * @return {undefined}
 */
function _genmult() {
  Neptune[_$_81a2[25]](_$_81a2[1430]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genlhu() {
  Neptune[_$_81a2[25]](_$_81a2[1431]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gencache() {
  Neptune[_$_81a2[25]](_$_81a2[1432]);
  abort(-1);
}
/**
 * @param {number} clientHeight
 * @param {number} contentWidth
 * @return {undefined}
 */
function _emscripten_glGenFramebuffers(clientHeight, contentWidth) {
  /** @type {number} */
  var targetOffsetHeight = 0;
  for (; targetOffsetHeight < clientHeight; ++targetOffsetHeight) {
    var HEAP = GLctx[_$_81a2[1312]]();
    if (!HEAP) {
      GL[_$_81a2[680]](1282);
      for (; targetOffsetHeight < clientHeight;) {
        /** @type {number} */
        HEAP32[contentWidth + targetOffsetHeight++ * 4 >> 2] = 0;
      }
      return;
    }
    var $129 = GL[_$_81a2[369]](GL[_$_81a2[1280]]);
    HEAP[_$_81a2[428]] = $129;
    GL[_$_81a2[1280]][$129] = HEAP;
    HEAP32[contentWidth + targetOffsetHeight * 4 >> 2] = $129;
  }
}
/**
 * @return {undefined}
 */
function _gendaddiu() {
  Neptune[_$_81a2[25]](_$_81a2[1433]);
  abort(-1);
}
/**
 * @param {?} chainId
 * @param {number} f
 * @param {number} a
 * @return {undefined}
 */
function _glGetShaderiv(chainId, f, a) {
  if (!a) {
    GL[_$_81a2[680]](1281);
    return;
  }
  if (f == 35716) {
    var opt_targetItem = GLctx[_$_81a2[1421]](GL[_$_81a2[664]][chainId]);
    if (opt_targetItem === null) {
      opt_targetItem = _$_81a2[1390];
    }
    HEAP32[a >> 2] = opt_targetItem[_$_81a2[36]] + 1;
  } else {
    if (f == 35720) {
      var f = GLctx[_$_81a2[1422]](GL[_$_81a2[664]][chainId]);
      var $46 = f === null || f[_$_81a2[36]] == 0 ? 0 : f[_$_81a2[36]] + 1;
      HEAP32[a >> 2] = $46;
    } else {
      HEAP32[a >> 2] = GLctx[_$_81a2[1423]](GL[_$_81a2[664]][chainId], f);
    }
  }
}
/**
 * @param {?} a
 * @param {?} b
 * @return {undefined}
 */
function _emscripten_glBlendEquationSeparate(a, b) {
  GLctx[_$_81a2[1434]](a, b);
}
/**
 * @return {undefined}
 */
function _emscripten_glDrawRangeElements() {
  Neptune[_$_81a2[25]](_$_81a2[1435]);
  abort(-1);
}
/**
 * @param {number} h
 * @param {number} r
 * @return {undefined}
 */
function _emscripten_glGenTextures(h, r) {
  /** @type {number} */
  var d = 0;
  for (; d < h; d++) {
    var HEAP = GLctx[_$_81a2[1380]]();
    if (!HEAP) {
      GL[_$_81a2[680]](1282);
      for (; d < h;) {
        /** @type {number} */
        HEAP32[r + d++ * 4 >> 2] = 0;
      }
      return;
    }
    var $129 = GL[_$_81a2[369]](GL[_$_81a2[1294]]);
    HEAP[_$_81a2[428]] = $129;
    GL[_$_81a2[1294]][$129] = HEAP;
    HEAP32[r + d * 4 >> 2] = $129;
  }
}
/**
 * @param {?} op
 * @param {?} args
 * @param {number} len
 * @param {number} offset
 * @param {number} dest
 * @param {number} src
 * @param {number} buf
 * @return {undefined}
 */
function _emscripten_glGetActiveUniform(op, args, len, offset, dest, src, buf) {
  op = GL[_$_81a2[422]][op];
  var c = GLctx[_$_81a2[427]](op, args);
  if (!c) {
    return;
  }
  if (len > 0 && buf) {
    var value = stringToUTF8(c[_$_81a2[428]], buf, len);
    if (offset) {
      HEAP32[offset >> 2] = value;
    }
  } else {
    if (offset) {
      /** @type {number} */
      HEAP32[offset >> 2] = 0;
    }
  }
  if (dest) {
    HEAP32[dest >> 2] = c[_$_81a2[339]];
  }
  if (src) {
    HEAP32[src >> 2] = c[_$_81a2[340]];
  }
}
/**
 * @return {undefined}
 */
function _genbgezall_out() {
  Neptune[_$_81a2[25]](_$_81a2[1436]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genlwr() {
  Neptune[_$_81a2[25]](_$_81a2[1437]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genlwu() {
  Neptune[_$_81a2[25]](_$_81a2[1438]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genlwl() {
  Neptune[_$_81a2[25]](_$_81a2[1439]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gencvt_s_w() {
  Neptune[_$_81a2[25]](_$_81a2[1440]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbc1t_idle() {
  Neptune[_$_81a2[25]](_$_81a2[1441]);
  abort(-1);
}
/**
 * @param {?} commentObj
 * @param {(Object|number)} i
 * @param {!Object} howmany
 * @return {undefined}
 */
function _emscripten_glDrawArrays(commentObj, i, howmany) {
  GL[_$_81a2[1282]](i + howmany);
  GLctx[_$_81a2[1283]](commentObj, i, howmany);
  GL[_$_81a2[1284]]();
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _emscripten_glClearDepth(a) {
  GLctx[_$_81a2[1442]](a);
}
/**
 * @return {undefined}
 */
function _gendmfc1() {
  Neptune[_$_81a2[25]](_$_81a2[1443]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genreserved() {
  Neptune[_$_81a2[25]](_$_81a2[1444]);
  abort(-1);
}
var PROCINFO = {
  ppid : 1,
  pid : 42,
  sid : 42,
  pgid : 42
};
/**
 * @param {?} eventStr
 * @param {?} a
 * @return {?}
 */
function ___syscall20(eventStr, a) {
  SYSCALLS[_$_81a2[1268]] = a;
  try {
    return PROCINFO[_$_81a2[1445]];
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @param {?} option
 * @param {number} i
 * @return {?}
 */
function _emscripten_glGetUniformLocation(option, i) {
  i = Pointer_stringify(i);
  /** @type {number} */
  var time = 0;
  if (i[_$_81a2[242]](_$_81a2[168], i[_$_81a2[36]] - 1) !== -1) {
    var r = i[_$_81a2[431]](_$_81a2[430]);
    var start = i[_$_81a2[41]](r + 1, -1);
    if (start[_$_81a2[36]] > 0) {
      /** @type {number} */
      time = parseInt(start);
      if (time < 0) {
        return -1;
      }
    }
    i = i[_$_81a2[41]](0, r);
  }
  var data = GL[_$_81a2[423]][option];
  if (!data) {
    return -1;
  }
  var lines = data[_$_81a2[424]];
  var last = lines[i];
  if (last && time < last[0]) {
    return last[1] + time;
  } else {
    return -1;
  }
}
/**
 * @param {?} url
 * @param {number} opt_target
 * @param {number} opt_targetItem
 * @return {undefined}
 */
function _glUniform3fv(url, opt_target, opt_targetItem) {
  var routes;
  if (3 * opt_target <= GL[_$_81a2[307]]) {
    routes = GL[_$_81a2[308]][3 * opt_target - 1];
    /** @type {number} */
    var pattern = 0;
    for (; pattern < 3 * opt_target; pattern = pattern + 3) {
      routes[pattern] = HEAPF32[opt_targetItem + 4 * pattern >> 2];
      routes[pattern + 1] = HEAPF32[opt_targetItem + (4 * pattern + 4) >> 2];
      routes[pattern + 2] = HEAPF32[opt_targetItem + (4 * pattern + 8) >> 2];
    }
  } else {
    routes = HEAPF32[_$_81a2[147]](opt_targetItem >> 2, opt_targetItem + opt_target * 12 >> 2);
  }
  GLctx[_$_81a2[1446]](GL[_$_81a2[424]][url], routes);
}
/**
 * @param {?} port_num
 * @param {number} x
 * @return {undefined}
 */
function _emscripten_glVertexAttrib4fv(port_num, x) {
  GLctx[_$_81a2[1381]](port_num, HEAPF32[x >> 2], HEAPF32[x + 4 >> 2], HEAPF32[x + 8 >> 2], HEAPF32[x + 12 >> 2]);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @return {undefined}
 */
function _emscripten_glScissor(a, b, areMutuallyExclusive, parentType1) {
  GLctx[_$_81a2[1447]](a, b, areMutuallyExclusive, parentType1);
}
/**
 * @return {undefined}
 */
function _gennotcompiled() {
  Neptune[_$_81a2[25]](_$_81a2[1448]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gensub() {
  Neptune[_$_81a2[25]](_$_81a2[1449]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gensync() {
  Neptune[_$_81a2[25]](_$_81a2[1450]);
  abort(-1);
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _emscripten_glEnable(a) {
  GLctx[_$_81a2[1326]](a);
}
/**
 * @return {undefined}
 */
function _passe2() {
  Neptune[_$_81a2[25]](_$_81a2[1451]);
  abort(-1);
}
/**
 * @param {?} CallAtEnd
 * @param {!Object} a
 * @param {(Object|number)} f
 * @param {?} optionalInit
 * @return {undefined}
 */
function _emscripten_glBufferData(CallAtEnd, a, f, optionalInit) {
  if (!f) {
    GLctx[_$_81a2[325]](CallAtEnd, a, optionalInit);
  } else {
    GLctx[_$_81a2[325]](CallAtEnd, HEAPU8[_$_81a2[147]](f, f + a), optionalInit);
  }
}
/**
 * @return {undefined}
 */
function _genbeq_out() {
  Neptune[_$_81a2[25]](_$_81a2[1452]);
  abort(-1);
}
/**
 * @param {?} off
 * @param {number} len
 * @param {number} i
 * @param {number} buf
 * @return {undefined}
 */
function _emscripten_glGetShaderSource(off, len, i, buf) {
  var string = GLctx[_$_81a2[1422]](GL[_$_81a2[664]][off]);
  if (!string) {
    return;
  }
  if (len > 0 && buf) {
    var s = stringToUTF8(string, buf, len);
    if (i) {
      HEAP32[i >> 2] = s;
    }
  } else {
    if (i) {
      /** @type {number} */
      HEAP32[i >> 2] = 0;
    }
  }
}
/**
 * @return {undefined}
 */
function _gendmtc1() {
  Neptune[_$_81a2[25]](_$_81a2[1453]);
  abort(-1);
}
/**
 * @param {?} suggestedValue
 * @return {?}
 */
function _llvm_exp2_f32(suggestedValue) {
  return Math[_$_81a2[225]](2, suggestedValue);
}
/**
 * @param {string} keyName
 * @return {undefined}
 */
function _glUseProgram(keyName) {
  GLctx[_$_81a2[1454]](keyName ? GL[_$_81a2[422]][keyName] : null);
}
/**
 * @param {undefined} condition
 * @param {undefined} filename
 * @param {?} line
 * @param {undefined} func
 * @return {undefined}
 */
function ___assert_fail(condition, filename, line, func) {
  /** @type {boolean} */
  ABORT = true;
  throw _$_81a2[96] + Pointer_stringify(condition) + _$_81a2[1455] + [filename ? Pointer_stringify(filename) : _$_81a2[1456], line, func ? Pointer_stringify(func) : _$_81a2[1457]] + _$_81a2[1458] + stackTrace();
}
/**
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {undefined}
 */
function _emscripten_glVertexAttribDivisor(b, areMutuallyExclusive) {
  GLctx[_$_81a2[382]](b, areMutuallyExclusive);
}
/**
 * @return {undefined}
 */
function _gensllv() {
  Neptune[_$_81a2[25]](_$_81a2[1459]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} value
 * @param {number} _
 * @return {undefined}
 */
function _emscripten_glDrawElements(a, b, value, _) {
  var selected;
  if (!GL[_$_81a2[732]]) {
    var coord = GL[_$_81a2[342]](1, value, 0, b);
    selected = GL[_$_81a2[1460]](coord);
    GLctx[_$_81a2[323]](GLctx[_$_81a2[321]], selected);
    GLctx[_$_81a2[345]](GLctx[_$_81a2[321]], 0, HEAPU8[_$_81a2[147]](_, _ + coord));
    /** @type {number} */
    _ = 0;
  }
  GL[_$_81a2[1282]](b);
  GLctx[_$_81a2[1461]](a, b, value, _);
  GL[_$_81a2[1284]](b);
  if (!GL[_$_81a2[732]]) {
    GLctx[_$_81a2[323]](GLctx[_$_81a2[321]], null);
  }
}
/**
 * @return {undefined}
 */
function _gencvt_w_d() {
  Neptune[_$_81a2[25]](_$_81a2[1462]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genceil_l_d() {
  Neptune[_$_81a2[25]](_$_81a2[1463]);
  abort(-1);
}
/**
 * @return {?}
 */
function _emscripten_glCreateProgram() {
  var i = GL[_$_81a2[369]](GL[_$_81a2[422]]);
  var b = GLctx[_$_81a2[1464]]();
  b[_$_81a2[428]] = i;
  GL[_$_81a2[422]][i] = b;
  return i;
}
/**
 * @param {?} func
 * @param {?} thisTree
 * @return {undefined}
 */
function _pthread_once(func, thisTree) {
  if (!_pthread_once[_$_81a2[1465]]) {
    _pthread_once[_$_81a2[1465]] = {};
  }
  if (func in _pthread_once[_$_81a2[1465]]) {
    return;
  }
  Neptune[_$_81a2[196]](thisTree);
  /** @type {number} */
  _pthread_once[_$_81a2[1465]][func] = 1;
}
/**
 * @return {undefined}
 */
function _gencvt_w_s() {
  Neptune[_$_81a2[25]](_$_81a2[1466]);
  abort(-1);
}
/**
 * @param {?} h0
 * @param {?} uvx0
 * @param {?} uvy0
 * @param {?} uvx1
 * @param {?} uvy1
 * @param {?} a
 * @param {string} ud
 * @param {string} na
 * @return {undefined}
 */
function _emscripten_glCompressedTexImage2D(h0, uvx0, uvy0, uvx1, uvy1, a, ud, na) {
  GLctx[_$_81a2[1467]](h0, uvx0, uvy0, uvx1, uvy1, a, na ? HEAPU8[_$_81a2[147]](na, na + ud) : null);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @return {undefined}
 */
function _emscripten_glClearColor(a, b, areMutuallyExclusive, parentType1) {
  GLctx[_$_81a2[1468]](a, b, areMutuallyExclusive, parentType1);
}
/**
 * @return {undefined}
 */
function _genbltzl_idle() {
  Neptune[_$_81a2[25]](_$_81a2[1469]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genddiv() {
  Neptune[_$_81a2[25]](_$_81a2[1470]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gensubu() {
  Neptune[_$_81a2[25]](_$_81a2[1471]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _init_assembler() {
  Neptune[_$_81a2[25]](_$_81a2[1472]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _glFinish() {
  GLctx[_$_81a2[1473]]();
}
/**
 * @return {undefined}
 */
function _emscripten_glLoadMatrixf() {
  Neptune[_$_81a2[25]](_$_81a2[1474]);
  abort(-1);
}
/**
 * @param {?} drawtype
 * @return {undefined}
 */
function _glDeleteShader(drawtype) {
  if (!drawtype) {
    return;
  }
  var dali_drawtype = GL[_$_81a2[664]][drawtype];
  if (!dali_drawtype) {
    GL[_$_81a2[680]](1281);
    return;
  }
  GLctx[_$_81a2[1475]](dali_drawtype);
  /** @type {null} */
  GL[_$_81a2[664]][drawtype] = null;
}
/**
 * @param {?} off
 * @param {number} len
 * @param {number} i
 * @param {number} buf
 * @return {undefined}
 */
function _emscripten_glGetProgramInfoLog(off, len, i, buf) {
  var string = GLctx[_$_81a2[1389]](GL[_$_81a2[422]][off]);
  if (string === null) {
    string = _$_81a2[1390];
  }
  if (len > 0 && buf) {
    var s = stringToUTF8(string, buf, len);
    if (i) {
      HEAP32[i >> 2] = s;
    }
  } else {
    if (i) {
      /** @type {number} */
      HEAP32[i >> 2] = 0;
    }
  }
}
/**
 * @return {undefined}
 */
function _gentrunc_w_d() {
  Neptune[_$_81a2[25]](_$_81a2[1476]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genfloor_w_s() {
  Neptune[_$_81a2[25]](_$_81a2[1477]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @return {undefined}
 */
function _glViewport(a, b, areMutuallyExclusive, parentType1) {
  GLctx[_$_81a2[1478]](a, b, areMutuallyExclusive, parentType1);
}
/**
 * @return {undefined}
 */
function _gentrunc_w_s() {
  Neptune[_$_81a2[25]](_$_81a2[1479]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genceil_l_s() {
  Neptune[_$_81a2[25]](_$_81a2[1480]);
  abort(-1);
}
/**
 * @param {?} args
 * @return {?}
 */
function _emscripten_glCreateShader(args) {
  var pathArrayLen = GL[_$_81a2[369]](GL[_$_81a2[664]]);
  GL[_$_81a2[664]][pathArrayLen] = GLctx[_$_81a2[695]](args);
  return pathArrayLen;
}
/**
 * @return {undefined}
 */
function _genfloor_w_d() {
  Neptune[_$_81a2[25]](_$_81a2[1481]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genadd() {
  Neptune[_$_81a2[25]](_$_81a2[1482]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genc_ueq_s() {
  Neptune[_$_81a2[25]](_$_81a2[1483]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {undefined}
 */
function _glTexParameterf(a, b, areMutuallyExclusive) {
  GLctx[_$_81a2[659]](a, b, areMutuallyExclusive);
}
/**
 * @param {number} op
 * @param {number} b
 * @param {number} a_val
 * @return {undefined}
 */
function _glTexParameteri(op, b, a_val) {
  GLctx[_$_81a2[1311]](op, b, a_val);
}
/**
 * @return {undefined}
 */
function _genbnel_out() {
  Neptune[_$_81a2[25]](_$_81a2[1484]);
  abort(-1);
}
/**
 * @param {?} isSlidingUp
 * @param {?} $cont
 * @return {?}
 */
function ___syscall195(isSlidingUp, $cont) {
  SYSCALLS[_$_81a2[1268]] = $cont;
  try {
    var artistTrack = SYSCALLS[_$_81a2[1270]]();
    var GET_AUTH_URL_TIMEOUT = SYSCALLS[_$_81a2[994]]();
    return SYSCALLS[_$_81a2[1358]](FS[_$_81a2[977]], artistTrack, GET_AUTH_URL_TIMEOUT);
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @param {?} a
 * @return {?}
 */
function _eglGetDisplay(a) {
  EGL[_$_81a2[683]](12288);
  return 62E3;
}
/**
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {undefined}
 */
function _emscripten_set_canvas_size(b, areMutuallyExclusive) {
  Browser[_$_81a2[1485]](b, areMutuallyExclusive);
}
/**
 * @return {undefined}
 */
function _genc_ueq_d() {
  Neptune[_$_81a2[25]](_$_81a2[1486]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbgezal_idle() {
  Neptune[_$_81a2[25]](_$_81a2[1487]);
  abort(-1);
}
/**
 * @param {?} isSlidingUp
 * @param {?} $cont
 * @return {?}
 */
function ___syscall221(isSlidingUp, $cont) {
  SYSCALLS[_$_81a2[1268]] = $cont;
  try {
    var sprite = SYSCALLS[_$_81a2[1271]]();
    var b = SYSCALLS[_$_81a2[994]]();
    switch(b) {
      case 0:
        {
          var i = SYSCALLS[_$_81a2[994]]();
          if (i < 0) {
            return -ERRNO_CODES[_$_81a2[434]];
          }
          var result;
          result = FS[_$_81a2[51]](sprite[_$_81a2[29]], sprite[_$_81a2[1043]], 0, i);
          return result[_$_81a2[882]];
        }
      case 1:
      case 2:
        return 0;
      case 3:
        return sprite[_$_81a2[1043]];
      case 4:
        {
          i = SYSCALLS[_$_81a2[994]]();
          sprite[_$_81a2[1043]] |= i;
          return 0;
        }
      case 12:
      case 12:
        {
          i = SYSCALLS[_$_81a2[994]]();
          /** @type {number} */
          var leftRenderedIndex = 0;
          /** @type {number} */
          HEAP16[i + leftRenderedIndex >> 1] = 2;
          return 0;
        }
      case 13:
      case 14:
      case 13:
      case 14:
        return 0;
      case 16:
      case 8:
        return -ERRNO_CODES[_$_81a2[434]];
      case 9:
        ___setErrNo(ERRNO_CODES[_$_81a2[434]]);
        return -1;
      default:
        {
          return -ERRNO_CODES[_$_81a2[434]];
        }
    }
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @param {?} l
 * @param {?} trackToShowFirst
 * @return {?}
 */
function ___syscall220(l, trackToShowFirst) {
  SYSCALLS[_$_81a2[1268]] = trackToShowFirst;
  try {
    var i = SYSCALLS[_$_81a2[1271]]();
    var s = SYSCALLS[_$_81a2[994]]();
    var b = SYSCALLS[_$_81a2[994]]();
    if (!i[_$_81a2[1159]]) {
      i[_$_81a2[1159]] = FS[_$_81a2[907]](i[_$_81a2[29]]);
    }
    /** @type {number} */
    var a = 0;
    for (; i[_$_81a2[1159]][_$_81a2[36]] > 0 && a + 268 <= b;) {
      var value;
      var lastChar;
      var h = i[_$_81a2[1159]][_$_81a2[976]]();
      assert(h[_$_81a2[36]] < 256);
      if (h[0] === _$_81a2[241]) {
        /** @type {number} */
        value = 1;
        /** @type {number} */
        lastChar = 4;
      } else {
        var reference = FS[_$_81a2[941]](i[_$_81a2[866]], h);
        value = reference[_$_81a2[293]];
        /** @type {number} */
        lastChar = FS[_$_81a2[925]](reference[_$_81a2[915]]) ? 2 : FS[_$_81a2[916]](reference[_$_81a2[915]]) ? 4 : FS[_$_81a2[923]](reference[_$_81a2[915]]) ? 10 : 8;
      }
      HEAP32[s + a >> 2] = value;
      HEAP32[s + a + 4 >> 2] = i[_$_81a2[945]];
      /** @type {number} */
      HEAP16[s + a + 8 >> 1] = 268;
      /** @type {number} */
      HEAP8[s + a + 10 >> 0] = lastChar;
      /** @type {number} */
      var d = 0;
      for (; d < h[_$_81a2[36]]; d++) {
        HEAP8[s + a + (11 + d) >> 0] = h[_$_81a2[159]](d);
      }
      /** @type {number} */
      HEAP8[s + a + (11 + d) >> 0] = 0;
      /** @type {number} */
      a = a + 268;
    }
    return a;
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @param {?} drawtype
 * @return {?}
 */
function _emscripten_glIsRenderbuffer(drawtype) {
  var dali_drawtype = GL[_$_81a2[654]][drawtype];
  if (!dali_drawtype) {
    return 0;
  }
  return GLctx[_$_81a2[1488]](dali_drawtype);
}
/**
 * @return {undefined}
 */
function _genld() {
  Neptune[_$_81a2[25]](_$_81a2[1489]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbc1tl_idle() {
  Neptune[_$_81a2[25]](_$_81a2[1490]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genlb() {
  Neptune[_$_81a2[25]](_$_81a2[1491]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genjalr() {
  Neptune[_$_81a2[25]](_$_81a2[1492]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genll() {
  Neptune[_$_81a2[25]](_$_81a2[1493]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genmfhi() {
  Neptune[_$_81a2[25]](_$_81a2[1494]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genlh() {
  Neptune[_$_81a2[25]](_$_81a2[1495]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genlw() {
  Neptune[_$_81a2[25]](_$_81a2[1496]);
  abort(-1);
}
/**
 * @param {?} statisticName
 * @return {undefined}
 */
function _glLinkProgram(statisticName) {
  GLctx[_$_81a2[1497]](GL[_$_81a2[422]][statisticName]);
  /** @type {null} */
  GL[_$_81a2[423]][statisticName] = null;
  GL[_$_81a2[1498]](statisticName);
}
/**
 * @param {number} num
 * @param {string} ch
 * @return {undefined}
 */
function _glBindTexture(num, ch) {
  GLctx[_$_81a2[1499]](num, ch ? GL[_$_81a2[1294]][ch] : null);
}
/**
 * @return {undefined}
 */
function _gentrunc_l_s() {
  Neptune[_$_81a2[25]](_$_81a2[1500]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genldc1() {
  Neptune[_$_81a2[25]](_$_81a2[1501]);
  abort(-1);
}
/**
 * @param {?} level
 * @param {?} message
 * @param {?} value
 * @param {?} floor
 * @return {undefined}
 */
function _emscripten_glShaderSource(level, message, value, floor) {
  var ret = GL[_$_81a2[1502]](level, message, value, floor);
  GLctx[_$_81a2[1503]](GL[_$_81a2[664]][level], ret);
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _emscripten_glBlendEquation(a) {
  GLctx[_$_81a2[1504]](a);
}
/**
 * @return {undefined}
 */
function _genbc1tl_out() {
  Neptune[_$_81a2[25]](_$_81a2[1505]);
  abort(-1);
}
/**
 * @param {?} att
 * @return {?}
 */
function _emscripten_glIsTexture(att) {
  att = GL[_$_81a2[1294]][att];
  if (!att) {
    return 0;
  }
  return GLctx[_$_81a2[1506]](att);
}
/**
 * @return {undefined}
 */
function _gentrunc_l_d() {
  Neptune[_$_81a2[25]](_$_81a2[1507]);
  abort(-1);
}
/**
 * @param {?} drop_stack
 * @param {?} which
 * @return {?}
 */
function ___syscall54(drop_stack, which) {
  SYSCALLS[_$_81a2[1268]] = which;
  try {
    var artistTrack = SYSCALLS[_$_81a2[1271]]();
    var type = SYSCALLS[_$_81a2[994]]();
    switch(type) {
      case 21505:
        {
          if (!artistTrack[_$_81a2[869]]) {
            return -ERRNO_CODES[_$_81a2[1167]];
          }
          return 0;
        }
      case 21506:
        {
          if (!artistTrack[_$_81a2[869]]) {
            return -ERRNO_CODES[_$_81a2[1167]];
          }
          return 0;
        }
      case 21519:
        {
          if (!artistTrack[_$_81a2[869]]) {
            return -ERRNO_CODES[_$_81a2[1167]];
          }
          var $51 = SYSCALLS[_$_81a2[994]]();
          /** @type {number} */
          HEAP32[$51 >> 2] = 0;
          return 0;
        }
      case 21520:
        {
          if (!artistTrack[_$_81a2[869]]) {
            return -ERRNO_CODES[_$_81a2[1167]];
          }
          return -ERRNO_CODES[_$_81a2[434]];
        }
      case 21531:
        {
          $51 = SYSCALLS[_$_81a2[994]]();
          return FS[_$_81a2[1166]](artistTrack, type, $51);
        }
      case 21523:
        {
          if (!artistTrack[_$_81a2[869]]) {
            return -ERRNO_CODES[_$_81a2[1167]];
          }
          return 0;
        }
      default:
        abort(_$_81a2[1508] + type);
    }
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @param {?} url
 * @param {?} opt_target
 * @param {?} opt_rel
 * @param {?} mmCoreSplitViewBlock
 * @param {?} $state
 * @return {undefined}
 */
function _emscripten_glUniform4f(url, opt_target, opt_rel, mmCoreSplitViewBlock, $state) {
  GLctx[_$_81a2[1509]](GL[_$_81a2[424]][url], opt_target, opt_rel, mmCoreSplitViewBlock, $state);
}
/**
 * @return {undefined}
 */
function _genmtc1() {
  Neptune[_$_81a2[25]](_$_81a2[1510]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genmtc0() {
  Neptune[_$_81a2[25]](_$_81a2[1511]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @param {?} selectionSet1
 * @return {undefined}
 */
function _glVertexAttrib4f(a, b, areMutuallyExclusive, parentType1, selectionSet1) {
  GLctx[_$_81a2[1381]](a, b, areMutuallyExclusive, parentType1, selectionSet1);
}
/**
 * @param {?} url
 * @param {?} opt_target
 * @param {?} opt_rel
 * @param {?} mmCoreSplitViewBlock
 * @param {?} $state
 * @return {undefined}
 */
function _emscripten_glUniform4i(url, opt_target, opt_rel, mmCoreSplitViewBlock, $state) {
  GLctx[_$_81a2[1512]](GL[_$_81a2[424]][url], opt_target, opt_rel, mmCoreSplitViewBlock, $state);
}
/**
 * @return {undefined}
 */
function _genbltzl() {
  Neptune[_$_81a2[25]](_$_81a2[1513]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @return {undefined}
 */
function _emscripten_glViewport(a, b, areMutuallyExclusive, parentType1) {
  GLctx[_$_81a2[1478]](a, b, areMutuallyExclusive, parentType1);
}
/**
 * @param {?} dest
 * @param {(Object|number)} num
 * @param {!Object} decimal
 * @return {?}
 */
function _emscripten_memcpy_big(dest, num, decimal) {
  HEAPU8[_$_81a2[148]](HEAPU8[_$_81a2[147]](num, num + decimal), dest);
  return dest;
}
var _llvm_pow_f64 = Math_pow;
/**
 * @return {undefined}
 */
function _genc_seq_d() {
  Neptune[_$_81a2[25]](_$_81a2[1514]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genc_ole_s() {
  Neptune[_$_81a2[25]](_$_81a2[1515]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gentlbwr() {
  Neptune[_$_81a2[25]](_$_81a2[1516]);
  abort(-1);
}
/**
 * @param {?} statisticName
 * @return {undefined}
 */
function _emscripten_glLinkProgram(statisticName) {
  GLctx[_$_81a2[1497]](GL[_$_81a2[422]][statisticName]);
  /** @type {null} */
  GL[_$_81a2[423]][statisticName] = null;
  GL[_$_81a2[1498]](statisticName);
}
/**
 * @param {?} url
 * @param {?} trimDomain
 * @return {undefined}
 */
function _glUniform1f(url, trimDomain) {
  GLctx[_$_81a2[1517]](GL[_$_81a2[424]][url], trimDomain);
}
/**
 * @return {undefined}
 */
function _genlbu() {
  Neptune[_$_81a2[25]](_$_81a2[1518]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gentlbwi() {
  Neptune[_$_81a2[25]](_$_81a2[1519]);
  abort(-1);
}
/**
 * @param {?} newSrc
 * @param {?} isBgroundImg
 * @param {?} stgs
 * @param {?} index
 * @return {undefined}
 */
function _emscripten_glUniform3f(newSrc, isBgroundImg, stgs, index) {
  GLctx[_$_81a2[729]](GL[_$_81a2[424]][newSrc], isBgroundImg, stgs, index);
}
/**
 * @return {undefined}
 */
function _genbgtzl() {
  Neptune[_$_81a2[25]](_$_81a2[1520]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @return {undefined}
 */
function _emscripten_glBlendFunc(a, b) {
  GLctx[_$_81a2[1521]](a, b);
}
/**
 * @param {?} newSrc
 * @param {?} isBgroundImg
 * @param {?} stgs
 * @param {?} index
 * @return {undefined}
 */
function _emscripten_glUniform3i(newSrc, isBgroundImg, stgs, index) {
  GLctx[_$_81a2[1522]](GL[_$_81a2[424]][newSrc], isBgroundImg, stgs, index);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {undefined}
 */
function _emscripten_glStencilOp(a, b, areMutuallyExclusive) {
  GLctx[_$_81a2[1523]](a, b, areMutuallyExclusive);
}
/**
 * @return {undefined}
 */
function _genc_ole_d() {
  Neptune[_$_81a2[25]](_$_81a2[1524]);
  abort(-1);
}
/**
 * @param {?} url
 * @param {?} trimDomain
 * @return {undefined}
 */
function _glUniform1i(url, trimDomain) {
  GLctx[_$_81a2[1525]](GL[_$_81a2[424]][url], trimDomain);
}
/**
 * @param {?} original_node
 * @param {?} struc_store
 * @param {?} is_root_node
 * @param {?} cur_node
 * @param {undefined} _cache_index
 * @param {undefined} b
 * @param {!Object} a
 * @param {?} scope
 * @param {undefined} c
 * @return {undefined}
 */
function _glTexSubImage2D(original_node, struc_store, is_root_node, cur_node, _cache_index, b, a, scope, c) {
  /** @type {null} */
  var face = null;
  if (c) {
    face = emscriptenWebGLGetTexPixelData(scope, a, _cache_index, b, c, 0);
  }
  GLctx[_$_81a2[1357]](original_node, struc_store, is_root_node, cur_node, _cache_index, b, a, scope, face);
}
/**
 * @return {undefined}
 */
function _genblez() {
  Neptune[_$_81a2[25]](_$_81a2[1526]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gendiv() {
  Neptune[_$_81a2[25]](_$_81a2[1527]);
  abort(-1);
}
/**
 * @param {?} from_row
 * @return {undefined}
 */
function _emscripten_glEnableVertexAttribArray(from_row) {
  var from_row_elem = GL[_$_81a2[326]][_$_81a2[336]][from_row];
  /** @type {boolean} */
  from_row_elem[_$_81a2[338]] = true;
  GLctx[_$_81a2[1528]](from_row);
}
/**
 * @param {?} ballNumber
 * @return {undefined}
 */
function _RWebCamFree(ballNumber) {
  RWC[_$_81a2[368]][ballNumber][_$_81a2[700]][_$_81a2[1529]]();
  URL[_$_81a2[509]](RWC[_$_81a2[368]][ballNumber][_$_81a2[700]][_$_81a2[510]]);
  /** @type {null} */
  RWC[_$_81a2[368]][ballNumber][_$_81a2[700]] = null;
  /** @type {null} */
  RWC[_$_81a2[368]][ballNumber] = null;
}
/**
 * @return {undefined}
 */
function _genbltzl_out() {
  Neptune[_$_81a2[25]](_$_81a2[1530]);
  abort(-1);
}
/**
 * @param {?} computeOverlap
 * @param {string} index
 * @return {undefined}
 */
function _glBindFramebuffer(computeOverlap, index) {
  GLctx[_$_81a2[1531]](computeOverlap, index ? GL[_$_81a2[1280]][index] : null);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @return {undefined}
 */
function _emscripten_glBlendFuncSeparate(a, b, areMutuallyExclusive, parentType1) {
  GLctx[_$_81a2[1532]](a, b, areMutuallyExclusive, parentType1);
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _glCullFace(a) {
  GLctx[_$_81a2[1533]](a);
}
/**
 * @return {undefined}
 */
function _emscripten_glColorPointer() {
  Neptune[_$_81a2[25]](_$_81a2[1534]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _emscripten_glNormalPointer() {
  Neptune[_$_81a2[25]](_$_81a2[1535]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genddivu() {
  Neptune[_$_81a2[25]](_$_81a2[1536]);
  abort(-1);
}
/**
 * @param {?} a
 * @return {?}
 */
function _eglGetProcAddress(a) {
  return _emscripten_GetProcAddress(a);
}
/**
 * @param {?} keyringConnectionId
 * @param {?} siteId
 * @return {undefined}
 */
function _glAttachShader(keyringConnectionId, siteId) {
  GLctx[_$_81a2[1291]](GL[_$_81a2[422]][keyringConnectionId], GL[_$_81a2[664]][siteId]);
}
/**
 * @param {?} fieldName
 * @param {number} type
 * @param {number} ptr
 * @param {?} name
 * @return {undefined}
 */
function emscriptenWebGLGetVertexAttrib(fieldName, type, ptr, name) {
  if (!ptr) {
    GL[_$_81a2[680]](1281);
    return;
  }
  if (GL[_$_81a2[326]][_$_81a2[336]][fieldName][_$_81a2[338]]) {
    Neptune[_$_81a2[25]](_$_81a2[1537]);
  }
  var value = GLctx[_$_81a2[1538]](fieldName, type);
  if (type == 34975) {
    HEAP32[ptr >> 2] = value[_$_81a2[428]];
  } else {
    if (typeof value == _$_81a2[110] || typeof value == _$_81a2[1426]) {
      switch(name) {
        case _$_81a2[1427]:
          HEAP32[ptr >> 2] = value;
          break;
        case _$_81a2[1428]:
          HEAPF32[ptr >> 2] = value;
          break;
        case _$_81a2[1539]:
          HEAP32[ptr >> 2] = Math[_$_81a2[211]](value);
          break;
        default:
          throw _$_81a2[1540] + name;
      }
    } else {
      /** @type {number} */
      var i = 0;
      for (; i < value[_$_81a2[36]]; i++) {
        switch(name) {
          case _$_81a2[1427]:
            HEAP32[ptr + i * 4 >> 2] = value[i];
            break;
          case _$_81a2[1428]:
            HEAPF32[ptr + i * 4 >> 2] = value[i];
            break;
          case _$_81a2[1539]:
            HEAP32[ptr + i * 4 >> 2] = Math[_$_81a2[211]](value[i]);
            break;
          default:
            throw _$_81a2[1540] + name;
        }
      }
    }
  }
}
/**
 * @param {?} f
 * @param {undefined} c
 * @param {undefined} buffer
 * @return {undefined}
 */
function _emscripten_glGetVertexAttribfv(f, c, buffer) {
  emscriptenWebGLGetVertexAttrib(f, c, buffer, _$_81a2[1428]);
}
/**
 * @return {undefined}
 */
function _genceil_w_s() {
  Neptune[_$_81a2[25]](_$_81a2[1541]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gendmult() {
  Neptune[_$_81a2[25]](_$_81a2[1542]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genmov_s() {
  Neptune[_$_81a2[25]](_$_81a2[1543]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genceil_w_d() {
  Neptune[_$_81a2[25]](_$_81a2[1544]);
  abort(-1);
}
/**
 * @param {number} ptr
 * @param {number} src
 * @param {number} dest
 * @return {undefined}
 */
function _emscripten_get_canvas_size(ptr, src, dest) {
  var outPtr = Neptune[_$_81a2[370]];
  HEAP32[ptr >> 2] = outPtr[_$_81a2[505]];
  HEAP32[src >> 2] = outPtr[_$_81a2[506]];
  /** @type {number} */
  HEAP32[dest >> 2] = Browser[_$_81a2[550]] ? 1 : 0;
}
/**
 * @return {undefined}
 */
function _genmov_d() {
  Neptune[_$_81a2[25]](_$_81a2[1545]);
  abort(-1);
}
var cttz_i8 = allocate([8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 
0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0], _$_81a2[69], ALLOC_STATIC);
/**
 * @param {number} b
 * @return {?}
 */
function _llvm_cttz_i32(b) {
  /** @type {number} */
  b = b | 0;
  /** @type {number} */
  var a = 0;
  /** @type {number} */
  a = HEAP8[cttz_i8 + (b & 255) >> 0] | 0;
  if ((a | 0) < 8) {
    return a | 0;
  }
  /** @type {number} */
  a = HEAP8[cttz_i8 + (b >> 8 & 255) >> 0] | 0;
  if ((a | 0) < 8) {
    return a + 8 | 0;
  }
  /** @type {number} */
  a = HEAP8[cttz_i8 + (b >> 16 & 255) >> 0] | 0;
  if ((a | 0) < 8) {
    return a + 16 | 0;
  }
  return (HEAP8[cttz_i8 + (b >>> 24) >> 0] | 0) + 24 | 0;
}
/**
 * @param {?} drawtype
 * @return {undefined}
 */
function _emscripten_glDeleteShader(drawtype) {
  if (!drawtype) {
    return;
  }
  var dali_drawtype = GL[_$_81a2[664]][drawtype];
  if (!dali_drawtype) {
    GL[_$_81a2[680]](1281);
    return;
  }
  GLctx[_$_81a2[1475]](dali_drawtype);
  /** @type {null} */
  GL[_$_81a2[664]][drawtype] = null;
}
/**
 * @return {undefined}
 */
function _genori() {
  Neptune[_$_81a2[25]](_$_81a2[1546]);
  abort(-1);
}
/**
 * @param {?} f
 * @param {undefined} c
 * @param {undefined} buffer
 * @return {undefined}
 */
function _emscripten_glGetVertexAttribiv(f, c, buffer) {
  emscriptenWebGLGetVertexAttrib(f, c, buffer, _$_81a2[1539]);
}
/**
 * @return {undefined}
 */
function _genbltzal_idle() {
  Neptune[_$_81a2[25]](_$_81a2[1547]);
  abort(-1);
}
/**
 * @param {?} uvx1
 * @param {?} uvy1
 * @param {?} a
 * @param {?} b
 * @return {undefined}
 */
function _emscripten_glDrawArraysInstanced(uvx1, uvy1, a, b) {
  GLctx[_$_81a2[384]](uvx1, uvy1, a, b);
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _glGenerateMipmap(a) {
  GLctx[_$_81a2[1548]](a);
}
/**
 * @return {undefined}
 */
function _emscripten_glGetPointerv() {
  Neptune[_$_81a2[25]](_$_81a2[1549]);
  abort(-1);
}
/**
 * @param {?} isSlidingUp
 * @param {?} $cont
 * @return {?}
 */
function ___syscall142(isSlidingUp, $cont) {
  SYSCALLS[_$_81a2[1268]] = $cont;
  try {
    /**
     * @param {number} q
     * @param {number} a
     * @param {number} c
     * @param {number} b
     * @return {?}
     */
    var add = function(q, a, c, b) {
      return q < 32 ? a & b : c & b;
    };
    var functionCount = SYSCALLS[_$_81a2[994]]();
    var rect = SYSCALLS[_$_81a2[994]]();
    var a = SYSCALLS[_$_81a2[994]]();
    var result = SYSCALLS[_$_81a2[994]]();
    var x = SYSCALLS[_$_81a2[994]]();
    assert(functionCount <= 64, _$_81a2[1550]);
    assert(!result, _$_81a2[1551]);
    /** @type {number} */
    var $88 = 0;
    var pos = rect ? HEAP32[rect >> 2] : 0;
    var args = rect ? HEAP32[rect + 4 >> 2] : 0;
    var b = a ? HEAP32[a >> 2] : 0;
    var u = a ? HEAP32[a + 4 >> 2] : 0;
    var theme = result ? HEAP32[result >> 2] : 0;
    var end = result ? HEAP32[result + 4 >> 2] : 0;
    /** @type {number} */
    var mask = 0;
    /** @type {number} */
    var m_0 = 0;
    /** @type {number} */
    var ret = 0;
    /** @type {number} */
    var value = 0;
    /** @type {number} */
    var y = 0;
    /** @type {number} */
    var hasUtf = 0;
    /** @type {number} */
    var _a = (rect ? HEAP32[rect >> 2] : 0) | (a ? HEAP32[a >> 2] : 0) | (result ? HEAP32[result >> 2] : 0);
    /** @type {number} */
    var frictionImpulse2 = (rect ? HEAP32[rect + 4 >> 2] : 0) | (a ? HEAP32[a + 4 >> 2] : 0) | (result ? HEAP32[result + 4 >> 2] : 0);
    /** @type {number} */
    var i = 0;
    for (; i < functionCount; i++) {
      /** @type {number} */
      var t = 1 << i % 32;
      if (!add(i, _a, frictionImpulse2, t)) {
        continue;
      }
      var item = FS[_$_81a2[1142]](i);
      if (!item) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1143]]);
      }
      var status = SYSCALLS[_$_81a2[1552]];
      if (item[_$_81a2[863]][_$_81a2[1553]]) {
        status = item[_$_81a2[863]][_$_81a2[1553]](item);
      }
      if (status & 1 && add(i, pos, args, t)) {
        if (i < 32) {
          /** @type {number} */
          mask = mask | t;
        } else {
          /** @type {number} */
          m_0 = m_0 | t;
        }
        $88++;
      }
      if (status & 4 && add(i, b, u, t)) {
        if (i < 32) {
          /** @type {number} */
          ret = ret | t;
        } else {
          /** @type {number} */
          value = value | t;
        }
        $88++;
      }
      if (status & 2 && add(i, theme, end, t)) {
        if (i < 32) {
          /** @type {number} */
          y = y | t;
        } else {
          /** @type {number} */
          hasUtf = hasUtf | t;
        }
        $88++;
      }
    }
    if (rect) {
      /** @type {number} */
      HEAP32[rect >> 2] = mask;
      /** @type {number} */
      HEAP32[rect + 4 >> 2] = m_0;
    }
    if (a) {
      /** @type {number} */
      HEAP32[a >> 2] = ret;
      /** @type {number} */
      HEAP32[a + 4 >> 2] = value;
    }
    if (result) {
      /** @type {number} */
      HEAP32[result >> 2] = y;
      /** @type {number} */
      HEAP32[result + 4 >> 2] = hasUtf;
    }
    return $88;
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @param {?} drop_stack
 * @param {?} which
 * @return {?}
 */
function ___syscall140(drop_stack, which) {
  SYSCALLS[_$_81a2[1268]] = which;
  try {
    var event = SYSCALLS[_$_81a2[1271]]();
    var b = SYSCALLS[_$_81a2[994]]();
    var core_user_remove_user_device = SYSCALLS[_$_81a2[994]]();
    var $48 = SYSCALLS[_$_81a2[994]]();
    var GET_AUTH_URL_TIMEOUT = SYSCALLS[_$_81a2[994]]();
    var wsFunction = core_user_remove_user_device;
    FS[_$_81a2[909]](event, wsFunction, GET_AUTH_URL_TIMEOUT);
    HEAP32[$48 >> 2] = event[_$_81a2[945]];
    if (event[_$_81a2[1159]] && wsFunction === 0 && GET_AUTH_URL_TIMEOUT === 0) {
      /** @type {null} */
      event[_$_81a2[1159]] = null;
    }
    return 0;
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @param {?} drop_stack
 * @param {?} which
 * @return {?}
 */
function ___syscall146(drop_stack, which) {
  SYSCALLS[_$_81a2[1268]] = which;
  try {
    var artistTrack = SYSCALLS[_$_81a2[1271]]();
    var GET_AUTH_URL_TIMEOUT = SYSCALLS[_$_81a2[994]]();
    var numKeysDeleted = SYSCALLS[_$_81a2[994]]();
    return SYSCALLS[_$_81a2[1554]](artistTrack, GET_AUTH_URL_TIMEOUT, numKeysDeleted);
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @param {number} a
 * @return {?}
 */
function __isLeapYear(a) {
  return a % 4 === 0 && (a % 100 !== 0 || a % 400 === 0);
}
/**
 * @param {!Object} a
 * @param {number} limit
 * @return {?}
 */
function __arraySum(a, limit) {
  /** @type {number} */
  var ac = 0;
  /** @type {number} */
  var cnt = 0;
  for (; cnt <= limit; ac = ac + a[cnt++]) {
  }
  return ac;
}
/** @type {!Array} */
var __MONTH_DAYS_LEAP = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
/** @type {!Array} */
var __MONTH_DAYS_REGULAR = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
/**
 * @param {!Date} structure
 * @param {number} code
 * @return {?}
 */
function __addDays(structure, code) {
  /** @type {!Date} */
  var taiji = new Date(structure[_$_81a2[677]]());
  for (; code > 0;) {
    var hyphen = __isLeapYear(taiji[_$_81a2[675]]());
    var p = taiji[_$_81a2[674]]();
    var tAniData = (hyphen ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[p];
    if (code > tAniData - taiji[_$_81a2[673]]()) {
      /** @type {number} */
      code = code - (tAniData - taiji[_$_81a2[673]]() + 1);
      taiji[_$_81a2[1555]](1);
      if (p < 11) {
        taiji[_$_81a2[1556]](p + 1);
      } else {
        taiji[_$_81a2[1556]](0);
        taiji[_$_81a2[1557]](taiji[_$_81a2[675]]() + 1);
      }
    } else {
      taiji[_$_81a2[1555]](taiji[_$_81a2[673]]() + code);
      return taiji;
    }
  }
  return taiji;
}
/**
 * @param {?} d
 * @param {?} locale
 * @param {undefined} date
 * @param {number} format
 * @return {?}
 */
function _strftime(d, locale, date, format) {
  /**
   * @param {number} exp
   * @param {number} v
   * @param {!Object} d
   * @return {?}
   */
  function $(exp, v, d) {
    var a = typeof exp === _$_81a2[110] ? exp[_$_81a2[6]]() : exp || _$_81a2[4];
    for (; a[_$_81a2[36]] < v;) {
      a = d[0] + a;
    }
    return a;
  }
  /**
   * @param {number} func
   * @param {number} a
   * @return {?}
   */
  function adaptAtoB(func, a) {
    return $(func, a, _$_81a2[1302]);
  }
  /**
   * @param {?} method
   * @param {!Date} func
   * @return {?}
   */
  function callback(method, func) {
    /**
     * @param {number} isCalled
     * @return {?}
     */
    function complete(isCalled) {
      return isCalled < 0 ? -1 : isCalled > 0 ? 1 : 0;
    }
    var contents;
    if ((contents = complete(method[_$_81a2[675]]() - func[_$_81a2[675]]())) === 0) {
      if ((contents = complete(method[_$_81a2[674]]() - func[_$_81a2[674]]())) === 0) {
        contents = complete(method[_$_81a2[673]]() - func[_$_81a2[673]]());
      }
    }
    return contents;
  }
  /**
   * @param {!Date} now
   * @return {?}
   */
  function getTime(now) {
    switch(now[_$_81a2[676]]()) {
      case 0:
        return new Date(now[_$_81a2[675]]() - 1, 11, 29);
      case 1:
        return now;
      case 2:
        return new Date(now[_$_81a2[675]](), 0, 3);
      case 3:
        return new Date(now[_$_81a2[675]](), 0, 2);
      case 4:
        return new Date(now[_$_81a2[675]](), 0, 1);
      case 5:
        return new Date(now[_$_81a2[675]]() - 1, 11, 31);
      case 6:
        return new Date(now[_$_81a2[675]]() - 1, 11, 30);
    }
  }
  /**
   * @param {?} frame
   * @return {?}
   */
  function loadImageFromPromise(frame) {
    var EI_multiply = __addDays(new Date(frame[_$_81a2[1584]] + 1900, 0, 1), frame[_$_81a2[1585]]);
    /** @type {!Date} */
    var now = new Date(EI_multiply[_$_81a2[675]](), 0, 4);
    /** @type {!Date} */
    var then = new Date(EI_multiply[_$_81a2[675]]() + 1, 0, 4);
    var time = getTime(now);
    var error = getTime(then);
    if (callback(time, EI_multiply) <= 0) {
      if (callback(error, EI_multiply) <= 0) {
        return EI_multiply[_$_81a2[675]]() + 1;
      } else {
        return EI_multiply[_$_81a2[675]]();
      }
    } else {
      return EI_multiply[_$_81a2[675]]() - 1;
    }
  }
  var ret = HEAP32[format + 40 >> 2];
  var expected = {
    tm_sec : HEAP32[format >> 2],
    tm_min : HEAP32[format + 4 >> 2],
    tm_hour : HEAP32[format + 8 >> 2],
    tm_mday : HEAP32[format + 12 >> 2],
    tm_mon : HEAP32[format + 16 >> 2],
    tm_year : HEAP32[format + 20 >> 2],
    tm_wday : HEAP32[format + 24 >> 2],
    tm_yday : HEAP32[format + 28 >> 2],
    tm_isdst : HEAP32[format + 32 >> 2],
    tm_gmtoff : HEAP32[format + 36 >> 2],
    tm_zone : ret ? Pointer_stringify(ret) : _$_81a2[4]
  };
  var value = Pointer_stringify(date);
  var egressPerm = {
    "%c" : _$_81a2[1558],
    "%D" : _$_81a2[1559],
    "%F" : _$_81a2[1560],
    "%h" : _$_81a2[1561],
    "%r" : _$_81a2[1562],
    "%R" : _$_81a2[1563],
    "%T" : _$_81a2[1564],
    "%x" : _$_81a2[1559],
    "%X" : _$_81a2[1564]
  };
  var i;
  for (i in egressPerm) {
    value = value[_$_81a2[7]](new RegExp(i, _$_81a2[10]), egressPerm[i]);
  }
  /** @type {!Array} */
  var revManifest = [_$_81a2[1565], _$_81a2[1566], _$_81a2[1567], _$_81a2[1568], _$_81a2[1569], _$_81a2[1570], _$_81a2[1571]];
  /** @type {!Array} */
  var max7219_alphabet_object = [_$_81a2[1572], _$_81a2[1573], _$_81a2[1574], _$_81a2[1575], _$_81a2[1576], _$_81a2[1577], _$_81a2[1578], _$_81a2[1579], _$_81a2[1580], _$_81a2[1581], _$_81a2[1582], _$_81a2[1583]];
  var cmprtr = {
    "%a" : function(a) {
      return revManifest[a[_$_81a2[1587]]][_$_81a2[1586]](0, 3);
    },
    "%A" : function(a) {
      return revManifest[a[_$_81a2[1587]]];
    },
    "%b" : function(a) {
      return max7219_alphabet_object[a[_$_81a2[1588]]][_$_81a2[1586]](0, 3);
    },
    "%B" : function(a) {
      return max7219_alphabet_object[a[_$_81a2[1588]]];
    },
    "%C" : function(a) {
      var b = a[_$_81a2[1584]] + 1900;
      return adaptAtoB(b / 100 | 0, 2);
    },
    "%d" : function(a) {
      return adaptAtoB(a[_$_81a2[1589]], 2);
    },
    "%e" : function(arrayOfSelects) {
      return $(arrayOfSelects[_$_81a2[1589]], 2, _$_81a2[1300]);
    },
    "%g" : function(chaiAsPromised) {
      return loadImageFromPromise(chaiAsPromised)[_$_81a2[6]]()[_$_81a2[1586]](2);
    },
    "%G" : function(chaiAsPromised) {
      return loadImageFromPromise(chaiAsPromised);
    },
    "%H" : function(a) {
      return adaptAtoB(a[_$_81a2[1590]], 2);
    },
    "%I" : function(voicemailPrefs) {
      var obj = voicemailPrefs[_$_81a2[1590]];
      if (obj == 0) {
        /** @type {number} */
        obj = 12;
      } else {
        if (obj > 12) {
          /** @type {number} */
          obj = obj - 12;
        }
      }
      return adaptAtoB(obj, 2);
    },
    "%j" : function(a) {
      return adaptAtoB(a[_$_81a2[1589]] + __arraySum(__isLeapYear(a[_$_81a2[1584]] + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, a[_$_81a2[1588]] - 1), 3);
    },
    "%m" : function(a) {
      return adaptAtoB(a[_$_81a2[1588]] + 1, 2);
    },
    "%M" : function(a) {
      return adaptAtoB(a[_$_81a2[1591]], 2);
    },
    "%n" : function() {
      return _$_81a2[172];
    },
    "%p" : function(a) {
      if (a[_$_81a2[1590]] >= 0 && a[_$_81a2[1590]] < 12) {
        return _$_81a2[1592];
      } else {
        return _$_81a2[1593];
      }
    },
    "%S" : function(a) {
      return adaptAtoB(a[_$_81a2[1594]], 2);
    },
    "%t" : function() {
      return _$_81a2[1595];
    },
    "%u" : function(dateFieldArray) {
      /** @type {!Date} */
      var expected_date2 = new Date(dateFieldArray[_$_81a2[1584]] + 1900, dateFieldArray[_$_81a2[1588]] + 1, dateFieldArray[_$_81a2[1589]], 0, 0, 0, 0);
      return expected_date2[_$_81a2[676]]() || 7;
    },
    "%U" : function(ar) {
      /** @type {!Date} */
      var value = new Date(ar[_$_81a2[1584]] + 1900, 0, 1);
      var html = value[_$_81a2[676]]() === 0 ? value : __addDays(value, 7 - value[_$_81a2[676]]());
      /** @type {!Date} */
      var d = new Date(ar[_$_81a2[1584]] + 1900, ar[_$_81a2[1588]], ar[_$_81a2[1589]]);
      if (callback(html, d) < 0) {
        /** @type {number} */
        var f = __arraySum(__isLeapYear(d[_$_81a2[675]]()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, d[_$_81a2[674]]() - 1) - 31;
        /** @type {number} */
        var shoot_player_ = 31 - html[_$_81a2[673]]();
        var delta = shoot_player_ + f + d[_$_81a2[673]]();
        return adaptAtoB(Math[_$_81a2[94]](delta / 7), 2);
      }
      return callback(html, value) === 0 ? _$_81a2[1596] : _$_81a2[1597];
    },
    "%V" : function(a) {
      /** @type {!Date} */
      var then = new Date(a[_$_81a2[1584]] + 1900, 0, 4);
      /** @type {!Date} */
      var timestamp = new Date(a[_$_81a2[1584]] + 1901, 0, 4);
      var now = getTime(then);
      var time = getTime(timestamp);
      var mixin = __addDays(new Date(a[_$_81a2[1584]] + 1900, 0, 1), a[_$_81a2[1585]]);
      if (callback(mixin, now) < 0) {
        return _$_81a2[1598];
      }
      if (callback(time, mixin) <= 0) {
        return _$_81a2[1596];
      }
      var delta;
      if (now[_$_81a2[675]]() < a[_$_81a2[1584]] + 1900) {
        /** @type {number} */
        delta = a[_$_81a2[1585]] + 32 - now[_$_81a2[673]]();
      } else {
        /** @type {number} */
        delta = a[_$_81a2[1585]] + 1 - now[_$_81a2[673]]();
      }
      return adaptAtoB(Math[_$_81a2[94]](delta / 7), 2);
    },
    "%w" : function(dateFieldArray) {
      /** @type {!Date} */
      var expected_date2 = new Date(dateFieldArray[_$_81a2[1584]] + 1900, dateFieldArray[_$_81a2[1588]] + 1, dateFieldArray[_$_81a2[1589]], 0, 0, 0, 0);
      return expected_date2[_$_81a2[676]]();
    },
    "%W" : function(ar) {
      /** @type {!Date} */
      var value = new Date(ar[_$_81a2[1584]], 0, 1);
      var html = value[_$_81a2[676]]() === 1 ? value : __addDays(value, value[_$_81a2[676]]() === 0 ? 1 : 7 - value[_$_81a2[676]]() + 1);
      /** @type {!Date} */
      var d = new Date(ar[_$_81a2[1584]] + 1900, ar[_$_81a2[1588]], ar[_$_81a2[1589]]);
      if (callback(html, d) < 0) {
        /** @type {number} */
        var f = __arraySum(__isLeapYear(d[_$_81a2[675]]()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, d[_$_81a2[674]]() - 1) - 31;
        /** @type {number} */
        var shoot_player_ = 31 - html[_$_81a2[673]]();
        var delta = shoot_player_ + f + d[_$_81a2[673]]();
        return adaptAtoB(Math[_$_81a2[94]](delta / 7), 2);
      }
      return callback(html, value) === 0 ? _$_81a2[1596] : _$_81a2[1597];
    },
    "%y" : function(a) {
      return (a[_$_81a2[1584]] + 1900)[_$_81a2[6]]()[_$_81a2[1586]](2);
    },
    "%Y" : function(a) {
      return a[_$_81a2[1584]] + 1900;
    },
    "%z" : function(argumentsHash) {
      var value = argumentsHash[_$_81a2[1599]];
      /** @type {boolean} */
      var min = value >= 0;
      /** @type {number} */
      value = Math[_$_81a2[215]](value) / 60;
      /** @type {number} */
      value = value / 60 * 100 + value % 60;
      return (min ? _$_81a2[1600] : _$_81a2[1249]) + String(_$_81a2[1601] + value)[_$_81a2[41]](-4);
    },
    "%Z" : function(a) {
      return a[_$_81a2[1602]];
    },
    "%%" : function() {
      return _$_81a2[1603];
    }
  };
  for (i in cmprtr) {
    if (value[_$_81a2[242]](i) >= 0) {
      value = value[_$_81a2[7]](new RegExp(i, _$_81a2[10]), cmprtr[i](expected));
    }
  }
  var arr = intArrayFromString(value, false);
  if (arr[_$_81a2[36]] > locale) {
    return 0;
  }
  writeArrayToMemory(arr, d);
  return arr[_$_81a2[36]] - 1;
}
/**
 * @param {?} isSlidingUp
 * @param {?} $cont
 * @return {?}
 */
function ___syscall145(isSlidingUp, $cont) {
  SYSCALLS[_$_81a2[1268]] = $cont;
  try {
    var artistTrack = SYSCALLS[_$_81a2[1271]]();
    var GET_AUTH_URL_TIMEOUT = SYSCALLS[_$_81a2[994]]();
    var numKeysDeleted = SYSCALLS[_$_81a2[994]]();
    return SYSCALLS[_$_81a2[1604]](artistTrack, GET_AUTH_URL_TIMEOUT, numKeysDeleted);
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @return {undefined}
 */
function _emscripten_glStencilFuncSeparate(a, b, areMutuallyExclusive, parentType1) {
  GLctx[_$_81a2[1605]](a, b, areMutuallyExclusive, parentType1);
}
/**
 * @return {undefined}
 */
function _gendsll32() {
  Neptune[_$_81a2[25]](_$_81a2[1606]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genmflo() {
  Neptune[_$_81a2[25]](_$_81a2[1607]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genround_l_d() {
  Neptune[_$_81a2[25]](_$_81a2[1608]);
  abort(-1);
}
/**
 * @param {number} str
 * @param {number} ptr
 * @param {?} name
 * @return {undefined}
 */
function emscriptenWebGLGet(str, ptr, name) {
  if (!ptr) {
    GL[_$_81a2[680]](1281);
    return;
  }
  var value = undefined;
  switch(str) {
    case 36346:
      /** @type {number} */
      value = 1;
      break;
    case 36344:
      if (name !== _$_81a2[1427] && name !== _$_81a2[1609]) {
        GL[_$_81a2[680]](1280);
      }
      return;
    case 36345:
      /** @type {number} */
      value = 0;
      break;
    case 34466:
      var custom_infos = GLctx[_$_81a2[328]](34467);
      value = custom_infos[_$_81a2[36]];
      break;
  }
  if (value === undefined) {
    var obj = GLctx[_$_81a2[328]](str);
    switch(typeof obj) {
      case _$_81a2[110]:
        value = obj;
        break;
      case _$_81a2[1426]:
        /** @type {number} */
        value = obj ? 1 : 0;
        break;
      case _$_81a2[105]:
        GL[_$_81a2[680]](1280);
        return;
      case _$_81a2[21]:
        if (obj === null) {
          switch(str) {
            case 34964:
            case 35725:
            case 34965:
            case 36006:
            case 36007:
            case 32873:
            case 34068:
              {
                /** @type {number} */
                value = 0;
                break;
              }
            default:
              {
                GL[_$_81a2[680]](1280);
                return;
              }
          }
        } else {
          if (obj instanceof Float32Array || obj instanceof Uint32Array || obj instanceof Int32Array || obj instanceof Array) {
            /** @type {number} */
            var i = 0;
            for (; i < obj[_$_81a2[36]]; ++i) {
              switch(name) {
                case _$_81a2[1427]:
                  HEAP32[ptr + i * 4 >> 2] = obj[i];
                  break;
                case _$_81a2[1428]:
                  HEAPF32[ptr + i * 4 >> 2] = obj[i];
                  break;
                case _$_81a2[1610]:
                  /** @type {number} */
                  HEAP8[ptr + i >> 0] = obj[i] ? 1 : 0;
                  break;
                default:
                  throw _$_81a2[1611] + name;
              }
            }
            return;
          } else {
            if (obj instanceof WebGLBuffer || obj instanceof WebGLProgram || obj instanceof WebGLFramebuffer || obj instanceof WebGLRenderbuffer || obj instanceof WebGLTexture) {
              /** @type {number} */
              value = obj[_$_81a2[428]] | 0;
            } else {
              GL[_$_81a2[680]](1280);
              return;
            }
          }
        }
        break;
      default:
        GL[_$_81a2[680]](1280);
        return;
    }
  }
  switch(name) {
    case _$_81a2[1609]:
      /** @type {!Array} */
      tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0)];
      HEAP32[ptr >> 2] = tempI64[0];
      HEAP32[ptr + 4 >> 2] = tempI64[1];
      break;
    case _$_81a2[1427]:
      HEAP32[ptr >> 2] = value;
      break;
    case _$_81a2[1428]:
      HEAPF32[ptr >> 2] = value;
      break;
    case _$_81a2[1610]:
      /** @type {number} */
      HEAP8[ptr >> 0] = value ? 1 : 0;
      break;
    default:
      throw _$_81a2[1611] + name;
  }
}
/**
 * @param {undefined} fnName
 * @param {undefined} func
 * @return {undefined}
 */
function _emscripten_glGetFloatv(fnName, func) {
  emscriptenWebGLGet(fnName, func, _$_81a2[1428]);
}
/**
 * @param {?} from_row
 * @return {undefined}
 */
function _emscripten_glDisableVertexAttribArray(from_row) {
  var from_row_elem = GL[_$_81a2[326]][_$_81a2[336]][from_row];
  /** @type {boolean} */
  from_row_elem[_$_81a2[338]] = false;
  GLctx[_$_81a2[1317]](from_row);
}
/**
 * @param {?} computeOverlap
 * @param {string} index
 * @return {undefined}
 */
function _glBindRenderbuffer(computeOverlap, index) {
  GLctx[_$_81a2[687]](computeOverlap, index ? GL[_$_81a2[654]][index] : null);
}
/**
 * @param {number} h
 * @param {number} r
 * @return {undefined}
 */
function _emscripten_glGenRenderbuffers(h, r) {
  /** @type {number} */
  var d = 0;
  for (; d < h; d++) {
    var HEAP = GLctx[_$_81a2[697]]();
    if (!HEAP) {
      GL[_$_81a2[680]](1282);
      for (; d < h;) {
        /** @type {number} */
        HEAP32[r + d++ * 4 >> 2] = 0;
      }
      return;
    }
    var $129 = GL[_$_81a2[369]](GL[_$_81a2[654]]);
    HEAP[_$_81a2[428]] = $129;
    GL[_$_81a2[654]][$129] = HEAP;
    HEAP32[r + d * 4 >> 2] = $129;
  }
}
/**
 * @param {?} isSlidingUp
 * @param {?} $cont
 * @return {?}
 */
function ___syscall3(isSlidingUp, $cont) {
  SYSCALLS[_$_81a2[1268]] = $cont;
  try {
    var artistTrack = SYSCALLS[_$_81a2[1271]]();
    var GET_AUTH_URL_TIMEOUT = SYSCALLS[_$_81a2[994]]();
    var numKeysDeleted = SYSCALLS[_$_81a2[994]]();
    return FS[_$_81a2[27]](artistTrack, HEAP8, GET_AUTH_URL_TIMEOUT, numKeysDeleted);
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @return {undefined}
 */
function _gensyscall() {
  Neptune[_$_81a2[25]](_$_81a2[1612]);
  abort(-1);
}
/**
 * @param {?} att
 * @return {?}
 */
function _glIsProgram(att) {
  att = GL[_$_81a2[422]][att];
  if (!att) {
    return 0;
  }
  return GLctx[_$_81a2[1410]](att);
}
/**
 * @param {?} off
 * @param {number} len
 * @param {number} i
 * @param {number} buf
 * @return {undefined}
 */
function _glGetProgramInfoLog(off, len, i, buf) {
  var string = GLctx[_$_81a2[1389]](GL[_$_81a2[422]][off]);
  if (string === null) {
    string = _$_81a2[1390];
  }
  if (len > 0 && buf) {
    var s = stringToUTF8(string, buf, len);
    if (i) {
      HEAP32[i >> 2] = s;
    }
  } else {
    if (i) {
      /** @type {number} */
      HEAP32[i >> 2] = 0;
    }
  }
}
/**
 * @return {undefined}
 */
function _genbltz_idle() {
  Neptune[_$_81a2[25]](_$_81a2[1613]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbeql() {
  Neptune[_$_81a2[25]](_$_81a2[1614]);
  abort(-1);
}
/**
 * @param {number} ptr
 * @param {number} src
 * @return {?}
 */
function _nanosleep(ptr, src) {
  var len = HEAP32[ptr >> 2];
  var utf32 = HEAP32[ptr + 4 >> 2];
  if (src !== 0) {
    /** @type {number} */
    HEAP32[src >> 2] = 0;
    /** @type {number} */
    HEAP32[src + 4 >> 2] = 0;
  }
  return _usleep(len * 1E6 + utf32 / 1E3);
}
/**
 * @param {?} port_num
 * @param {number} x
 * @return {undefined}
 */
function _glVertexAttrib4fv(port_num, x) {
  GLctx[_$_81a2[1381]](port_num, HEAPF32[x >> 2], HEAPF32[x + 4 >> 2], HEAPF32[x + 8 >> 2], HEAPF32[x + 12 >> 2]);
}
/**
 * @param {?} off
 * @param {number} len
 * @param {number} i
 * @param {number} buf
 * @return {undefined}
 */
function _emscripten_glGetShaderInfoLog(off, len, i, buf) {
  var string = GLctx[_$_81a2[1421]](GL[_$_81a2[664]][off]);
  if (string === null) {
    string = _$_81a2[1390];
  }
  if (len > 0 && buf) {
    var s = stringToUTF8(string, buf, len);
    if (i) {
      HEAP32[i >> 2] = s;
    }
  } else {
    if (i) {
      /** @type {number} */
      HEAP32[i >> 2] = 0;
    }
  }
}
/**
 * @return {?}
 */
function _emscripten_glLoadIdentity() {
  throw _$_81a2[1615];
}
/**
 * @param {?} url
 * @param {number} opt_target
 * @param {number} opt_targetItem
 * @return {undefined}
 */
function _emscripten_glUniform3fv(url, opt_target, opt_targetItem) {
  var routes;
  if (3 * opt_target <= GL[_$_81a2[307]]) {
    routes = GL[_$_81a2[308]][3 * opt_target - 1];
    /** @type {number} */
    var pattern = 0;
    for (; pattern < 3 * opt_target; pattern = pattern + 3) {
      routes[pattern] = HEAPF32[opt_targetItem + 4 * pattern >> 2];
      routes[pattern + 1] = HEAPF32[opt_targetItem + (4 * pattern + 4) >> 2];
      routes[pattern + 2] = HEAPF32[opt_targetItem + (4 * pattern + 8) >> 2];
    }
  } else {
    routes = HEAPF32[_$_81a2[147]](opt_targetItem >> 2, opt_targetItem + opt_target * 12 >> 2);
  }
  GLctx[_$_81a2[1446]](GL[_$_81a2[424]][url], routes);
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _glActiveTexture(a) {
  GLctx[_$_81a2[1616]](a);
}
/**
 * @param {?} from_row
 * @return {undefined}
 */
function _glEnableVertexAttribArray(from_row) {
  var from_row_elem = GL[_$_81a2[326]][_$_81a2[336]][from_row];
  /** @type {boolean} */
  from_row_elem[_$_81a2[338]] = true;
  GLctx[_$_81a2[1528]](from_row);
}
/**
 * @param {?} mmCoreSplitViewBlock
 * @param {?} pv_nest
 * @param {undefined} struc_store
 * @param {undefined} count
 * @param {undefined} a
 * @param {?} fn
 * @param {undefined} name
 * @return {undefined}
 */
function _glReadPixels(mmCoreSplitViewBlock, pv_nest, struc_store, count, a, fn, name) {
  var node = emscriptenWebGLGetTexPixelData(fn, a, struc_store, count, name, a);
  if (!node) {
    GL[_$_81a2[680]](1280);
    return;
  }
  GLctx[_$_81a2[1617]](mmCoreSplitViewBlock, pv_nest, struc_store, count, a, fn, node);
}
/**
 * @param {?} rootValue
 * @param {?} effectivePath
 * @param {?} f
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {undefined}
 */
function _emscripten_glDrawElementsInstanced(rootValue, effectivePath, f, b, areMutuallyExclusive) {
  GLctx[_$_81a2[386]](rootValue, effectivePath, f, b, areMutuallyExclusive);
}
/**
 * @param {?} url
 * @param {?} opt_target
 * @param {?} opt_rel
 * @param {?} mmCoreSplitViewBlock
 * @param {?} $state
 * @return {undefined}
 */
function _glUniform4f(url, opt_target, opt_rel, mmCoreSplitViewBlock, $state) {
  GLctx[_$_81a2[1509]](GL[_$_81a2[424]][url], opt_target, opt_rel, mmCoreSplitViewBlock, $state);
}
/**
 * @return {undefined}
 */
function _genmthi() {
  Neptune[_$_81a2[25]](_$_81a2[1618]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gencvt_d_l() {
  Neptune[_$_81a2[25]](_$_81a2[1619]);
  abort(-1);
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _emscripten_glClearStencil(a) {
  GLctx[_$_81a2[1620]](a);
}
/**
 * @return {undefined}
 */
function _gensub_d() {
  Neptune[_$_81a2[25]](_$_81a2[1621]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _emscripten_glGetObjectParameterivARB() {
  Neptune[_$_81a2[25]](_$_81a2[1622]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gencvt_d_w() {
  Neptune[_$_81a2[25]](_$_81a2[1623]);
  abort(-1);
}
/**
 * @param {?} keyringConnectionId
 * @param {?} siteId
 * @return {undefined}
 */
function _emscripten_glDetachShader(keyringConnectionId, siteId) {
  GLctx[_$_81a2[1624]](GL[_$_81a2[422]][keyringConnectionId], GL[_$_81a2[664]][siteId]);
}
/**
 * @param {number} h
 * @param {number} r
 * @return {undefined}
 */
function _emscripten_glDeleteVertexArrays(h, r) {
  /** @type {number} */
  var d = 0;
  for (; d < h; d++) {
    var alpha = HEAP32[r + d * 4 >> 2];
    GLctx[_$_81a2[391]](GL[_$_81a2[716]][alpha]);
    /** @type {null} */
    GL[_$_81a2[716]][alpha] = null;
  }
}
/**
 * @return {undefined}
 */
function _genbltz_out() {
  Neptune[_$_81a2[25]](_$_81a2[1625]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gendmultu() {
  Neptune[_$_81a2[25]](_$_81a2[1626]);
  abort(-1);
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _emscripten_glGenerateMipmap(a) {
  GLctx[_$_81a2[1548]](a);
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _emscripten_glCullFace(a) {
  GLctx[_$_81a2[1533]](a);
}
/**
 * @param {string} keyName
 * @return {undefined}
 */
function _emscripten_glUseProgram(keyName) {
  GLctx[_$_81a2[1454]](keyName ? GL[_$_81a2[422]][keyName] : null);
}
/**
 * @param {?} url
 * @param {number} opt_target
 * @param {number} opt_targetItem
 * @return {undefined}
 */
function _emscripten_glUniform2fv(url, opt_target, opt_targetItem) {
  var routes;
  if (2 * opt_target <= GL[_$_81a2[307]]) {
    routes = GL[_$_81a2[308]][2 * opt_target - 1];
    /** @type {number} */
    var pattern = 0;
    for (; pattern < 2 * opt_target; pattern = pattern + 2) {
      routes[pattern] = HEAPF32[opt_targetItem + 4 * pattern >> 2];
      routes[pattern + 1] = HEAPF32[opt_targetItem + (4 * pattern + 4) >> 2];
    }
  } else {
    routes = HEAPF32[_$_81a2[147]](opt_targetItem >> 2, opt_targetItem + opt_target * 8 >> 2);
  }
  GLctx[_$_81a2[1627]](GL[_$_81a2[424]][url], routes);
}
/**
 * @return {undefined}
 */
function _genround_w_d() {
  Neptune[_$_81a2[25]](_$_81a2[1628]);
  abort(-1);
}
/**
 * @param {?} off
 * @param {number} len
 * @param {number} i
 * @param {number} buf
 * @return {undefined}
 */
function _glGetShaderInfoLog(off, len, i, buf) {
  var string = GLctx[_$_81a2[1421]](GL[_$_81a2[664]][off]);
  if (string === null) {
    string = _$_81a2[1390];
  }
  if (len > 0 && buf) {
    var s = stringToUTF8(string, buf, len);
    if (i) {
      HEAP32[i >> 2] = s;
    }
  } else {
    if (i) {
      /** @type {number} */
      HEAP32[i >> 2] = 0;
    }
  }
}
/**
 * @return {undefined}
 */
function _gensltiu() {
  Neptune[_$_81a2[25]](_$_81a2[1629]);
  abort(-1);
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} ud
 * @param {?} na
 * @return {undefined}
 */
function _emscripten_glFramebufferRenderbuffer(CallAtEnd, a, ud, na) {
  GLctx[_$_81a2[655]](CallAtEnd, a, ud, GL[_$_81a2[654]][na]);
}
/**
 * @return {undefined}
 */
function _genmul_s() {
  Neptune[_$_81a2[25]](_$_81a2[1630]);
  abort(-1);
}
/**
 * @param {number} h
 * @param {number} r
 * @return {undefined}
 */
function _emscripten_glDeleteFramebuffers(h, r) {
  /** @type {number} */
  var d = 0;
  for (; d < h; ++d) {
    var len = HEAP32[r + d * 4 >> 2];
    var funcParent = GL[_$_81a2[1280]][len];
    if (!funcParent) {
      continue;
    }
    GLctx[_$_81a2[1281]](funcParent);
    /** @type {number} */
    funcParent[_$_81a2[428]] = 0;
    /** @type {null} */
    GL[_$_81a2[1280]][len] = null;
  }
}
/**
 * @param {?} url
 * @param {number} opt_target
 * @param {number} opt_targetItem
 * @return {undefined}
 */
function _emscripten_glUniform2iv(url, opt_target, opt_targetItem) {
  GLctx[_$_81a2[1631]](GL[_$_81a2[424]][url], HEAP32[_$_81a2[147]](opt_targetItem >> 2, opt_targetItem + opt_target * 8 >> 2));
}
/**
 * @return {undefined}
 */
function _gensdr() {
  Neptune[_$_81a2[25]](_$_81a2[1632]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genjal_idle() {
  Neptune[_$_81a2[25]](_$_81a2[1633]);
  abort(-1);
}
/**
 * @param {number} h
 * @param {number} r
 * @return {undefined}
 */
function _glGenBuffers(h, r) {
  /** @type {number} */
  var d = 0;
  for (; d < h; d++) {
    var HEAP = GLctx[_$_81a2[320]]();
    if (!HEAP) {
      GL[_$_81a2[680]](1282);
      for (; d < h;) {
        /** @type {number} */
        HEAP32[r + d++ * 4 >> 2] = 0;
      }
      return;
    }
    var $129 = GL[_$_81a2[369]](GL[_$_81a2[349]]);
    HEAP[_$_81a2[428]] = $129;
    GL[_$_81a2[349]][$129] = HEAP;
    HEAP32[r + d * 4 >> 2] = $129;
  }
}
/**
 * @param {?} ballNumber
 * @return {undefined}
 */
function _emscripten_glBindVertexArray(ballNumber) {
  GLctx[_$_81a2[393]](GL[_$_81a2[716]][ballNumber]);
  var a = GLctx[_$_81a2[328]](GLctx[_$_81a2[331]]);
  /** @type {number} */
  GL[_$_81a2[732]] = a ? a[_$_81a2[428]] | 0 : 0;
}
/**
 * @return {undefined}
 */
function _genbltzall_idle() {
  Neptune[_$_81a2[25]](_$_81a2[1634]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genj() {
  Neptune[_$_81a2[25]](_$_81a2[1635]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @return {undefined}
 */
function _glBlendFunc(a, b) {
  GLctx[_$_81a2[1521]](a, b);
}
/**
 * @return {?}
 */
function _glCreateProgram() {
  var i = GL[_$_81a2[369]](GL[_$_81a2[422]]);
  var b = GLctx[_$_81a2[1464]]();
  b[_$_81a2[428]] = i;
  GL[_$_81a2[422]][i] = b;
  return i;
}
/**
 * @param {?} e
 * @param {?} f
 * @param {number} a
 * @return {undefined}
 */
function _emscripten_glGetBufferParameteriv(e, f, a) {
  if (!a) {
    GL[_$_81a2[680]](1281);
    return;
  }
  HEAP32[a >> 2] = GLctx[_$_81a2[1636]](e, f);
}
/**
 * @param {?} a
 * @param {number} b
 * @return {undefined}
 */
function _longjmp(a, b) {
  Neptune[_$_81a2[1637]](a, b || 1);
  throw _$_81a2[1638];
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _emscripten_glDepthMask(a) {
  GLctx[_$_81a2[1639]](!!a);
}
/**
 * @return {undefined}
 */
function _genbgezall() {
  Neptune[_$_81a2[25]](_$_81a2[1640]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbnel_idle() {
  Neptune[_$_81a2[25]](_$_81a2[1641]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbgtzl_idle() {
  Neptune[_$_81a2[25]](_$_81a2[1642]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbne_out() {
  Neptune[_$_81a2[25]](_$_81a2[1643]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genc_lt_s() {
  Neptune[_$_81a2[25]](_$_81a2[1644]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gencvt_l_s() {
  Neptune[_$_81a2[25]](_$_81a2[1645]);
  abort(-1);
}
/**
 * @param {?} subpal
 * @param {number} i
 * @param {number} a
 * @return {undefined}
 */
function _emscripten_glUniform1fv(subpal, i, a) {
  var lineJson;
  if (i <= GL[_$_81a2[307]]) {
    lineJson = GL[_$_81a2[308]][i - 1];
    /** @type {number} */
    var time = 0;
    for (; time < i; ++time) {
      lineJson[time] = HEAPF32[a + 4 * time >> 2];
    }
  } else {
    lineJson = HEAPF32[_$_81a2[147]](a >> 2, a + i * 4 >> 2);
  }
  GLctx[_$_81a2[1646]](GL[_$_81a2[424]][subpal], lineJson);
}
var SOCKFS = {
  mount : function(selector_f) {
    Neptune[_$_81a2[1647]] = Neptune[_$_81a2[1647]] && _$_81a2[21] === typeof Neptune[_$_81a2[1647]] ? Neptune[_$_81a2[1647]] : {};
    Neptune[_$_81a2[1647]][_$_81a2[1648]] = {};
    /**
     * @param {?} subscript
     * @param {?} a
     * @return {?}
     */
    Neptune[_$_81a2[1647]][_$_81a2[44]] = function(subscript, a) {
      if (_$_81a2[22] === typeof a) {
        this[_$_81a2[1648]][subscript] = a;
      }
      return this;
    };
    /**
     * @param {?} ballNumber
     * @param {?} b
     * @return {undefined}
     */
    Neptune[_$_81a2[1647]][_$_81a2[1649]] = function(ballNumber, b) {
      if (_$_81a2[22] === typeof this[_$_81a2[1648]][ballNumber]) {
        this[_$_81a2[1648]][ballNumber][_$_81a2[64]](this, b);
      }
    };
    return FS[_$_81a2[894]](null, _$_81a2[38], 16384 | 511, 0);
  },
  createSocket : function(collection, type, name) {
    /** @type {boolean} */
    var supported = type == 1;
    if (name) {
      assert(supported == (name == 6));
    }
    var data = {
      family : collection,
      type : type,
      protocol : name,
      server : null,
      error : null,
      peers : {},
      pending : [],
      recv_queue : [],
      sock_ops : SOCKFS[_$_81a2[1650]]
    };
    var statsDb = SOCKFS[_$_81a2[1651]]();
    var statsDbPath = FS[_$_81a2[894]](SOCKFS[_$_81a2[1011]], statsDb, 49152, 0);
    statsDbPath[_$_81a2[1652]] = data;
    var contactsArray = FS[_$_81a2[1148]]({
      path : statsDb,
      node : statsDbPath,
      flags : FS[_$_81a2[1146]](_$_81a2[1016]),
      seekable : false,
      stream_ops : SOCKFS[_$_81a2[863]]
    });
    data[_$_81a2[918]] = contactsArray;
    return data;
  },
  getSocket : function(callback) {
    var callbackTick = FS[_$_81a2[1142]](callback);
    if (!callbackTick || !FS[_$_81a2[1653]](callbackTick[_$_81a2[866]][_$_81a2[915]])) {
      return null;
    }
    return callbackTick[_$_81a2[866]][_$_81a2[1652]];
  },
  stream_ops : {
    poll : function(date_param) {
      var artistTrack = date_param[_$_81a2[866]][_$_81a2[1652]];
      return artistTrack[_$_81a2[1654]][_$_81a2[1553]](artistTrack);
    },
    ioctl : function(eventStr, a, b) {
      var artistTrack = eventStr[_$_81a2[866]][_$_81a2[1652]];
      return artistTrack[_$_81a2[1654]][_$_81a2[1166]](artistTrack, a, b);
    },
    read : function(n, c, code, response, done) {
      var scanDoc = n[_$_81a2[866]][_$_81a2[1652]];
      var result = scanDoc[_$_81a2[1654]][_$_81a2[1655]](scanDoc, response);
      if (!result) {
        return 0;
      }
      c[_$_81a2[148]](result[_$_81a2[33]], code);
      return result[_$_81a2[33]][_$_81a2[36]];
    },
    write : function(mem, callback, start, data, cb_) {
      var artistTrack = mem[_$_81a2[866]][_$_81a2[1652]];
      return artistTrack[_$_81a2[1654]][_$_81a2[1656]](artistTrack, callback, start, data);
    },
    close : function(hideDisplay) {
      var artistTrack = hideDisplay[_$_81a2[866]][_$_81a2[1652]];
      artistTrack[_$_81a2[1654]][_$_81a2[1160]](artistTrack);
    }
  },
  nextname : function() {
    if (!SOCKFS[_$_81a2[1651]][_$_81a2[1657]]) {
      /** @type {number} */
      SOCKFS[_$_81a2[1651]][_$_81a2[1657]] = 0;
    }
    return _$_81a2[1658] + SOCKFS[_$_81a2[1651]][_$_81a2[1657]]++ + _$_81a2[168];
  },
  websocket_sock_ops : {
    createPeer : function(name, res, options) {
      var socket;
      if (typeof res === _$_81a2[21]) {
        /** @type {string} */
        socket = res;
        /** @type {null} */
        res = null;
        /** @type {null} */
        options = null;
      }
      if (socket) {
        if (socket[_$_81a2[1659]]) {
          res = socket[_$_81a2[1659]][_$_81a2[1660]];
          options = socket[_$_81a2[1659]][_$_81a2[1661]];
        } else {
          var v = /ws[s]?:\/\/([^:]+):(\d+)/[_$_81a2[853]](socket[_$_81a2[1225]]);
          if (!v) {
            throw new Error(_$_81a2[1662]);
          }
          res = v[1];
          /** @type {number} */
          options = parseInt(v[2], 10);
        }
      } else {
        try {
          var h = Neptune[_$_81a2[1647]] && _$_81a2[21] === typeof Neptune[_$_81a2[1647]];
          var uri = _$_81a2[1665][_$_81a2[7]](_$_81a2[1663], _$_81a2[1664]);
          if (h) {
            if (_$_81a2[105] === typeof Neptune[_$_81a2[1647]][_$_81a2[1225]]) {
              uri = Neptune[_$_81a2[1647]][_$_81a2[1225]];
            }
          }
          if (uri === _$_81a2[1666] || uri === _$_81a2[1667]) {
            var path = res[_$_81a2[2]](_$_81a2[38]);
            uri = uri + path[0] + _$_81a2[289] + options + _$_81a2[38] + path[_$_81a2[41]](1)[_$_81a2[116]](_$_81a2[38]);
          }
          var filter = _$_81a2[48];
          if (h) {
            if (_$_81a2[105] === typeof Neptune[_$_81a2[1647]][_$_81a2[1668]]) {
              filter = Neptune[_$_81a2[1647]][_$_81a2[1668]];
            }
          }
          filter = filter[_$_81a2[7]](/^ +| +$/g, _$_81a2[4])[_$_81a2[2]](/ *, */);
          var nsp = ENVIRONMENT_IS_NODE ? {
            "protocol" : filter[_$_81a2[6]]()
          } : filter;
          var Socket;
          if (ENVIRONMENT_IS_NODE) {
            Socket = require(_$_81a2[1669]);
          } else {
            if (ENVIRONMENT_IS_WEB) {
              Socket = window[_$_81a2[1670]];
            } else {
              /** @type {function(new:WebSocket, string, string=): ?} */
              Socket = WebSocket;
            }
          }
          socket = new Socket(uri, nsp);
          socket[_$_81a2[1671]] = _$_81a2[55];
        } catch (e) {
          throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1672]]);
        }
      }
      var peer = {
        addr : res,
        port : options,
        socket : socket,
        dgram_send_queue : []
      };
      SOCKFS[_$_81a2[1650]][_$_81a2[1673]](name, peer);
      SOCKFS[_$_81a2[1650]][_$_81a2[1674]](name, peer);
      if (name[_$_81a2[340]] === 2 && typeof name[_$_81a2[1675]] !== _$_81a2[13]) {
        peer[_$_81a2[1679]][_$_81a2[107]](new Uint8Array([255, 255, 255, 255, _$_81a2[1676][_$_81a2[159]](0), _$_81a2[1677][_$_81a2[159]](0), _$_81a2[885][_$_81a2[159]](0), _$_81a2[1678][_$_81a2[159]](0), (name[_$_81a2[1675]] & 65280) >> 8, name[_$_81a2[1675]] & 255]));
      }
      return peer;
    },
    getPeer : function(callback, id, index) {
      return callback[_$_81a2[1680]][id + _$_81a2[289] + index];
    },
    addPeer : function(peerId, isSelf) {
      peerId[_$_81a2[1680]][isSelf[_$_81a2[436]] + _$_81a2[289] + isSelf[_$_81a2[435]]] = isSelf;
    },
    removePeer : function(peerId, connection) {
      delete peerId[_$_81a2[1680]][connection[_$_81a2[436]] + _$_81a2[289] + connection[_$_81a2[435]]];
    },
    handlePeerEvents : function(toggles, member) {
      /**
       * @param {!Object} data
       * @return {undefined}
       */
      function start(data) {
        assert(typeof data !== _$_81a2[105] && data[_$_81a2[245]] !== undefined);
        if (data[_$_81a2[245]] == 0) {
          return;
        }
        /** @type {!Uint8Array} */
        data = new Uint8Array(data);
        var hash_1 = a;
        /** @type {boolean} */
        a = false;
        if (hash_1 && data[_$_81a2[36]] === 10 && data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 && data[4] === _$_81a2[1676][_$_81a2[159]](0) && data[5] === _$_81a2[1677][_$_81a2[159]](0) && data[6] === _$_81a2[885][_$_81a2[159]](0) && data[7] === _$_81a2[1678][_$_81a2[159]](0)) {
          /** @type {number} */
          var loggingInfo = data[8] << 8 | data[9];
          SOCKFS[_$_81a2[1650]][_$_81a2[1682]](toggles, member);
          /** @type {number} */
          member[_$_81a2[435]] = loggingInfo;
          SOCKFS[_$_81a2[1650]][_$_81a2[1673]](toggles, member);
          return;
        }
        toggles[_$_81a2[1683]][_$_81a2[107]]({
          addr : member[_$_81a2[436]],
          port : member[_$_81a2[435]],
          data : data
        });
        Neptune[_$_81a2[1647]][_$_81a2[1649]](_$_81a2[453], toggles[_$_81a2[918]][_$_81a2[882]]);
      }
      /** @type {boolean} */
      var a = true;
      /**
       * @return {undefined}
       */
      var artistTrack = function() {
        Neptune[_$_81a2[1647]][_$_81a2[1649]](_$_81a2[51], toggles[_$_81a2[918]][_$_81a2[882]]);
        try {
          var artistTrack = member[_$_81a2[1679]][_$_81a2[193]]();
          for (; artistTrack;) {
            member[_$_81a2[1681]][_$_81a2[52]](artistTrack);
            artistTrack = member[_$_81a2[1679]][_$_81a2[193]]();
          }
        } catch (e) {
          member[_$_81a2[1681]][_$_81a2[1160]]();
        }
      };
      if (ENVIRONMENT_IS_NODE) {
        member[_$_81a2[1681]][_$_81a2[44]](_$_81a2[51], artistTrack);
        member[_$_81a2[1681]][_$_81a2[44]](_$_81a2[453], function(recordArrayBuffer, canCreateDiscussions) {
          if (!canCreateDiscussions[_$_81a2[48]]) {
            return;
          }
          start((new Uint8Array(recordArrayBuffer))[_$_81a2[33]]);
        });
        member[_$_81a2[1681]][_$_81a2[44]](_$_81a2[1160], function() {
          Neptune[_$_81a2[1647]][_$_81a2[1649]](_$_81a2[1160], toggles[_$_81a2[918]][_$_81a2[882]]);
        });
        member[_$_81a2[1681]][_$_81a2[44]](_$_81a2[973], function(a) {
          toggles[_$_81a2[973]] = ERRNO_CODES[_$_81a2[1684]];
          Neptune[_$_81a2[1647]][_$_81a2[1649]](_$_81a2[973], [toggles[_$_81a2[918]][_$_81a2[882]], toggles[_$_81a2[973]], _$_81a2[1685]]);
        });
      } else {
        /** @type {function(): undefined} */
        member[_$_81a2[1681]][_$_81a2[1686]] = artistTrack;
        /**
         * @return {undefined}
         */
        member[_$_81a2[1681]][_$_81a2[1687]] = function() {
          Neptune[_$_81a2[1647]][_$_81a2[1649]](_$_81a2[1160], toggles[_$_81a2[918]][_$_81a2[882]]);
        };
        /**
         * @param {?} $tabsBody
         * @return {undefined}
         */
        member[_$_81a2[1681]][_$_81a2[1688]] = function adapt($tabsBody) {
          start($tabsBody[_$_81a2[451]]);
        };
        /**
         * @param {?} a
         * @return {undefined}
         */
        member[_$_81a2[1681]][_$_81a2[60]] = function(a) {
          toggles[_$_81a2[973]] = ERRNO_CODES[_$_81a2[1684]];
          Neptune[_$_81a2[1647]][_$_81a2[1649]](_$_81a2[973], [toggles[_$_81a2[918]][_$_81a2[882]], toggles[_$_81a2[973]], _$_81a2[1685]]);
        };
      }
    },
    poll : function(val) {
      if (val[_$_81a2[340]] === 1 && val[_$_81a2[1689]]) {
        return val[_$_81a2[1690]][_$_81a2[36]] ? 64 | 1 : 0;
      }
      /** @type {number} */
      var res = 0;
      var a = val[_$_81a2[340]] === 1 ? SOCKFS[_$_81a2[1650]][_$_81a2[1693]](val, val[_$_81a2[1691]], val[_$_81a2[1692]]) : null;
      if (val[_$_81a2[1683]][_$_81a2[36]] || !a || a && a[_$_81a2[1681]][_$_81a2[1694]] === a[_$_81a2[1681]][_$_81a2[1695]] || a && a[_$_81a2[1681]][_$_81a2[1694]] === a[_$_81a2[1681]][_$_81a2[1696]]) {
        /** @type {number} */
        res = res | (64 | 1);
      }
      if (!a || a && a[_$_81a2[1681]][_$_81a2[1694]] === a[_$_81a2[1681]][_$_81a2[1697]]) {
        /** @type {number} */
        res = res | 4;
      }
      if (a && a[_$_81a2[1681]][_$_81a2[1694]] === a[_$_81a2[1681]][_$_81a2[1695]] || a && a[_$_81a2[1681]][_$_81a2[1694]] === a[_$_81a2[1681]][_$_81a2[1696]]) {
        /** @type {number} */
        res = res | 16;
      }
      return res;
    },
    ioctl : function(uvx1, uvy1, a) {
      switch(uvy1) {
        case 21531:
          /** @type {number} */
          var $46 = 0;
          if (uvx1[_$_81a2[1683]][_$_81a2[36]]) {
            $46 = uvx1[_$_81a2[1683]][0][_$_81a2[451]][_$_81a2[36]];
          }
          HEAP32[a >> 2] = $46;
          return 0;
        default:
          return ERRNO_CODES[_$_81a2[434]];
      }
    },
    close : function(self) {
      if (self[_$_81a2[1689]]) {
        try {
          self[_$_81a2[1689]][_$_81a2[1160]]();
        } catch (e) {
        }
        /** @type {null} */
        self[_$_81a2[1689]] = null;
      }
      var PL$13 = Object[_$_81a2[998]](self[_$_81a2[1680]]);
      /** @type {number} */
      var PL$17 = 0;
      for (; PL$17 < PL$13[_$_81a2[36]]; PL$17++) {
        var artistTrack = self[_$_81a2[1680]][PL$13[PL$17]];
        try {
          artistTrack[_$_81a2[1681]][_$_81a2[1160]]();
        } catch (e) {
        }
        SOCKFS[_$_81a2[1650]][_$_81a2[1682]](self, artistTrack);
      }
      return 0;
    },
    bind : function(obj, fn, b) {
      if (typeof obj[_$_81a2[1698]] !== _$_81a2[13] || typeof obj[_$_81a2[1675]] !== _$_81a2[13]) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
      }
      obj[_$_81a2[1698]] = fn;
      obj[_$_81a2[1675]] = b;
      if (obj[_$_81a2[340]] === 2) {
        if (obj[_$_81a2[1689]]) {
          obj[_$_81a2[1689]][_$_81a2[1160]]();
          /** @type {null} */
          obj[_$_81a2[1689]] = null;
        }
        try {
          obj[_$_81a2[1654]][_$_81a2[1699]](obj, 0);
        } catch (e) {
          if (!(e instanceof FS[_$_81a2[868]])) {
            throw e;
          }
          if (e[_$_81a2[302]] !== ERRNO_CODES[_$_81a2[1165]]) {
            throw e;
          }
        }
      }
    },
    connect : function(f, a, fn) {
      if (f[_$_81a2[1689]]) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1165]]);
      }
      if (typeof f[_$_81a2[1691]] !== _$_81a2[13] && typeof f[_$_81a2[1692]] !== _$_81a2[13]) {
        var tx_ver = SOCKFS[_$_81a2[1650]][_$_81a2[1693]](f, f[_$_81a2[1691]], f[_$_81a2[1692]]);
        if (tx_ver) {
          if (tx_ver[_$_81a2[1681]][_$_81a2[1694]] === tx_ver[_$_81a2[1681]][_$_81a2[1700]]) {
            throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1701]]);
          } else {
            throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1702]]);
          }
        }
      }
      var i = SOCKFS[_$_81a2[1650]][_$_81a2[1703]](f, a, fn);
      f[_$_81a2[1691]] = i[_$_81a2[436]];
      f[_$_81a2[1692]] = i[_$_81a2[435]];
      throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1704]]);
    },
    listen : function(match, url) {
      if (!ENVIRONMENT_IS_NODE) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1165]]);
      }
      if (match[_$_81a2[1689]]) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
      }
      var Server = require(_$_81a2[1669])[_$_81a2[1705]];
      var ipAddress = match[_$_81a2[1698]];
      match[_$_81a2[1689]] = new Server({
        host : ipAddress,
        port : match[_$_81a2[1675]]
      });
      Neptune[_$_81a2[1647]][_$_81a2[1649]](_$_81a2[1699], match[_$_81a2[918]][_$_81a2[882]]);
      match[_$_81a2[1689]][_$_81a2[44]](_$_81a2[1706], function(a) {
        if (match[_$_81a2[340]] === 1) {
          var bodies = SOCKFS[_$_81a2[1709]](match[_$_81a2[1707]], match[_$_81a2[340]], match[_$_81a2[1708]]);
          var b = SOCKFS[_$_81a2[1650]][_$_81a2[1703]](bodies, a);
          bodies[_$_81a2[1691]] = b[_$_81a2[436]];
          bodies[_$_81a2[1692]] = b[_$_81a2[435]];
          match[_$_81a2[1690]][_$_81a2[107]](bodies);
          Neptune[_$_81a2[1647]][_$_81a2[1649]](_$_81a2[1706], bodies[_$_81a2[918]][_$_81a2[882]]);
        } else {
          SOCKFS[_$_81a2[1650]][_$_81a2[1703]](match, a);
          Neptune[_$_81a2[1647]][_$_81a2[1649]](_$_81a2[1706], match[_$_81a2[918]][_$_81a2[882]]);
        }
      });
      match[_$_81a2[1689]][_$_81a2[44]](_$_81a2[1710], function() {
        Neptune[_$_81a2[1647]][_$_81a2[1649]](_$_81a2[1160], match[_$_81a2[918]][_$_81a2[882]]);
        /** @type {null} */
        match[_$_81a2[1689]] = null;
      });
      match[_$_81a2[1689]][_$_81a2[44]](_$_81a2[973], function(a) {
        match[_$_81a2[973]] = ERRNO_CODES[_$_81a2[1672]];
        Neptune[_$_81a2[1647]][_$_81a2[1649]](_$_81a2[973], [match[_$_81a2[918]][_$_81a2[882]], match[_$_81a2[973]], _$_81a2[1711]]);
      });
    },
    accept : function(tscore) {
      if (!tscore[_$_81a2[1689]]) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
      }
      var ret = tscore[_$_81a2[1690]][_$_81a2[193]]();
      ret[_$_81a2[918]][_$_81a2[1043]] = tscore[_$_81a2[918]][_$_81a2[1043]];
      return ret;
    },
    getname : function(n, cb) {
      var addedNode;
      var node;
      if (cb) {
        if (n[_$_81a2[1691]] === undefined || n[_$_81a2[1692]] === undefined) {
          throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1712]]);
        }
        addedNode = n[_$_81a2[1691]];
        node = n[_$_81a2[1692]];
      } else {
        addedNode = n[_$_81a2[1698]] || 0;
        node = n[_$_81a2[1675]] || 0;
      }
      return {
        addr : addedNode,
        port : node
      };
    },
    sendmsg : function(args, data, _, target, s, t) {
      if (args[_$_81a2[340]] === 2) {
        if (s === undefined || t === undefined) {
          s = args[_$_81a2[1691]];
          t = args[_$_81a2[1692]];
        }
        if (s === undefined || t === undefined) {
          throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1713]]);
        }
      } else {
        s = args[_$_81a2[1691]];
        t = args[_$_81a2[1692]];
      }
      var result = SOCKFS[_$_81a2[1650]][_$_81a2[1693]](args, s, t);
      if (args[_$_81a2[340]] === 1) {
        if (!result || result[_$_81a2[1681]][_$_81a2[1694]] === result[_$_81a2[1681]][_$_81a2[1695]] || result[_$_81a2[1681]][_$_81a2[1694]] === result[_$_81a2[1681]][_$_81a2[1696]]) {
          throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1712]]);
        } else {
          if (result[_$_81a2[1681]][_$_81a2[1694]] === result[_$_81a2[1681]][_$_81a2[1700]]) {
            throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[876]]);
          }
        }
      }
      var dateStrSlashed;
      if (data instanceof Array || data instanceof ArrayBuffer) {
        dateStrSlashed = data[_$_81a2[41]](_, _ + target);
      } else {
        dateStrSlashed = data[_$_81a2[33]][_$_81a2[41]](data[_$_81a2[946]] + _, data[_$_81a2[946]] + _ + target);
      }
      if (args[_$_81a2[340]] === 2) {
        if (!result || result[_$_81a2[1681]][_$_81a2[1694]] !== result[_$_81a2[1681]][_$_81a2[1697]]) {
          if (!result || result[_$_81a2[1681]][_$_81a2[1694]] === result[_$_81a2[1681]][_$_81a2[1695]] || result[_$_81a2[1681]][_$_81a2[1694]] === result[_$_81a2[1681]][_$_81a2[1696]]) {
            result = SOCKFS[_$_81a2[1650]][_$_81a2[1703]](args, s, t);
          }
          result[_$_81a2[1679]][_$_81a2[107]](dateStrSlashed);
          return target;
        }
      }
      try {
        result[_$_81a2[1681]][_$_81a2[52]](dateStrSlashed);
        return target;
      } catch (e) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[434]]);
      }
    },
    recvmsg : function(level, n) {
      if (level[_$_81a2[340]] === 1 && level[_$_81a2[1689]]) {
        throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1712]]);
      }
      var parts = level[_$_81a2[1683]][_$_81a2[193]]();
      if (!parts) {
        if (level[_$_81a2[340]] === 1) {
          var adjustedLevel = SOCKFS[_$_81a2[1650]][_$_81a2[1693]](level, level[_$_81a2[1691]], level[_$_81a2[1692]]);
          if (!adjustedLevel) {
            throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[1712]]);
          } else {
            if (adjustedLevel[_$_81a2[1681]][_$_81a2[1694]] === adjustedLevel[_$_81a2[1681]][_$_81a2[1695]] || adjustedLevel[_$_81a2[1681]][_$_81a2[1694]] === adjustedLevel[_$_81a2[1681]][_$_81a2[1696]]) {
              return null;
            } else {
              throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[876]]);
            }
          }
        } else {
          throw new FS[_$_81a2[868]](ERRNO_CODES[_$_81a2[876]]);
        }
      }
      var width = parts[_$_81a2[451]][_$_81a2[245]] || parts[_$_81a2[451]][_$_81a2[36]];
      var dataOffset = parts[_$_81a2[451]][_$_81a2[946]] || 0;
      var data = parts[_$_81a2[451]][_$_81a2[33]] || parts[_$_81a2[451]];
      var offset = Math[_$_81a2[81]](n, width);
      var options = {
        buffer : new Uint8Array(data, dataOffset, offset),
        addr : parts[_$_81a2[436]],
        port : parts[_$_81a2[435]]
      };
      if (level[_$_81a2[340]] === 1 && offset < width) {
        /** @type {number} */
        var available = width - offset;
        /** @type {!Uint8Array} */
        parts[_$_81a2[451]] = new Uint8Array(data, dataOffset + offset, available);
        level[_$_81a2[1683]][_$_81a2[198]](parts);
      }
      return options;
    }
  }
};
/**
 * @param {?} isSlidingUp
 * @param {?} $cont
 * @return {?}
 */
function ___syscall102(isSlidingUp, $cont) {
  SYSCALLS[_$_81a2[1268]] = $cont;
  try {
    var type = SYSCALLS[_$_81a2[994]]();
    var I = SYSCALLS[_$_81a2[994]]();
    SYSCALLS[_$_81a2[1268]] = I;
    switch(type) {
      case 1:
        {
          var reNumber = SYSCALLS[_$_81a2[994]]();
          var end = SYSCALLS[_$_81a2[994]]();
          var resolvedLocaleLookup = SYSCALLS[_$_81a2[994]]();
          var num = SOCKFS[_$_81a2[1709]](reNumber, end, resolvedLocaleLookup);
          assert(num[_$_81a2[918]][_$_81a2[882]] < 64);
          return num[_$_81a2[918]][_$_81a2[882]];
        }
      case 2:
        {
          num = SYSCALLS[_$_81a2[1714]]();
          var str = SYSCALLS[_$_81a2[1715]]();
          num[_$_81a2[1654]][_$_81a2[533]](num, str[_$_81a2[436]], str[_$_81a2[435]]);
          return 0;
        }
      case 3:
        {
          num = SYSCALLS[_$_81a2[1714]]();
          str = SYSCALLS[_$_81a2[1715]]();
          num[_$_81a2[1654]][_$_81a2[1716]](num, str[_$_81a2[436]], str[_$_81a2[435]]);
          return 0;
        }
      case 4:
        {
          num = SYSCALLS[_$_81a2[1714]]();
          var artistTrack = SYSCALLS[_$_81a2[994]]();
          num[_$_81a2[1654]][_$_81a2[1699]](num, artistTrack);
          return 0;
        }
      case 5:
        {
          num = SYSCALLS[_$_81a2[1714]]();
          var buf = SYSCALLS[_$_81a2[994]]();
          var b = SYSCALLS[_$_81a2[994]]();
          var index = num[_$_81a2[1654]][_$_81a2[1717]](num);
          if (buf) {
            var str = __write_sockaddr(buf, index[_$_81a2[1707]], DNS[_$_81a2[303]](index[_$_81a2[1691]]), index[_$_81a2[1692]]);
            assert(!str[_$_81a2[302]]);
          }
          return index[_$_81a2[918]][_$_81a2[882]];
        }
      case 6:
        {
          num = SYSCALLS[_$_81a2[1714]]();
          buf = SYSCALLS[_$_81a2[994]]();
          b = SYSCALLS[_$_81a2[994]]();
          str = __write_sockaddr(buf, num[_$_81a2[1707]], DNS[_$_81a2[303]](num[_$_81a2[1698]] || _$_81a2[298]), num[_$_81a2[1675]]);
          assert(!str[_$_81a2[302]]);
          return 0;
        }
      case 7:
        {
          num = SYSCALLS[_$_81a2[1714]]();
          buf = SYSCALLS[_$_81a2[994]]();
          b = SYSCALLS[_$_81a2[994]]();
          if (!num[_$_81a2[1691]]) {
            return -ERRNO_CODES[_$_81a2[1712]];
          }
          str = __write_sockaddr(buf, num[_$_81a2[1707]], DNS[_$_81a2[303]](num[_$_81a2[1691]]), num[_$_81a2[1692]]);
          assert(!str[_$_81a2[302]]);
          return 0;
        }
      case 11:
        {
          num = SYSCALLS[_$_81a2[1714]]();
          var $51 = SYSCALLS[_$_81a2[994]]();
          var s = SYSCALLS[_$_81a2[994]]();
          var k = SYSCALLS[_$_81a2[994]]();
          var i = SYSCALLS[_$_81a2[1715]](true);
          if (!i) {
            return FS[_$_81a2[910]](num[_$_81a2[918]], HEAP8, $51, s);
          } else {
            return num[_$_81a2[1654]][_$_81a2[1656]](num, HEAP8, $51, s, i[_$_81a2[436]], i[_$_81a2[435]]);
          }
        }
      case 12:
        {
          num = SYSCALLS[_$_81a2[1714]]();
          var thisGold = SYSCALLS[_$_81a2[994]]();
          var c__4190__auto__ = SYSCALLS[_$_81a2[994]]();
          k = SYSCALLS[_$_81a2[994]]();
          buf = SYSCALLS[_$_81a2[994]]();
          b = SYSCALLS[_$_81a2[994]]();
          var x = num[_$_81a2[1654]][_$_81a2[1655]](num, c__4190__auto__);
          if (!x) {
            return 0;
          }
          if (buf) {
            str = __write_sockaddr(buf, num[_$_81a2[1707]], DNS[_$_81a2[303]](x[_$_81a2[436]]), x[_$_81a2[435]]);
            assert(!str[_$_81a2[302]]);
          }
          HEAPU8[_$_81a2[148]](x[_$_81a2[33]], thisGold);
          return x[_$_81a2[33]][_$_81a2[245]];
        }
      case 14:
        {
          return -ERRNO_CODES[_$_81a2[1718]];
        }
      case 15:
        {
          num = SYSCALLS[_$_81a2[1714]]();
          var t = SYSCALLS[_$_81a2[994]]();
          var C = SYSCALLS[_$_81a2[994]]();
          var $48 = SYSCALLS[_$_81a2[994]]();
          var $51 = SYSCALLS[_$_81a2[994]]();
          if (t === 1) {
            if (C === 4) {
              HEAP32[$48 >> 2] = num[_$_81a2[973]];
              /** @type {number} */
              HEAP32[$51 >> 2] = 4;
              /** @type {null} */
              num[_$_81a2[973]] = null;
              return 0;
            }
          }
          return -ERRNO_CODES[_$_81a2[1718]];
        }
      case 16:
        {
          num = SYSCALLS[_$_81a2[1714]]();
          $51 = SYSCALLS[_$_81a2[994]]();
          k = SYSCALLS[_$_81a2[994]]();
          var utf32 = HEAP32[$51 + 8 >> 2];
          var min = HEAP32[$51 + 12 >> 2];
          var quote;
          var ptr = HEAP32[$51 >> 2];
          var len = HEAP32[$51 + 4 >> 2];
          if (ptr) {
            str = __read_sockaddr(ptr, len);
            if (str[_$_81a2[302]]) {
              return -str[_$_81a2[302]];
            }
            quote = str[_$_81a2[435]];
            buf = DNS[_$_81a2[437]](str[_$_81a2[436]]) || str[_$_81a2[436]];
          }
          /** @type {number} */
          var signature = 0;
          /** @type {number} */
          var h = 0;
          for (; h < min; h++) {
            signature = signature + HEAP32[utf32 + (8 * h + 4) >> 2];
          }
          /** @type {!Uint8Array} */
          var result = new Uint8Array(signature);
          /** @type {number} */
          var j = 0;
          /** @type {number} */
          h = 0;
          for (; h < min; h++) {
            var ret = HEAP32[utf32 + (8 * h + 0) >> 2];
            var value = HEAP32[utf32 + (8 * h + 4) >> 2];
            /** @type {number} */
            var subject = 0;
            for (; subject < value; subject++) {
              result[j++] = HEAP8[ret + subject >> 0];
            }
          }
          return num[_$_81a2[1654]][_$_81a2[1656]](num, result, 0, signature, buf, quote);
        }
      case 17:
        {
          num = SYSCALLS[_$_81a2[1714]]();
          $51 = SYSCALLS[_$_81a2[994]]();
          k = SYSCALLS[_$_81a2[994]]();
          utf32 = HEAP32[$51 + 8 >> 2];
          min = HEAP32[$51 + 12 >> 2];
          /** @type {number} */
          signature = 0;
          /** @type {number} */
          h = 0;
          for (; h < min; h++) {
            signature = signature + HEAP32[utf32 + (8 * h + 4) >> 2];
          }
          x = num[_$_81a2[1654]][_$_81a2[1655]](num, signature);
          if (!x) {
            return 0;
          }
          ptr = HEAP32[$51 >> 2];
          if (ptr) {
            str = __write_sockaddr(ptr, num[_$_81a2[1707]], DNS[_$_81a2[303]](x[_$_81a2[436]]), x[_$_81a2[435]]);
            assert(!str[_$_81a2[302]]);
          }
          /** @type {number} */
          var i = 0;
          var w = x[_$_81a2[33]][_$_81a2[245]];
          /** @type {number} */
          h = 0;
          for (; w > 0 && h < min; h++) {
            ret = HEAP32[utf32 + (8 * h + 0) >> 2];
            value = HEAP32[utf32 + (8 * h + 4) >> 2];
            if (!value) {
              continue;
            }
            s = Math[_$_81a2[81]](value, w);
            thisGold = x[_$_81a2[33]][_$_81a2[147]](i, i + s);
            HEAPU8[_$_81a2[148]](thisGold, ret + i);
            i = i + s;
            /** @type {number} */
            w = w - s;
          }
          return i;
        }
      default:
        abort(_$_81a2[1719] + type);
    }
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @param {number} h
 * @param {number} r
 * @return {undefined}
 */
function _glDeleteBuffers(h, r) {
  /** @type {number} */
  var d = 0;
  for (; d < h; d++) {
    var len = HEAP32[r + d * 4 >> 2];
    var funcParent = GL[_$_81a2[349]][len];
    if (!funcParent) {
      continue;
    }
    GLctx[_$_81a2[731]](funcParent);
    /** @type {number} */
    funcParent[_$_81a2[428]] = 0;
    /** @type {null} */
    GL[_$_81a2[349]][len] = null;
    if (len == GL[_$_81a2[348]]) {
      /** @type {number} */
      GL[_$_81a2[348]] = 0;
    }
    if (len == GL[_$_81a2[732]]) {
      /** @type {number} */
      GL[_$_81a2[732]] = 0;
    }
  }
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @return {undefined}
 */
function _glScissor(a, b, areMutuallyExclusive, parentType1) {
  GLctx[_$_81a2[1447]](a, b, areMutuallyExclusive, parentType1);
}
/**
 * @return {undefined}
 */
function _gencvt_l_d() {
  Neptune[_$_81a2[25]](_$_81a2[1720]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbeql_idle() {
  Neptune[_$_81a2[25]](_$_81a2[1721]);
  abort(-1);
}
/**
 * @param {?} a
 * @return {?}
 */
function _emscripten_glCheckFramebufferStatus(a) {
  return GLctx[_$_81a2[1722]](a);
}
/**
 * @param {?} drawtype
 * @return {undefined}
 */
function _emscripten_glDeleteProgram(drawtype) {
  if (!drawtype) {
    return;
  }
  var dali_drawtype = GL[_$_81a2[422]][drawtype];
  if (!dali_drawtype) {
    GL[_$_81a2[680]](1281);
    return;
  }
  GLctx[_$_81a2[724]](dali_drawtype);
  /** @type {number} */
  dali_drawtype[_$_81a2[428]] = 0;
  /** @type {null} */
  GL[_$_81a2[422]][drawtype] = null;
  /** @type {null} */
  GL[_$_81a2[423]][drawtype] = null;
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _emscripten_glDisable(a) {
  GLctx[_$_81a2[1323]](a);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @return {undefined}
 */
function _glClearColor(a, b, areMutuallyExclusive, parentType1) {
  GLctx[_$_81a2[1468]](a, b, areMutuallyExclusive, parentType1);
}
/**
 * @param {?} op
 * @param {?} args
 * @param {number} len
 * @param {number} offset
 * @param {number} dest
 * @param {number} src
 * @param {number} buf
 * @return {undefined}
 */
function _emscripten_glGetActiveAttrib(op, args, len, offset, dest, src, buf) {
  op = GL[_$_81a2[422]][op];
  var c = GLctx[_$_81a2[1393]](op, args);
  if (!c) {
    return;
  }
  if (len > 0 && buf) {
    var value = stringToUTF8(c[_$_81a2[428]], buf, len);
    if (offset) {
      HEAP32[offset >> 2] = value;
    }
  } else {
    if (offset) {
      /** @type {number} */
      HEAP32[offset >> 2] = 0;
    }
  }
  if (dest) {
    HEAP32[dest >> 2] = c[_$_81a2[339]];
  }
  if (src) {
    HEAP32[src >> 2] = c[_$_81a2[340]];
  }
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _emscripten_glLineWidth(a) {
  GLctx[_$_81a2[658]](a);
}
/**
 * @param {?} statisticName
 * @return {?}
 */
function _emscripten_glGetString(statisticName) {
  if (GL[_$_81a2[1296]][statisticName]) {
    return GL[_$_81a2[1296]][statisticName];
  }
  var _comp_methods;
  switch(statisticName) {
    case 7936:
    case 7937:
    case 37445:
    case 37446:
      _comp_methods = allocate(intArrayFromString(GLctx[_$_81a2[328]](statisticName)), _$_81a2[69], ALLOC_NORMAL);
      break;
    case 7938:
      var value = GLctx[_$_81a2[328]](GLctx[_$_81a2[1297]]);
      {
        value = _$_81a2[1298] + value + _$_81a2[188];
      }
      _comp_methods = allocate(intArrayFromString(value), _$_81a2[69], ALLOC_NORMAL);
      break;
    case 7939:
      var a = GLctx[_$_81a2[420]]();
      /** @type {!Array} */
      var parsers = [];
      /** @type {number} */
      var key = 0;
      for (; key < a[_$_81a2[36]]; ++key) {
        parsers[_$_81a2[107]](a[key]);
        parsers[_$_81a2[107]](_$_81a2[1299] + a[key]);
      }
      _comp_methods = allocate(intArrayFromString(parsers[_$_81a2[116]](_$_81a2[1300])), _$_81a2[69], ALLOC_NORMAL);
      break;
    case 35724:
      var shaderString = GLctx[_$_81a2[328]](GLctx[_$_81a2[1301]]);
      /** @type {!RegExp} */
      var magnifier = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
      var $magnifier = shaderString[_$_81a2[109]](magnifier);
      if ($magnifier !== null) {
        if ($magnifier[1][_$_81a2[36]] == 3) {
          $magnifier[1] = $magnifier[1] + _$_81a2[1302];
        }
        shaderString = _$_81a2[1303] + $magnifier[1] + _$_81a2[478] + shaderString + _$_81a2[188];
      }
      _comp_methods = allocate(intArrayFromString(shaderString), _$_81a2[69], ALLOC_NORMAL);
      break;
    default:
      GL[_$_81a2[680]](1280);
      return 0;
  }
  GL[_$_81a2[1296]][statisticName] = _comp_methods;
  return _comp_methods;
}
/**
 * @return {undefined}
 */
function _gendsll() {
  Neptune[_$_81a2[25]](_$_81a2[1723]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @return {undefined}
 */
function _glBlendColor(a, b, areMutuallyExclusive, parentType1) {
  GLctx[_$_81a2[1724]](a, b, areMutuallyExclusive, parentType1);
}
/**
 * @param {?} transition
 * @param {number} ret
 * @return {?}
 */
function _emscripten_glGetAttribLocation(transition, ret) {
  transition = GL[_$_81a2[422]][transition];
  ret = Pointer_stringify(ret);
  return GLctx[_$_81a2[1330]](transition, ret);
}
/**
 * @return {?}
 */
function _eglGetCurrentContext() {
  return EGL[_$_81a2[326]];
}
/**
 * @param {undefined} fnName
 * @param {undefined} func
 * @return {undefined}
 */
function _emscripten_glGetIntegerv(fnName, func) {
  emscriptenWebGLGet(fnName, func, _$_81a2[1427]);
}
/**
 * @return {undefined}
 */
function _gendsllv() {
  Neptune[_$_81a2[25]](_$_81a2[1725]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _emscripten_glClientActiveTexture() {
  Neptune[_$_81a2[25]](_$_81a2[1726]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genneg_d() {
  Neptune[_$_81a2[25]](_$_81a2[1727]);
  abort(-1);
}
/**
 * @param {?} url
 * @param {number} opt_target
 * @param {number} opt_targetItem
 * @return {undefined}
 */
function _glUniform2fv(url, opt_target, opt_targetItem) {
  var routes;
  if (2 * opt_target <= GL[_$_81a2[307]]) {
    routes = GL[_$_81a2[308]][2 * opt_target - 1];
    /** @type {number} */
    var pattern = 0;
    for (; pattern < 2 * opt_target; pattern = pattern + 2) {
      routes[pattern] = HEAPF32[opt_targetItem + 4 * pattern >> 2];
      routes[pattern + 1] = HEAPF32[opt_targetItem + (4 * pattern + 4) >> 2];
    }
  } else {
    routes = HEAPF32[_$_81a2[147]](opt_targetItem >> 2, opt_targetItem + opt_target * 8 >> 2);
  }
  GLctx[_$_81a2[1627]](GL[_$_81a2[424]][url], routes);
}
/**
 * @return {undefined}
 */
function _genmtlo() {
  Neptune[_$_81a2[25]](_$_81a2[1728]);
  abort(-1);
}
var GLUT = {
  initTime : null,
  idleFunc : null,
  displayFunc : null,
  keyboardFunc : null,
  keyboardUpFunc : null,
  specialFunc : null,
  specialUpFunc : null,
  reshapeFunc : null,
  motionFunc : null,
  passiveMotionFunc : null,
  mouseFunc : null,
  buttons : 0,
  modifiers : 0,
  initWindowWidth : 256,
  initWindowHeight : 256,
  initDisplayMode : 18,
  windowX : 0,
  windowY : 0,
  windowWidth : 0,
  windowHeight : 0,
  requestedAnimationFrame : false,
  saveModifiers : function(event) {
    /** @type {number} */
    GLUT[_$_81a2[1729]] = 0;
    if (event[_$_81a2[1730]]) {
      GLUT[_$_81a2[1729]] += 1;
    }
    if (event[_$_81a2[1731]]) {
      GLUT[_$_81a2[1729]] += 2;
    }
    if (event[_$_81a2[1732]]) {
      GLUT[_$_81a2[1729]] += 4;
    }
  },
  onMousemove : function(datum) {
    var string = Browser[_$_81a2[618]];
    var regexp = Browser[_$_81a2[619]];
    Browser[_$_81a2[1733]](datum);
    var val1Type = Browser[_$_81a2[618]];
    var val2Type = Browser[_$_81a2[619]];
    if (val1Type == string && val2Type == regexp) {
      return;
    }
    if (GLUT[_$_81a2[1734]] == 0 && datum[_$_81a2[963]] == Neptune[_$_81a2[370]] && GLUT[_$_81a2[1735]]) {
      datum[_$_81a2[540]]();
      GLUT[_$_81a2[1736]](datum);
      Neptune[_$_81a2[1737]](GLUT[_$_81a2[1735]], string, regexp);
    } else {
      if (GLUT[_$_81a2[1734]] != 0 && GLUT[_$_81a2[1738]]) {
        datum[_$_81a2[540]]();
        GLUT[_$_81a2[1736]](datum);
        Neptune[_$_81a2[1737]](GLUT[_$_81a2[1738]], string, regexp);
      }
    }
  },
  getSpecialKey : function(keycode) {
    /** @type {null} */
    var key = null;
    switch(keycode) {
      case 8:
        /** @type {number} */
        key = 120;
        break;
      case 46:
        /** @type {number} */
        key = 111;
        break;
      case 112:
        /** @type {number} */
        key = 1;
        break;
      case 113:
        /** @type {number} */
        key = 2;
        break;
      case 114:
        /** @type {number} */
        key = 3;
        break;
      case 115:
        /** @type {number} */
        key = 4;
        break;
      case 116:
        /** @type {number} */
        key = 5;
        break;
      case 117:
        /** @type {number} */
        key = 6;
        break;
      case 118:
        /** @type {number} */
        key = 7;
        break;
      case 119:
        /** @type {number} */
        key = 8;
        break;
      case 120:
        /** @type {number} */
        key = 9;
        break;
      case 121:
        /** @type {number} */
        key = 10;
        break;
      case 122:
        /** @type {number} */
        key = 11;
        break;
      case 123:
        /** @type {number} */
        key = 12;
        break;
      case 37:
        /** @type {number} */
        key = 100;
        break;
      case 38:
        /** @type {number} */
        key = 101;
        break;
      case 39:
        /** @type {number} */
        key = 102;
        break;
      case 40:
        /** @type {number} */
        key = 103;
        break;
      case 33:
        /** @type {number} */
        key = 104;
        break;
      case 34:
        /** @type {number} */
        key = 105;
        break;
      case 36:
        /** @type {number} */
        key = 106;
        break;
      case 35:
        /** @type {number} */
        key = 107;
        break;
      case 45:
        /** @type {number} */
        key = 108;
        break;
      case 16:
      case 5:
        /** @type {number} */
        key = 112;
        break;
      case 6:
        /** @type {number} */
        key = 113;
        break;
      case 17:
      case 3:
        /** @type {number} */
        key = 114;
        break;
      case 4:
        /** @type {number} */
        key = 115;
        break;
      case 18:
      case 2:
        /** @type {number} */
        key = 116;
        break;
      case 1:
        /** @type {number} */
        key = 117;
        break;
    }
    return key;
  },
  getASCIIKey : function(event) {
    if (event[_$_81a2[1731]] || event[_$_81a2[1732]] || event[_$_81a2[1739]]) {
      return null;
    }
    var keycode = event[_$_81a2[1740]];
    if (48 <= keycode && keycode <= 57) {
      return keycode;
    }
    if (65 <= keycode && keycode <= 90) {
      return event[_$_81a2[1730]] ? keycode : keycode + 32;
    }
    if (96 <= keycode && keycode <= 105) {
      return keycode - 48;
    }
    if (106 <= keycode && keycode <= 111) {
      return keycode - 106 + 42;
    }
    switch(keycode) {
      case 9:
      case 13:
      case 27:
      case 32:
      case 61:
        return keycode;
    }
    var to = event[_$_81a2[1730]];
    switch(keycode) {
      case 186:
        return to ? 58 : 59;
      case 187:
        return to ? 43 : 61;
      case 188:
        return to ? 60 : 44;
      case 189:
        return to ? 95 : 45;
      case 190:
        return to ? 62 : 46;
      case 191:
        return to ? 63 : 47;
      case 219:
        return to ? 123 : 91;
      case 220:
        return to ? 124 : 47;
      case 221:
        return to ? 125 : 93;
      case 222:
        return to ? 34 : 39;
    }
    return null;
  },
  onKeydown : function(event) {
    if (GLUT[_$_81a2[1741]] || GLUT[_$_81a2[1742]]) {
      var props = GLUT[_$_81a2[1743]](event[_$_81a2[1740]]);
      if (props !== null) {
        if (GLUT[_$_81a2[1741]]) {
          event[_$_81a2[540]]();
          GLUT[_$_81a2[1736]](event);
          Neptune[_$_81a2[1744]](GLUT[_$_81a2[1741]], props, Browser[_$_81a2[618]], Browser[_$_81a2[619]]);
        }
      } else {
        props = GLUT[_$_81a2[1745]](event);
        if (props !== null && GLUT[_$_81a2[1742]]) {
          event[_$_81a2[540]]();
          GLUT[_$_81a2[1736]](event);
          Neptune[_$_81a2[1744]](GLUT[_$_81a2[1742]], props, Browser[_$_81a2[618]], Browser[_$_81a2[619]]);
        }
      }
    }
  },
  onKeyup : function(e) {
    if (GLUT[_$_81a2[1746]] || GLUT[_$_81a2[1747]]) {
      var subColumn = GLUT[_$_81a2[1743]](e[_$_81a2[1740]]);
      if (subColumn !== null) {
        if (GLUT[_$_81a2[1746]]) {
          e[_$_81a2[540]]();
          GLUT[_$_81a2[1736]](e);
          Neptune[_$_81a2[1744]](GLUT[_$_81a2[1746]], subColumn, Browser[_$_81a2[618]], Browser[_$_81a2[619]]);
        }
      } else {
        subColumn = GLUT[_$_81a2[1745]](e);
        if (subColumn !== null && GLUT[_$_81a2[1747]]) {
          e[_$_81a2[540]]();
          GLUT[_$_81a2[1736]](e);
          Neptune[_$_81a2[1744]](GLUT[_$_81a2[1747]], subColumn, Browser[_$_81a2[618]], Browser[_$_81a2[619]]);
        }
      }
    }
  },
  touchHandler : function(data) {
    if (data[_$_81a2[963]] != Neptune[_$_81a2[370]]) {
      return;
    }
    var event = data[_$_81a2[1748]];
    var args = event[0];
    var cm = _$_81a2[4];
    switch(data[_$_81a2[340]]) {
      case _$_81a2[625]:
        cm = _$_81a2[1749];
        break;
      case _$_81a2[627]:
        cm = _$_81a2[613];
        break;
      case _$_81a2[626]:
        cm = _$_81a2[1750];
        break;
      default:
        return;
    }
    var funcs = document[_$_81a2[1752]](_$_81a2[1751]);
    funcs[_$_81a2[1757]](cm, true, true, window, 1, args[_$_81a2[1753]], args[_$_81a2[1754]], args[_$_81a2[1755]], args[_$_81a2[1756]], false, false, false, false, 0, null);
    args[_$_81a2[963]][_$_81a2[1758]](funcs);
    data[_$_81a2[540]]();
  },
  onMouseButtonDown : function(event) {
    Browser[_$_81a2[1733]](event);
    GLUT[_$_81a2[1734]] |= 1 << event[_$_81a2[1759]];
    if (event[_$_81a2[963]] == Neptune[_$_81a2[370]] && GLUT[_$_81a2[1760]]) {
      try {
        event[_$_81a2[963]][_$_81a2[1761]]();
      } catch (e) {
      }
      event[_$_81a2[540]]();
      GLUT[_$_81a2[1736]](event);
      Neptune[_$_81a2[1762]](GLUT[_$_81a2[1760]], event[_$_81a2[1759]], 0, Browser[_$_81a2[618]], Browser[_$_81a2[619]]);
    }
  },
  onMouseButtonUp : function(event) {
    Browser[_$_81a2[1733]](event);
    GLUT[_$_81a2[1734]] &= ~(1 << event[_$_81a2[1759]]);
    if (GLUT[_$_81a2[1760]]) {
      event[_$_81a2[540]]();
      GLUT[_$_81a2[1736]](event);
      Neptune[_$_81a2[1762]](GLUT[_$_81a2[1760]], event[_$_81a2[1759]], 1, Browser[_$_81a2[618]], Browser[_$_81a2[619]]);
    }
  },
  onMouseWheel : function(event) {
    Browser[_$_81a2[1733]](event);
    var type = window[_$_81a2[1763]] || event;
    /** @type {number} */
    var n = -Browser[_$_81a2[1764]](event);
    n = n == 0 ? 0 : n > 0 ? Math[_$_81a2[80]](n, 1) : Math[_$_81a2[81]](n, -1);
    /** @type {number} */
    var artistTrack = 3;
    if (n < 0) {
      /** @type {number} */
      artistTrack = 4;
    }
    if (GLUT[_$_81a2[1760]]) {
      event[_$_81a2[540]]();
      GLUT[_$_81a2[1736]](event);
      Neptune[_$_81a2[1762]](GLUT[_$_81a2[1760]], artistTrack, 0, Browser[_$_81a2[618]], Browser[_$_81a2[619]]);
    }
  },
  onFullscreenEventChange : function(a) {
    var height;
    var width;
    if (document[_$_81a2[1765]] || document[_$_81a2[1766]] || document[_$_81a2[1767]] || document[_$_81a2[1768]]) {
      height = screen[_$_81a2[505]];
      width = screen[_$_81a2[506]];
    } else {
      height = GLUT[_$_81a2[1769]];
      width = GLUT[_$_81a2[1770]];
      document[_$_81a2[363]](_$_81a2[570], GLUT[_$_81a2[1771]], true);
      document[_$_81a2[363]](_$_81a2[571], GLUT[_$_81a2[1771]], true);
      document[_$_81a2[363]](_$_81a2[572], GLUT[_$_81a2[1771]], true);
    }
    Browser[_$_81a2[1485]](height, width);
    if (GLUT[_$_81a2[1772]]) {
      Neptune[_$_81a2[1737]](GLUT[_$_81a2[1772]], height, width);
    }
    _glutPostRedisplay();
  },
  requestFullscreen : function() {
    Browser[_$_81a2[576]](false, false);
  },
  requestFullScreen : function() {
    Neptune[_$_81a2[25]](_$_81a2[1773]);
    /**
     * @return {?}
     */
    GLUT[_$_81a2[583]] = function() {
      return GLUT[_$_81a2[576]]();
    };
    return GLUT[_$_81a2[576]]();
  },
  exitFullscreen : function() {
    var _updateDeep2 = document[_$_81a2[557]] || document[_$_81a2[558]] || document[_$_81a2[559]] || document[_$_81a2[561]] || function() {
    };
    _updateDeep2[_$_81a2[84]](document, []);
  },
  cancelFullScreen : function() {
    Neptune[_$_81a2[25]](_$_81a2[1774]);
    /**
     * @return {?}
     */
    GLUT[_$_81a2[558]] = function() {
      return GLUT[_$_81a2[557]]();
    };
    return GLUT[_$_81a2[557]]();
  }
};
/**
 * @param {number} partKeys
 * @return {undefined}
 */
function _glutInitDisplayMode(partKeys) {
  /** @type {number} */
  GLUT[_$_81a2[1775]] = partKeys;
}
/**
 * @param {?} b
 * @return {?}
 */
function _glutCreateWindow(b) {
  var options = {
    antialias : (GLUT[_$_81a2[1775]] & 128) != 0,
    depth : (GLUT[_$_81a2[1775]] & 16) != 0,
    stencil : (GLUT[_$_81a2[1775]] & 32) != 0,
    alpha : (GLUT[_$_81a2[1775]] & 8) != 0
  };
  Neptune[_$_81a2[374]] = Browser[_$_81a2[541]](Neptune[_$_81a2[370]], true, true, options);
  return Neptune[_$_81a2[374]] ? 1 : 0;
}
/**
 * @param {number} word
 * @param {?} wordVal
 * @param {?} str
 * @param {number} off
 * @return {?}
 */
function _eglCreateContext(word, wordVal, str, off) {
  if (word != 62E3) {
    EGL[_$_81a2[683]](12296);
    return 0;
  }
  /** @type {number} */
  var thrown = 1;
  for (;;) {
    var len = HEAP32[off >> 2];
    if (len == 12440) {
      thrown = HEAP32[off + 4 >> 2];
    } else {
      if (len == 12344) {
        break;
      } else {
        EGL[_$_81a2[683]](12292);
        return 0;
      }
    }
    off = off + 8;
  }
  if (thrown != 2) {
    EGL[_$_81a2[683]](12293);
    return 0;
  }
  _glutInitDisplayMode(178);
  EGL[_$_81a2[1776]] = _glutCreateWindow();
  if (EGL[_$_81a2[1776]] != 0) {
    EGL[_$_81a2[683]](12288);
    return 62004;
  } else {
    EGL[_$_81a2[683]](12297);
    return 0;
  }
}
/**
 * @param {?} v32
 * @param {?} v03
 * @param {undefined} x2
 * @param {undefined} y2
 * @param {undefined} radius
 * @param {?} n
 * @param {undefined} d
 * @return {undefined}
 */
function _emscripten_glReadPixels(v32, v03, x2, y2, radius, n, d) {
  var g = emscriptenWebGLGetTexPixelData(n, radius, x2, y2, d, radius);
  if (!g) {
    GL[_$_81a2[680]](1280);
    return;
  }
  GLctx[_$_81a2[1617]](v32, v03, x2, y2, radius, n, g);
}
/**
 * @param {?} ptr
 * @return {undefined}
 */
function ___resumeException(ptr) {
  if (!EXCEPTIONS[_$_81a2[1777]]) {
    EXCEPTIONS[_$_81a2[1777]] = ptr;
  }
  throw ptr + _$_81a2[1778];
}
/**
 * @return {?}
 */
function ___cxa_find_matching_catch() {
  var thrown = EXCEPTIONS[_$_81a2[1777]];
  if (!thrown) {
    return (Runtime[_$_81a2[1779]](0), 0) | 0;
  }
  var info = EXCEPTIONS[_$_81a2[1412]][thrown];
  var throwntype = info[_$_81a2[340]];
  if (!throwntype) {
    return (Runtime[_$_81a2[1779]](0), thrown) | 0;
  }
  var typeArray = Array[_$_81a2[92]][_$_81a2[41]][_$_81a2[64]](arguments);
  var pointer = Neptune[_$_81a2[1780]](throwntype);
  if (!___cxa_find_matching_catch[_$_81a2[33]]) {
    ___cxa_find_matching_catch[_$_81a2[33]] = _malloc(4);
  }
  HEAP32[___cxa_find_matching_catch[_$_81a2[33]] >> 2] = thrown;
  thrown = ___cxa_find_matching_catch[_$_81a2[33]];
  /** @type {number} */
  var i = 0;
  for (; i < typeArray[_$_81a2[36]]; i++) {
    if (typeArray[i] && Neptune[_$_81a2[1781]](typeArray[i], throwntype, thrown)) {
      thrown = HEAP32[thrown >> 2];
      info[_$_81a2[1413]] = thrown;
      return (Runtime[_$_81a2[1779]](typeArray[i]), thrown) | 0;
    }
  }
  thrown = HEAP32[thrown >> 2];
  return (Runtime[_$_81a2[1779]](throwntype), thrown) | 0;
}
/**
 * @param {number} ptr
 * @param {!Object} type
 * @param {?} destructor
 * @return {undefined}
 */
function ___cxa_throw(ptr, type, destructor) {
  EXCEPTIONS[_$_81a2[1412]][ptr] = {
    ptr : ptr,
    adjusted : ptr,
    type : type,
    destructor : destructor,
    refcount : 0,
    caught : false,
    rethrown : false
  };
  /** @type {number} */
  EXCEPTIONS[_$_81a2[1777]] = ptr;
  if (!(_$_81a2[1411] in __ZSt18uncaught_exceptionv)) {
    /** @type {number} */
    __ZSt18uncaught_exceptionv[_$_81a2[1411]] = 1;
  } else {
    __ZSt18uncaught_exceptionv[_$_81a2[1411]]++;
  }
  throw ptr + _$_81a2[1778];
}
/**
 * @return {?}
 */
function _emscripten_glGetError() {
  if (GL[_$_81a2[310]]) {
    var a = GL[_$_81a2[310]];
    /** @type {number} */
    GL[_$_81a2[310]] = 0;
    return a;
  } else {
    return GLctx[_$_81a2[1782]]();
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} f
 * @param {?} url
 * @param {?} trimDomain
 * @return {undefined}
 */
function _emscripten_glFramebufferTexture2D(CallAtEnd, a, f, url, trimDomain) {
  GLctx[_$_81a2[1295]](CallAtEnd, a, f, GL[_$_81a2[1294]][url], trimDomain);
}
/**
 * @param {?} isSlidingUp
 * @param {?} $cont
 * @return {?}
 */
function ___syscall39(isSlidingUp, $cont) {
  SYSCALLS[_$_81a2[1268]] = $cont;
  try {
    var artistTrack = SYSCALLS[_$_81a2[1270]]();
    var GET_AUTH_URL_TIMEOUT = SYSCALLS[_$_81a2[994]]();
    return SYSCALLS[_$_81a2[1783]](artistTrack, GET_AUTH_URL_TIMEOUT);
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @return {undefined}
 */
function _gendiv_s() {
  Neptune[_$_81a2[25]](_$_81a2[1784]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genneg_s() {
  Neptune[_$_81a2[25]](_$_81a2[1785]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genmultu() {
  Neptune[_$_81a2[25]](_$_81a2[1786]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genround_w_s() {
  Neptune[_$_81a2[25]](_$_81a2[1787]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbltzall() {
  Neptune[_$_81a2[25]](_$_81a2[1788]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gensltu() {
  Neptune[_$_81a2[25]](_$_81a2[1789]);
  abort(-1);
}
/**
 * @param {?} size
 * @return {?}
 */
function ___cxa_allocate_exception(size) {
  return _malloc(size);
}
/** @type {number} */
var __sigalrm_handler = 0;
/**
 * @param {number} e
 * @param {number} loc
 * @return {?}
 */
function _signal(e, loc) {
  if (e == 14) {
    /** @type {number} */
    __sigalrm_handler = loc;
  } else {
  }
  return 0;
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _glDepthFunc(a) {
  GLctx[_$_81a2[1790]](a);
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _emscripten_glClearDepthf(a) {
  GLctx[_$_81a2[1442]](a);
}
/**
 * @return {undefined}
 */
function _gendiv_d() {
  Neptune[_$_81a2[25]](_$_81a2[1791]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genslti() {
  Neptune[_$_81a2[25]](_$_81a2[1792]);
  abort(-1);
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function ___syscall40(a, b) {
  SYSCALLS[_$_81a2[1268]] = b;
  try {
    var artistTrack = SYSCALLS[_$_81a2[1270]]();
    FS[_$_81a2[906]](artistTrack);
    return 0;
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @return {undefined}
 */
function _gensw() {
  Neptune[_$_81a2[25]](_$_81a2[1793]);
  abort(-1);
}
/**
 * @param {?} key
 * @param {?} throttleMillis
 * @param {undefined} func
 * @return {undefined}
 */
function _emscripten_glGetUniformfv(key, throttleMillis, func) {
  emscriptenWebGLGetUniform(key, throttleMillis, func, _$_81a2[1428]);
}
/**
 * @return {undefined}
 */
function _genc_nge_s() {
  Neptune[_$_81a2[25]](_$_81a2[1794]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function ___gxx_personality_v0() {
}
/**
 * @return {undefined}
 */
function _genbeq() {
  Neptune[_$_81a2[25]](_$_81a2[1795]);
  abort(-1);
}
/**
 * @param {?} name
 * @param {number} fmt
 * @param {number} a
 * @return {undefined}
 */
function _emscripten_glGetProgramiv(name, fmt, a) {
  if (!a) {
    GL[_$_81a2[680]](1281);
    return;
  }
  if (name >= GL[_$_81a2[311]]) {
    GL[_$_81a2[680]](1281);
    return;
  }
  var props = GL[_$_81a2[423]][name];
  if (!props) {
    GL[_$_81a2[680]](1282);
    return;
  }
  if (fmt == 35716) {
    var d = GLctx[_$_81a2[1389]](GL[_$_81a2[422]][name]);
    if (d === null) {
      d = _$_81a2[1390];
    }
    HEAP32[a >> 2] = d[_$_81a2[36]] + 1;
  } else {
    if (fmt == 35719) {
      HEAP32[a >> 2] = props[_$_81a2[429]];
    } else {
      if (fmt == 35722) {
        if (props[_$_81a2[1391]] == -1) {
          name = GL[_$_81a2[422]][name];
          var offset = GLctx[_$_81a2[426]](name, GLctx[_$_81a2[1392]]);
          /** @type {number} */
          props[_$_81a2[1391]] = 0;
          /** @type {number} */
          var n = 0;
          for (; n < offset; ++n) {
            var s = GLctx[_$_81a2[1393]](name, n);
            props[_$_81a2[1391]] = Math[_$_81a2[80]](props[_$_81a2[1391]], s[_$_81a2[428]][_$_81a2[36]] + 1);
          }
        }
        HEAP32[a >> 2] = props[_$_81a2[1391]];
      } else {
        if (fmt == 35381) {
          if (props[_$_81a2[1394]] == -1) {
            name = GL[_$_81a2[422]][name];
            var g = GLctx[_$_81a2[426]](name, GLctx[_$_81a2[1395]]);
            /** @type {number} */
            props[_$_81a2[1394]] = 0;
            /** @type {number} */
            n = 0;
            for (; n < g; ++n) {
              var s = GLctx[_$_81a2[1396]](name, n);
              props[_$_81a2[1394]] = Math[_$_81a2[80]](props[_$_81a2[1394]], s[_$_81a2[36]] + 1);
            }
          }
          HEAP32[a >> 2] = props[_$_81a2[1394]];
        } else {
          HEAP32[a >> 2] = GLctx[_$_81a2[426]](GL[_$_81a2[422]][name], fmt);
        }
      }
    }
  }
}
/**
 * @return {undefined}
 */
function _genbltz() {
  Neptune[_$_81a2[25]](_$_81a2[1796]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gensh() {
  Neptune[_$_81a2[25]](_$_81a2[1797]);
  abort(-1);
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _glBlendEquation(a) {
  GLctx[_$_81a2[1504]](a);
}
/**
 * @param {?} option
 * @param {number} i
 * @return {?}
 */
function _glGetUniformLocation(option, i) {
  i = Pointer_stringify(i);
  /** @type {number} */
  var time = 0;
  if (i[_$_81a2[242]](_$_81a2[168], i[_$_81a2[36]] - 1) !== -1) {
    var r = i[_$_81a2[431]](_$_81a2[430]);
    var start = i[_$_81a2[41]](r + 1, -1);
    if (start[_$_81a2[36]] > 0) {
      /** @type {number} */
      time = parseInt(start);
      if (time < 0) {
        return -1;
      }
    }
    i = i[_$_81a2[41]](0, r);
  }
  var data = GL[_$_81a2[423]][option];
  if (!data) {
    return -1;
  }
  var lines = data[_$_81a2[424]];
  var last = lines[i];
  if (last && time < last[0]) {
    return last[1] + time;
  } else {
    return -1;
  }
}
/**
 * @return {undefined}
 */
function _genc_nge_d() {
  Neptune[_$_81a2[25]](_$_81a2[1798]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gensd() {
  Neptune[_$_81a2[25]](_$_81a2[1799]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gendsub() {
  Neptune[_$_81a2[25]](_$_81a2[1800]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gensb() {
  Neptune[_$_81a2[25]](_$_81a2[1801]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _emscripten_glFinish() {
  GLctx[_$_81a2[1473]]();
}
/**
 * @param {?} url
 * @param {number} opt_target
 * @param {number} opt_targetItem
 * @return {undefined}
 */
function _emscripten_glUniform1iv(url, opt_target, opt_targetItem) {
  GLctx[_$_81a2[1802]](GL[_$_81a2[424]][url], HEAP32[_$_81a2[147]](opt_targetItem >> 2, opt_targetItem + opt_target * 4 >> 2));
}
/**
 * @param {?} url
 * @param {number} opt_target
 * @param {number} opt_targetItem
 * @return {undefined}
 */
function _glUniform4fv(url, opt_target, opt_targetItem) {
  var routes;
  if (4 * opt_target <= GL[_$_81a2[307]]) {
    routes = GL[_$_81a2[308]][4 * opt_target - 1];
    /** @type {number} */
    var pattern = 0;
    for (; pattern < 4 * opt_target; pattern = pattern + 4) {
      routes[pattern] = HEAPF32[opt_targetItem + 4 * pattern >> 2];
      routes[pattern + 1] = HEAPF32[opt_targetItem + (4 * pattern + 4) >> 2];
      routes[pattern + 2] = HEAPF32[opt_targetItem + (4 * pattern + 8) >> 2];
      routes[pattern + 3] = HEAPF32[opt_targetItem + (4 * pattern + 12) >> 2];
    }
  } else {
    routes = HEAPF32[_$_81a2[147]](opt_targetItem >> 2, opt_targetItem + opt_target * 16 >> 2);
  }
  GLctx[_$_81a2[1803]](GL[_$_81a2[424]][url], routes);
}
/**
 * @return {undefined}
 */
function _genjr() {
  Neptune[_$_81a2[25]](_$_81a2[1804]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _emscripten_glTexCoordPointer() {
  Neptune[_$_81a2[25]](_$_81a2[1805]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _generet() {
  Neptune[_$_81a2[25]](_$_81a2[1806]);
  abort(-1);
}
/**
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {?}
 */
function _llvm_bswap_i64(b, areMutuallyExclusive) {
  /** @type {number} */
  var $ = _llvm_bswap_i32(areMutuallyExclusive) >>> 0;
  /** @type {number} */
  var script = _llvm_bswap_i32(b) >>> 0;
  return (Runtime[_$_81a2[1779]](script), $) | 0;
}
/**
 * @return {undefined}
 */
function _genround_l_s() {
  Neptune[_$_81a2[25]](_$_81a2[1807]);
  abort(-1);
}
/**
 * @param {?} statusCode
 * @return {undefined}
 */
function __exit(statusCode) {
  Neptune[_$_81a2[1808]](statusCode);
}
/**
 * @param {?} msg
 * @return {undefined}
 */
function _exit(msg) {
  __exit(msg);
}
/**
 * @param {?} key
 * @param {?} value
 * @return {?}
 */
function _pthread_setspecific(key, value) {
  if (!(key in PTHREAD_SPECIFIC)) {
    return ERRNO_CODES[_$_81a2[434]];
  }
  PTHREAD_SPECIFIC[key] = value;
  return 0;
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _emscripten_glDepthFunc(a) {
  GLctx[_$_81a2[1790]](a);
}
/**
 * @param {?} a
 * @param {?} b
 * @return {undefined}
 */
function _emscripten_glVertexAttrib1f(a, b) {
  GLctx[_$_81a2[1336]](a, b);
}
/**
 * @return {undefined}
 */
function _genbgezl() {
  Neptune[_$_81a2[25]](_$_81a2[1809]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gentlbr() {
  Neptune[_$_81a2[25]](_$_81a2[1810]);
  abort(-1);
}
/**
 * @param {?} a
 * @return {?}
 */
function _glCheckFramebufferStatus(a) {
  return GLctx[_$_81a2[1722]](a);
}
/**
 * @return {undefined}
 */
function _gentlbp() {
  Neptune[_$_81a2[25]](_$_81a2[1811]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbc1f_idle() {
  Neptune[_$_81a2[25]](_$_81a2[1812]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gendsra32() {
  Neptune[_$_81a2[25]](_$_81a2[1813]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genc_un_d() {
  Neptune[_$_81a2[25]](_$_81a2[1814]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genswl() {
  Neptune[_$_81a2[25]](_$_81a2[1815]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gendaddi() {
  Neptune[_$_81a2[25]](_$_81a2[1816]);
  abort(-1);
}
/**
 * @param {?} targetfieldName
 * @param {?} s_message
 * @param {number} ret
 * @return {undefined}
 */
function _glBindAttribLocation(targetfieldName, s_message, ret) {
  ret = Pointer_stringify(ret);
  GLctx[_$_81a2[696]](GL[_$_81a2[422]][targetfieldName], s_message, ret);
}
/**
 * @return {undefined}
 */
function _emscripten_glShaderBinary() {
  GL[_$_81a2[680]](1280);
}
/**
 * @return {undefined}
 */
function _genc_un_s() {
  Neptune[_$_81a2[25]](_$_81a2[1817]);
  abort(-1);
}
/**
 * @param {number} far
 * @param {number} dest
 * @param {number} src
 * @return {?}
 */
function _eglInitialize(far, dest, src) {
  if (far == 62E3) {
    if (dest) {
      /** @type {number} */
      HEAP32[dest >> 2] = 1;
    }
    if (src) {
      /** @type {number} */
      HEAP32[src >> 2] = 4;
    }
    /** @type {boolean} */
    EGL[_$_81a2[686]] = true;
    EGL[_$_81a2[683]](12288);
    return 1;
  } else {
    EGL[_$_81a2[683]](12296);
    return 0;
  }
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @return {undefined}
 */
function _emscripten_glBlendColor(a, b, areMutuallyExclusive, parentType1) {
  GLctx[_$_81a2[1724]](a, b, areMutuallyExclusive, parentType1);
}
/**
 * @param {?} url
 * @param {number} opt_target
 * @param {number} opt_targetItem
 * @return {undefined}
 */
function _emscripten_glUniform4fv(url, opt_target, opt_targetItem) {
  var routes;
  if (4 * opt_target <= GL[_$_81a2[307]]) {
    routes = GL[_$_81a2[308]][4 * opt_target - 1];
    /** @type {number} */
    var pattern = 0;
    for (; pattern < 4 * opt_target; pattern = pattern + 4) {
      routes[pattern] = HEAPF32[opt_targetItem + 4 * pattern >> 2];
      routes[pattern + 1] = HEAPF32[opt_targetItem + (4 * pattern + 4) >> 2];
      routes[pattern + 2] = HEAPF32[opt_targetItem + (4 * pattern + 8) >> 2];
      routes[pattern + 3] = HEAPF32[opt_targetItem + (4 * pattern + 12) >> 2];
    }
  } else {
    routes = HEAPF32[_$_81a2[147]](opt_targetItem >> 2, opt_targetItem + opt_target * 16 >> 2);
  }
  GLctx[_$_81a2[1803]](GL[_$_81a2[424]][url], routes);
}
/**
 * @param {?} value
 * @param {?} comparator
 * @param {!Object} a
 * @param {(Object|number)} dist
 * @return {undefined}
 */
function _glBufferSubData(value, comparator, a, dist) {
  GLctx[_$_81a2[345]](value, comparator, HEAPU8[_$_81a2[147]](dist, dist + a));
}
/**
 * @return {undefined}
 */
function _genj_out() {
  Neptune[_$_81a2[25]](_$_81a2[1818]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _dyna_stop() {
  Neptune[_$_81a2[25]](_$_81a2[1819]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _emscripten_glFlush() {
  GLctx[_$_81a2[871]]();
}
/**
 * @return {undefined}
 */
function _gencfc1() {
  Neptune[_$_81a2[25]](_$_81a2[1820]);
  abort(-1);
}
/**
 * @param {?} url
 * @param {number} opt_target
 * @param {number} opt_targetItem
 * @return {undefined}
 */
function _emscripten_glUniform4iv(url, opt_target, opt_targetItem) {
  GLctx[_$_81a2[1821]](GL[_$_81a2[424]][url], HEAP32[_$_81a2[147]](opt_targetItem >> 2, opt_targetItem + opt_target * 16 >> 2));
}
/**
 * @param {?} a
 * @param {string} layerName
 * @return {undefined}
 */
function _emscripten_glBindTexture(a, layerName) {
  GLctx[_$_81a2[1499]](a, layerName ? GL[_$_81a2[1294]][layerName] : null);
}
/**
 * @param {?} url
 * @param {?} trimDomain
 * @return {undefined}
 */
function _emscripten_glUniform1i(url, trimDomain) {
  GLctx[_$_81a2[1525]](GL[_$_81a2[424]][url], trimDomain);
}
/**
 * @param {?} port_num
 * @param {number} x
 * @return {undefined}
 */
function _emscripten_glVertexAttrib2fv(port_num, x) {
  GLctx[_$_81a2[1306]](port_num, HEAPF32[x >> 2], HEAPF32[x + 4 >> 2]);
}
/**
 * @return {undefined}
 */
function _emscripten_glDeleteObjectARB() {
  Neptune[_$_81a2[25]](_$_81a2[1822]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbgezl_idle() {
  Neptune[_$_81a2[25]](_$_81a2[1823]);
  abort(-1);
}
/**
 * @param {?} url
 * @param {?} trimDomain
 * @return {undefined}
 */
function _emscripten_glUniform1f(url, trimDomain) {
  GLctx[_$_81a2[1517]](GL[_$_81a2[424]][url], trimDomain);
}
/**
 * @return {undefined}
 */
function _genc_ule_d() {
  Neptune[_$_81a2[25]](_$_81a2[1824]);
  abort(-1);
}
/**
 * @param {?} tid
 * @param {?} text
 * @param {?} cmp
 * @param {?} expected
 * @param {?} html
 * @param {?} name
 * @return {undefined}
 */
function _emscripten_glVertexAttribPointer(tid, text, cmp, expected, html, name) {
  var data = GL[_$_81a2[326]][_$_81a2[336]][tid];
  if (!GL[_$_81a2[348]]) {
    data[_$_81a2[339]] = text;
    data[_$_81a2[340]] = cmp;
    data[_$_81a2[346]] = expected;
    data[_$_81a2[341]] = html;
    data[_$_81a2[344]] = name;
    /** @type {boolean} */
    data[_$_81a2[337]] = true;
    return;
  }
  /** @type {boolean} */
  data[_$_81a2[337]] = false;
  GLctx[_$_81a2[347]](tid, text, cmp, !!expected, html, name);
}
/**
 * @param {?} level
 * @param {?} message
 * @param {?} value
 * @param {?} floor
 * @return {undefined}
 */
function _glShaderSource(level, message, value, floor) {
  var ret = GL[_$_81a2[1502]](level, message, value, floor);
  GLctx[_$_81a2[1503]](GL[_$_81a2[664]][level], ret);
}
/**
 * @param {?} computeOverlap
 * @param {string} index
 * @return {undefined}
 */
function _emscripten_glBindBuffer(computeOverlap, index) {
  var newY = index ? GL[_$_81a2[349]][index] : null;
  if (computeOverlap == GLctx[_$_81a2[329]]) {
    /** @type {string} */
    GL[_$_81a2[348]] = index;
  } else {
    if (computeOverlap == GLctx[_$_81a2[321]]) {
      /** @type {string} */
      GL[_$_81a2[732]] = index;
    }
  }
  GLctx[_$_81a2[323]](computeOverlap, newY);
}
/**
 * @return {undefined}
 */
function _genc_eq_d() {
  Neptune[_$_81a2[25]](_$_81a2[1825]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gendivu() {
  Neptune[_$_81a2[25]](_$_81a2[1826]);
  abort(-1);
}
/**
 * @param {number} h
 * @param {number} r
 * @return {undefined}
 */
function _emscripten_glGenBuffers(h, r) {
  /** @type {number} */
  var d = 0;
  for (; d < h; d++) {
    var HEAP = GLctx[_$_81a2[320]]();
    if (!HEAP) {
      GL[_$_81a2[680]](1282);
      for (; d < h;) {
        /** @type {number} */
        HEAP32[r + d++ * 4 >> 2] = 0;
      }
      return;
    }
    var $129 = GL[_$_81a2[369]](GL[_$_81a2[349]]);
    HEAP[_$_81a2[428]] = $129;
    GL[_$_81a2[349]][$129] = HEAP;
    HEAP32[r + d * 4 >> 2] = $129;
  }
}
/**
 * @param {?} url
 * @param {?} opt_target
 * @param {?} opt_rel
 * @param {?} mmCoreSplitViewBlock
 * @param {?} $state
 * @return {undefined}
 */
function _glUniform4i(url, opt_target, opt_rel, mmCoreSplitViewBlock, $state) {
  GLctx[_$_81a2[1512]](GL[_$_81a2[424]][url], opt_target, opt_rel, mmCoreSplitViewBlock, $state);
}
/** @type {number} */
var PTHREAD_SPECIFIC_NEXT_KEY = 1;
/**
 * @param {number} key
 * @param {?} destructor
 * @return {?}
 */
function _pthread_key_create(key, destructor) {
  if (key == 0) {
    return ERRNO_CODES[_$_81a2[434]];
  }
  HEAP32[key >> 2] = PTHREAD_SPECIFIC_NEXT_KEY;
  /** @type {number} */
  PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
  PTHREAD_SPECIFIC_NEXT_KEY++;
  return 0;
}
/**
 * @param {?} a
 * @return {?}
 */
function _glutDestroyWindow(a) {
  Neptune[_$_81a2[374]] = Browser[_$_81a2[1827]](Neptune[_$_81a2[370]], true, true);
  return 1;
}
/**
 * @param {number} b
 * @param {number} variableNames
 * @return {?}
 */
function _eglDestroyContext(b, variableNames) {
  if (b != 62E3) {
    EGL[_$_81a2[683]](12296);
    return 0;
  }
  if (variableNames != 62004) {
    EGL[_$_81a2[683]](12294);
    return 0;
  }
  EGL[_$_81a2[683]](12288);
  return 1;
}
/**
 * @param {?} computeOverlap
 * @param {string} index
 * @return {undefined}
 */
function _glBindBuffer(computeOverlap, index) {
  var newY = index ? GL[_$_81a2[349]][index] : null;
  if (computeOverlap == GLctx[_$_81a2[329]]) {
    /** @type {string} */
    GL[_$_81a2[348]] = index;
  } else {
    if (computeOverlap == GLctx[_$_81a2[321]]) {
      /** @type {string} */
      GL[_$_81a2[732]] = index;
    }
  }
  GLctx[_$_81a2[323]](computeOverlap, newY);
}
/**
 * @param {?} isSlidingUp
 * @param {?} $cont
 * @return {?}
 */
function ___syscall91(isSlidingUp, $cont) {
  SYSCALLS[_$_81a2[1268]] = $cont;
  try {
    var nsid = SYSCALLS[_$_81a2[994]]();
    var iSource = SYSCALLS[_$_81a2[994]]();
    var old = SYSCALLS[_$_81a2[1354]][nsid];
    if (!old) {
      return 0;
    }
    if (iSource === old[_$_81a2[1828]]) {
      var artistTrack = FS[_$_81a2[1142]](old[_$_81a2[882]]);
      SYSCALLS[_$_81a2[1829]](nsid, artistTrack, iSource, old[_$_81a2[1043]]);
      FS[_$_81a2[1830]](artistTrack);
      /** @type {null} */
      SYSCALLS[_$_81a2[1354]][nsid] = null;
      if (old[_$_81a2[1353]]) {
        _free(old[_$_81a2[1831]]);
      }
    }
    return 0;
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @param {?} CallAtEnd
 * @param {!Object} a
 * @param {(Object|number)} f
 * @param {?} optionalInit
 * @return {undefined}
 */
function _glBufferData(CallAtEnd, a, f, optionalInit) {
  if (!f) {
    GLctx[_$_81a2[325]](CallAtEnd, a, optionalInit);
  } else {
    GLctx[_$_81a2[325]](CallAtEnd, HEAPU8[_$_81a2[147]](f, f + a), optionalInit);
  }
}
/**
 * @param {number} op
 * @param {undefined} key
 * @return {undefined}
 */
function _glGetIntegerv(op, key) {
  emscriptenWebGLGet(op, key, _$_81a2[1427]);
}
/**
 * @param {?} ballNumber
 * @return {?}
 */
function _RWebCamStart(ballNumber) {
  /** @type {number} */
  var c = 0;
  if (RWC[_$_81a2[368]][ballNumber][_$_81a2[707]]) {
    _glGenTextures(1, RWC[_$_81a2[713]]);
    RWC[_$_81a2[368]][ballNumber][_$_81a2[1832]] = HEAP32[RWC[_$_81a2[713]] >> 2];
    if (RWC[_$_81a2[368]][ballNumber][_$_81a2[1832]] !== 0) {
      _glGetIntegerv(32873, RWC[_$_81a2[713]]);
      var len = HEAP32[RWC[_$_81a2[713]] >> 2];
      _glBindTexture(3553, RWC[_$_81a2[368]][ballNumber][_$_81a2[1832]]);
      _glTexParameteri(3553, 10240, 9729);
      _glTexParameteri(3553, 10241, 9729);
      _glTexParameteri(3553, 10242, 33071);
      _glTexParameteri(3553, 10243, 33071);
      _glBindTexture(3553, len);
      /** @type {boolean} */
      RWC[_$_81a2[368]][ballNumber][_$_81a2[1833]] = true;
      /** @type {number} */
      c = 1;
    }
  }
  if (RWC[_$_81a2[368]][ballNumber][_$_81a2[709]]) {
    RWC[_$_81a2[368]][ballNumber][_$_81a2[1834]] = document[_$_81a2[504]](_$_81a2[370]);
    /** @type {number} */
    c = 1;
  }
  return c;
}
/**
 * @param {?} drawtype
 * @return {?}
 */
function _emscripten_glIsShader(drawtype) {
  var dali_drawtype = GL[_$_81a2[664]][drawtype];
  if (!dali_drawtype) {
    return 0;
  }
  return GLctx[_$_81a2[1835]](dali_drawtype);
}
var _environ = STATICTOP;
STATICTOP = STATICTOP + 16;
/**
 * @param {!Object} originalAssignedStyles
 * @return {undefined}
 */
function ___buildEnvironment(originalAssignedStyles) {
  /** @type {number} */
  var g = 64;
  /** @type {number} */
  var arg = 1024;
  var value;
  var thrown;
  if (!___buildEnvironment[_$_81a2[667]]) {
    /** @type {boolean} */
    ___buildEnvironment[_$_81a2[667]] = true;
    ENV[_$_81a2[1836]] = ENV[_$_81a2[1837]] = _$_81a2[1838];
    ENV[_$_81a2[1839]] = _$_81a2[38];
    ENV[_$_81a2[1840]] = _$_81a2[38];
    ENV[_$_81a2[1841]] = _$_81a2[1175];
    ENV[_$_81a2[1842]] = _$_81a2[1843];
    ENV[_$_81a2[97]] = Neptune[_$_81a2[35]];
    value = allocate(arg, _$_81a2[69], ALLOC_STATIC);
    thrown = allocate(g * 4, _$_81a2[1844], ALLOC_STATIC);
    HEAP32[thrown >> 2] = value;
    HEAP32[_environ >> 2] = thrown;
  } else {
    thrown = HEAP32[_environ >> 2];
    value = HEAP32[thrown >> 2];
  }
  /** @type {!Array} */
  var PL$13 = [];
  /** @type {number} */
  var stuff = 0;
  var importantStyle;
  for (importantStyle in originalAssignedStyles) {
    if (typeof originalAssignedStyles[importantStyle] === _$_81a2[105]) {
      var str = importantStyle + _$_81a2[516] + originalAssignedStyles[importantStyle];
      PL$13[_$_81a2[107]](str);
      stuff = stuff + str[_$_81a2[36]];
    }
  }
  if (stuff > arg) {
    throw new Error(_$_81a2[1845]);
  }
  /** @type {number} */
  var linewidth = 4;
  /** @type {number} */
  var PL$17 = 0;
  for (; PL$17 < PL$13[_$_81a2[36]]; PL$17++) {
    str = PL$13[PL$17];
    writeAsciiToMemory(str, value);
    HEAP32[thrown + PL$17 * linewidth >> 2] = value;
    value = value + (str[_$_81a2[36]] + 1);
  }
  /** @type {number} */
  HEAP32[thrown + PL$13[_$_81a2[36]] * linewidth >> 2] = 0;
}
var ENV = {};
/**
 * @param {number} ret
 * @return {?}
 */
function _getenv(ret) {
  if (ret === 0) {
    return 0;
  }
  ret = Pointer_stringify(ret);
  if (!ENV[_$_81a2[14]](ret)) {
    return 0;
  }
  if (_getenv[_$_81a2[1846]]) {
    _free(_getenv[_$_81a2[1846]]);
  }
  _getenv[_$_81a2[1846]] = allocate(intArrayFromString(ENV[ret]), _$_81a2[69], ALLOC_NORMAL);
  return _getenv[_$_81a2[1846]];
}
/**
 * @return {?}
 */
function _glGetError() {
  if (GL[_$_81a2[310]]) {
    var a = GL[_$_81a2[310]];
    /** @type {number} */
    GL[_$_81a2[310]] = 0;
    return a;
  } else {
    return GLctx[_$_81a2[1782]]();
  }
}
/**
 * @param {number} url
 * @param {number} whensCollection
 * @return {undefined}
 */
function _emscripten_glDrawBuffers(url, whensCollection) {
  var entry = GL[_$_81a2[309]][url];
  /** @type {number} */
  var title = 0;
  for (; title < url; title++) {
    entry[title] = HEAP32[whensCollection + title * 4 >> 2];
  }
  GLctx[_$_81a2[398]](entry);
}
/**
 * @param {undefined} fnName
 * @param {undefined} func
 * @return {undefined}
 */
function _glGetFloatv(fnName, func) {
  emscriptenWebGLGet(fnName, func, _$_81a2[1428]);
}
/**
 * @param {?} computeOverlap
 * @param {string} index
 * @return {undefined}
 */
function _emscripten_glBindFramebuffer(computeOverlap, index) {
  GLctx[_$_81a2[1531]](computeOverlap, index ? GL[_$_81a2[1280]][index] : null);
}
/**
 * @param {?} value
 * @param {?} comparator
 * @param {!Object} a
 * @param {(Object|number)} dist
 * @return {undefined}
 */
function _emscripten_glBufferSubData(value, comparator, a, dist) {
  GLctx[_$_81a2[345]](value, comparator, HEAPU8[_$_81a2[147]](dist, dist + a));
}
/**
 * @return {undefined}
 */
function _genj_idle() {
  Neptune[_$_81a2[25]](_$_81a2[1847]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gendsra() {
  Neptune[_$_81a2[25]](_$_81a2[1848]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbc1f_out() {
  Neptune[_$_81a2[25]](_$_81a2[1849]);
  abort(-1);
}
/**
 * @param {?} isSlidingUp
 * @param {?} $cont
 * @return {?}
 */
function ___syscall85(isSlidingUp, $cont) {
  SYSCALLS[_$_81a2[1268]] = $cont;
  try {
    var artistTrack = SYSCALLS[_$_81a2[1270]]();
    var GET_AUTH_URL_TIMEOUT = SYSCALLS[_$_81a2[994]]();
    var numKeysDeleted = SYSCALLS[_$_81a2[994]]();
    return SYSCALLS[_$_81a2[1850]](artistTrack, GET_AUTH_URL_TIMEOUT, numKeysDeleted);
  } catch (usage) {
    if (typeof FS === _$_81a2[13] || !(usage instanceof FS[_$_81a2[868]])) {
      abort(usage);
    }
    return -usage[_$_81a2[302]];
  }
}
/**
 * @return {undefined}
 */
function _gendsrav() {
  Neptune[_$_81a2[25]](_$_81a2[1851]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbne() {
  Neptune[_$_81a2[25]](_$_81a2[1852]);
  abort(-1);
}
/**
 * @param {?} webpackHtmlFilename
 * @param {number} callback
 * @param {number} _userIds
 * @return {?}
 */
function _RWebCamPoll(webpackHtmlFilename, callback, _userIds) {
  if (!RWC[_$_81a2[1853]](webpackHtmlFilename)) {
    return 0;
  }
  /** @type {number} */
  var g = 0;
  if (RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[1832]] !== 0 && _userIds !== 0) {
    _glGetIntegerv(32873, RWC[_$_81a2[713]]);
    var len = HEAP32[RWC[_$_81a2[713]] >> 2];
    _glBindTexture(3553, RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[1832]]);
    if (RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[1833]]) {
      Neptune[_$_81a2[374]][_$_81a2[1857]](Neptune[_$_81a2[374]][_$_81a2[1854]], 0, Neptune[_$_81a2[374]][_$_81a2[1855]], Neptune[_$_81a2[374]][_$_81a2[1855]], Neptune[_$_81a2[374]][_$_81a2[1856]], RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[700]]);
      /** @type {boolean} */
      RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[1833]] = false;
    } else {
      Neptune[_$_81a2[374]][_$_81a2[1357]](Neptune[_$_81a2[374]][_$_81a2[1854]], 0, 0, 0, Neptune[_$_81a2[374]][_$_81a2[1855]], Neptune[_$_81a2[374]][_$_81a2[1856]], RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[700]]);
    }
    _glBindTexture(3553, len);
    Runtime[_$_81a2[91]](_$_81a2[1858], _userIds, [RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[1832]], 3553, 0]);
    /** @type {number} */
    g = 1;
  }
  if (RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[1834]] && callback !== 0) {
    if (!RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[1859]]) {
      RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[1834]][_$_81a2[505]] = RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[700]][_$_81a2[701]];
      RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[1834]][_$_81a2[506]] = RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[700]][_$_81a2[702]];
      RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[1859]] = RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[1834]][_$_81a2[358]](_$_81a2[507]);
      RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[1860]] = _malloc(RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[700]][_$_81a2[701]] * RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[700]][_$_81a2[702]] * 4);
    }
    RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[1859]][_$_81a2[508]](RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[700]], 0, 0, RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[1834]][_$_81a2[505]], RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[1834]][_$_81a2[506]]);
    var d = RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[1859]][_$_81a2[1861]](0, 0, RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[700]][_$_81a2[701]], RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[700]][_$_81a2[702]]);
    Neptune[_$_81a2[177]][_$_81a2[148]](d[_$_81a2[451]], RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[1860]]);
    Runtime[_$_81a2[91]](_$_81a2[1862], callback, [RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[1860]], RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[700]][_$_81a2[701]], RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[700]][_$_81a2[702]], RWC[_$_81a2[368]][webpackHtmlFilename][_$_81a2[700]][_$_81a2[701]] * 4]);
    /** @type {number} */
    g = 1;
  }
  return g;
}
/**
 * @return {undefined}
 */
function _genand() {
  Neptune[_$_81a2[25]](_$_81a2[1863]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbgezal_out() {
  Neptune[_$_81a2[25]](_$_81a2[1864]);
  abort(-1);
}
/**
 * @param {?} boardManager
 * @param {?} isSlidingUp
 * @param {?} $cont
 * @param {?} $slides
 * @return {undefined}
 */
function _emscripten_glColorMask(boardManager, isSlidingUp, $cont, $slides) {
  GLctx[_$_81a2[1865]](!!boardManager, !!isSlidingUp, !!$cont, !!$slides);
}
/**
 * @param {?} v12
 * @param {?} v22
 * @param {undefined} v33
 * @param {undefined} _cache_index
 * @param {undefined} key
 * @param {?} selector
 * @param {!Object} root
 * @param {?} valueA
 * @param {undefined} valueB
 * @return {undefined}
 */
function _glTexImage2D(v12, v22, v33, _cache_index, key, selector, root, valueA, valueB) {
  /** @type {null} */
  var items = null;
  if (valueB) {
    items = emscriptenWebGLGetTexPixelData(valueA, root, _cache_index, key, valueB, v33);
  }
  GLctx[_$_81a2[1857]](v12, v22, v33, _cache_index, key, selector, root, valueA, items);
}
/**
 * @param {number} result
 * @param {number} img
 * @param {number} w
 * @param {number} h
 * @return {?}
 */
function _eglMakeCurrent(result, img, w, h) {
  if (result != 62E3) {
    EGL[_$_81a2[683]](12296);
    return 0;
  }
  if (h != 0 && h != 62004) {
    EGL[_$_81a2[683]](12294);
    return 0;
  }
  if (w != 0 && w != 62006 || img != 0 && img != 62006) {
    EGL[_$_81a2[683]](12301);
    return 0;
  }
  /** @type {number} */
  EGL[_$_81a2[326]] = h;
  /** @type {number} */
  EGL[_$_81a2[685]] = img;
  /** @type {number} */
  EGL[_$_81a2[684]] = w;
  EGL[_$_81a2[683]](12288);
  return 1;
}
/**
 * @return {undefined}
 */
function _dyna_jump() {
  Neptune[_$_81a2[25]](_$_81a2[1866]);
  abort(-1);
}
/**
 * @param {?} subpal
 * @param {number} i
 * @param {number} a
 * @return {undefined}
 */
function _glUniform1fv(subpal, i, a) {
  var lineJson;
  if (i <= GL[_$_81a2[307]]) {
    lineJson = GL[_$_81a2[308]][i - 1];
    /** @type {number} */
    var time = 0;
    for (; time < i; ++time) {
      lineJson[time] = HEAPF32[a + 4 * time >> 2];
    }
  } else {
    lineJson = HEAPF32[_$_81a2[147]](a >> 2, a + i * 4 >> 2);
  }
  GLctx[_$_81a2[1646]](GL[_$_81a2[424]][subpal], lineJson);
}
/**
 * @return {undefined}
 */
function ___unlock() {
}
/**
 * @return {undefined}
 */
function _gendaddu() {
  Neptune[_$_81a2[25]](_$_81a2[1867]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genblezl() {
  Neptune[_$_81a2[25]](_$_81a2[1868]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genc_le_d() {
  Neptune[_$_81a2[25]](_$_81a2[1869]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gensc() {
  Neptune[_$_81a2[25]](_$_81a2[1870]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genni() {
  Neptune[_$_81a2[25]](_$_81a2[1871]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gensrl() {
  Neptune[_$_81a2[25]](_$_81a2[1872]);
  abort(-1);
}
/**
 * @param {?} ballNumber
 * @return {undefined}
 */
function _RWebCamStop(ballNumber) {
  if (RWC[_$_81a2[368]][ballNumber][_$_81a2[1832]]) {
    _glDeleteTextures(1, RWC[_$_81a2[368]][ballNumber][_$_81a2[1832]]);
  }
  if (RWC[_$_81a2[368]][ballNumber][_$_81a2[1834]]) {
    if (RWC[_$_81a2[368]][ballNumber][_$_81a2[1860]]) {
      _free(RWC[_$_81a2[368]][ballNumber][_$_81a2[1860]]);
      /** @type {number} */
      RWC[_$_81a2[368]][ballNumber][_$_81a2[1860]] = 0;
      /** @type {null} */
      RWC[_$_81a2[368]][ballNumber][_$_81a2[1859]] = null;
    }
    /** @type {null} */
    RWC[_$_81a2[368]][ballNumber][_$_81a2[1834]] = null;
  }
}
/**
 * @return {undefined}
 */
function _genc_le_s() {
  Neptune[_$_81a2[25]](_$_81a2[1873]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _gensra() {
  Neptune[_$_81a2[25]](_$_81a2[1874]);
  abort(-1);
}
/**
 * @param {?} v12
 * @param {?} v22
 * @param {undefined} v33
 * @param {undefined} _cache_index
 * @param {undefined} key
 * @param {?} selector
 * @param {!Object} root
 * @param {?} valueA
 * @param {undefined} valueB
 * @return {undefined}
 */
function _emscripten_glTexImage2D(v12, v22, v33, _cache_index, key, selector, root, valueA, valueB) {
  /** @type {null} */
  var items = null;
  if (valueB) {
    items = emscriptenWebGLGetTexPixelData(valueA, root, _cache_index, key, valueB, v33);
  }
  GLctx[_$_81a2[1857]](v12, v22, v33, _cache_index, key, selector, root, valueA, items);
}
/**
 * @param {number} CallAtEnd
 * @param {?} a
 * @return {undefined}
 */
function _glPixelStorei(CallAtEnd, a) {
  if (CallAtEnd == 3333) {
    GL[_$_81a2[1875]] = a;
  } else {
    if (CallAtEnd == 3317) {
      GL[_$_81a2[1356]] = a;
    }
  }
  GLctx[_$_81a2[1876]](CallAtEnd, a);
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _emscripten_glActiveTexture(a) {
  GLctx[_$_81a2[1616]](a);
}
/**
 * @return {undefined}
 */
function _genc_ult_d() {
  Neptune[_$_81a2[25]](_$_81a2[1877]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genslt() {
  Neptune[_$_81a2[25]](_$_81a2[1878]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _emscripten_glBindProgramARB() {
  Neptune[_$_81a2[25]](_$_81a2[1879]);
  abort(-1);
}
/**
 * @param {?} a
 * @return {undefined}
 */
function _glDepthMask(a) {
  GLctx[_$_81a2[1639]](!!a);
}
/**
 * @return {undefined}
 */
function _genc_ult_s() {
  Neptune[_$_81a2[25]](_$_81a2[1880]);
  abort(-1);
}
/**
 * @param {?} sourceid
 * @param {number} width
 * @param {?} text
 * @param {number} min
 * @return {undefined}
 */
function _glUniformMatrix4fv(sourceid, width, text, min) {
  var dataMatrix;
  if (16 * width <= GL[_$_81a2[307]]) {
    dataMatrix = GL[_$_81a2[308]][16 * width - 1];
    /** @type {number} */
    var x = 0;
    for (; x < 16 * width; x = x + 16) {
      dataMatrix[x] = HEAPF32[min + 4 * x >> 2];
      dataMatrix[x + 1] = HEAPF32[min + (4 * x + 4) >> 2];
      dataMatrix[x + 2] = HEAPF32[min + (4 * x + 8) >> 2];
      dataMatrix[x + 3] = HEAPF32[min + (4 * x + 12) >> 2];
      dataMatrix[x + 4] = HEAPF32[min + (4 * x + 16) >> 2];
      dataMatrix[x + 5] = HEAPF32[min + (4 * x + 20) >> 2];
      dataMatrix[x + 6] = HEAPF32[min + (4 * x + 24) >> 2];
      dataMatrix[x + 7] = HEAPF32[min + (4 * x + 28) >> 2];
      dataMatrix[x + 8] = HEAPF32[min + (4 * x + 32) >> 2];
      dataMatrix[x + 9] = HEAPF32[min + (4 * x + 36) >> 2];
      dataMatrix[x + 10] = HEAPF32[min + (4 * x + 40) >> 2];
      dataMatrix[x + 11] = HEAPF32[min + (4 * x + 44) >> 2];
      dataMatrix[x + 12] = HEAPF32[min + (4 * x + 48) >> 2];
      dataMatrix[x + 13] = HEAPF32[min + (4 * x + 52) >> 2];
      dataMatrix[x + 14] = HEAPF32[min + (4 * x + 56) >> 2];
      dataMatrix[x + 15] = HEAPF32[min + (4 * x + 60) >> 2];
    }
  } else {
    dataMatrix = HEAPF32[_$_81a2[147]](min >> 2, min + width * 64 >> 2);
  }
  GLctx[_$_81a2[1274]](GL[_$_81a2[424]][sourceid], !!text, dataMatrix);
}
/**
 * @param {?} ballNumber
 * @return {undefined}
 */
function _emscripten_glValidateProgram(ballNumber) {
  GLctx[_$_81a2[1881]](GL[_$_81a2[422]][ballNumber]);
}
/**
 * @return {undefined}
 */
function _genc_sf_d() {
  Neptune[_$_81a2[25]](_$_81a2[1882]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genc_f_s() {
  Neptune[_$_81a2[25]](_$_81a2[1883]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genbgezl_out() {
  Neptune[_$_81a2[25]](_$_81a2[1884]);
  abort(-1);
}
/**
 * @param {number} CallAtEnd
 * @param {?} a
 * @return {undefined}
 */
function _emscripten_glPixelStorei(CallAtEnd, a) {
  if (CallAtEnd == 3333) {
    GL[_$_81a2[1875]] = a;
  } else {
    if (CallAtEnd == 3317) {
      GL[_$_81a2[1356]] = a;
    }
  }
  GLctx[_$_81a2[1876]](CallAtEnd, a);
}
/**
 * @param {number} h
 * @param {number} r
 * @return {undefined}
 */
function _emscripten_glDeleteTextures(h, r) {
  /** @type {number} */
  var d = 0;
  for (; d < h; d++) {
    var len = HEAP32[r + d * 4 >> 2];
    var funcParent = GL[_$_81a2[1294]][len];
    if (!funcParent) {
      continue;
    }
    GLctx[_$_81a2[1316]](funcParent);
    /** @type {number} */
    funcParent[_$_81a2[428]] = 0;
    /** @type {null} */
    GL[_$_81a2[1294]][len] = null;
  }
}
/**
 * @return {undefined}
 */
function _gensll() {
  Neptune[_$_81a2[25]](_$_81a2[1885]);
  abort(-1);
}
/**
 * @return {undefined}
 */
function _genc_lt_d() {
  Neptune[_$_81a2[25]](_$_81a2[1886]);
  abort(-1);
}
/**
 * @param {number} offset
 * @return {?}
 */
function _time(offset) {
  /** @type {number} */
  var d = Date[_$_81a2[461]]() / 1E3 | 0;
  if (offset) {
    /** @type {number} */
    HEAP32[offset >> 2] = d;
  }
  return d;
}
/**
 * @param {undefined} fnName
 * @param {undefined} func
 * @return {undefined}
 */
function _emscripten_glGetBooleanv(fnName, func) {
  emscriptenWebGLGet(fnName, func, _$_81a2[1610]);
}
/**
 * @param {?} ballNumber
 * @return {undefined}
 */
function _emscripten_glCompileShader(ballNumber) {
  GLctx[_$_81a2[665]](GL[_$_81a2[664]][ballNumber]);
}
/**
 * @return {undefined}
 */
function _genc_f_d() {
  Neptune[_$_81a2[25]](_$_81a2[1887]);
  abort(-1);
}
var GLctx;
GL[_$_81a2[546]]();
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {undefined}
 */
Neptune[_$_81a2[583]] = function _pairSetAdd(a, b, areMutuallyExclusive) {
  Neptune[_$_81a2[25]](_$_81a2[1888]);
  Neptune[_$_81a2[583]] = Neptune[_$_81a2[576]];
  Browser[_$_81a2[583]](a, b, areMutuallyExclusive);
};
/**
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {undefined}
 */
Neptune[_$_81a2[576]] = function _pairSetAdd(a, b, areMutuallyExclusive) {
  Browser[_$_81a2[576]](a, b, areMutuallyExclusive);
};
/**
 * @param {?} a
 * @return {undefined}
 */
Neptune[_$_81a2[446]] = function makeColorMaterial(a) {
  Browser[_$_81a2[446]](a);
};
/**
 * @param {?} mmCoreSplitViewBlock
 * @param {?} $state
 * @param {?} $interpolate
 * @return {undefined}
 */
Neptune[_$_81a2[1485]] = function $get(mmCoreSplitViewBlock, $state, $interpolate) {
  Browser[_$_81a2[1485]](mmCoreSplitViewBlock, $state, $interpolate);
};
/**
 * @return {undefined}
 */
Neptune[_$_81a2[1889]] = function Neptune_pauseMainLoop() {
  Browser[_$_81a2[439]][_$_81a2[1529]]();
};
/**
 * @return {undefined}
 */
Neptune[_$_81a2[1890]] = function Neptune_resumeMainLoop() {
  Browser[_$_81a2[439]][_$_81a2[1891]]();
};
/**
 * @return {undefined}
 */
Neptune[_$_81a2[598]] = function Neptune_getUserMedia() {
  Browser[_$_81a2[598]]();
};
/**
 * @param {?} a
 * @param {?} ud
 * @param {?} na
 * @param {?} nb
 * @return {?}
 */
Neptune[_$_81a2[541]] = function addFace(a, ud, na, nb) {
  return Browser[_$_81a2[541]](a, ud, na, nb);
};
if (ENVIRONMENT_IS_NODE) {
  /**
   * @return {?}
   */
  _emscripten_get_now = function _emscripten_get_now_actual() {
    var a = process[_$_81a2[1892]]();
    return a[0] * 1E3 + a[1] / 1E6;
  };
} else {
  if (typeof dateNow !== _$_81a2[13]) {
    _emscripten_get_now = dateNow;
  } else {
    if (typeof self === _$_81a2[21] && self[_$_81a2[652]] && typeof self[_$_81a2[652]][_$_81a2[461]] === _$_81a2[22]) {
      /**
       * @return {?}
       */
      _emscripten_get_now = function() {
        return self[_$_81a2[652]][_$_81a2[461]]();
      };
    } else {
      if (typeof performance === _$_81a2[21] && typeof performance[_$_81a2[461]] === _$_81a2[22]) {
        /**
         * @return {?}
         */
        _emscripten_get_now = function() {
          return performance[_$_81a2[461]]();
        };
      } else {
        _emscripten_get_now = Date[_$_81a2[461]];
      }
    }
  }
}
FS[_$_81a2[1893]]();
__ATINIT__[_$_81a2[198]](function() {
  if (!Neptune[_$_81a2[1894]] && !FS[_$_81a2[546]][_$_81a2[1212]]) {
    FS[_$_81a2[546]]();
  }
});
__ATMAIN__[_$_81a2[107]](function() {
  /** @type {boolean} */
  FS[_$_81a2[1104]] = false;
});
__ATEXIT__[_$_81a2[107]](function() {
  FS[_$_81a2[49]]();
});
Neptune[_$_81a2[1895]] = FS[_$_81a2[1896]];
Neptune[_$_81a2[1897]] = FS[_$_81a2[1078]];
Neptune[_$_81a2[1898]] = FS[_$_81a2[1261]];
Neptune[_$_81a2[1899]] = FS[_$_81a2[1900]];
Neptune[_$_81a2[1901]] = FS[_$_81a2[1902]];
Neptune[_$_81a2[1903]] = FS[_$_81a2[1904]];
Neptune[_$_81a2[1905]] = FS[_$_81a2[1189]];
Neptune[_$_81a2[1906]] = FS[_$_81a2[905]];
__ATINIT__[_$_81a2[198]](function() {
  TTY[_$_81a2[546]]();
});
__ATEXIT__[_$_81a2[107]](function() {
  TTY[_$_81a2[1907]]();
});
if (ENVIRONMENT_IS_NODE) {
  var fs = require(_$_81a2[28]);
  var NODEJS_PATH = require(_$_81a2[29]);
  NODEFS[_$_81a2[1893]]();
}
__ATINIT__[_$_81a2[107]](function() {
  SOCKFS[_$_81a2[1011]] = FS[_$_81a2[954]](SOCKFS, {}, null);
});
___buildEnvironment(ENV);
DYNAMICTOP_PTR = allocate(1, _$_81a2[71], ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime[_$_81a2[1908]](STATICTOP);
STACK_MAX = STACK_BASE + TOTAL_STACK;
DYNAMIC_BASE = Runtime[_$_81a2[1908]](STACK_MAX);
HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
/** @type {boolean} */
staticSealed = true;
/** @type {number} */
Neptune[_$_81a2[272]] = 3788;
/** @type {number} */
Neptune[_$_81a2[273]] = 3788;
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @param {?} selectionSet1
 * @param {?} parentType2
 * @param {?} selectionSet2
 * @return {?}
 */
function invoke_iiiiiiii(CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {
  try {
    return Neptune[_$_81a2[1909]](CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} chosenRequest
 * @param {?} index
 * @param {?} a1
 * @param {?} a2
 * @param {?} a3
 * @param {?} a4
 * @return {undefined}
 */
function invoke_viiiii(chosenRequest, index, a1, a2, a3, a4) {
  try {
    Neptune[_$_81a2[1910]](chosenRequest, index, a1, a2, a3, a4);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {undefined}
 */
function invoke_vd(b, areMutuallyExclusive) {
  try {
    Neptune[_$_81a2[1911]](b, areMutuallyExclusive);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {undefined}
 */
function invoke_vf(b, areMutuallyExclusive) {
  try {
    Neptune[_$_81a2[1912]](b, areMutuallyExclusive);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} index
 * @param {?} a1
 * @return {undefined}
 */
function invoke_vi(index, a1) {
  try {
    Neptune[_$_81a2[197]](index, a1);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} a2
 * @param {?} a3
 * @param {?} a4
 * @return {undefined}
 */
function invoke_vii(a2, a3, a4) {
  try {
    Neptune[_$_81a2[1737]](a2, a3, a4);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @param {?} selectionSet1
 * @param {?} parentType2
 * @return {?}
 */
function invoke_iiiiiii(CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2) {
  try {
    return Neptune[_$_81a2[1913]](CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} index
 * @param {?} a1
 * @return {?}
 */
function invoke_ii(index, a1) {
  try {
    return Neptune[_$_81a2[1914]](index, a1);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} requestString
 * @param {?} rootValue
 * @param {?} effectivePath
 * @param {?} f
 * @param {?} g
 * @param {?} zoomInPercentage
 * @param {?} xBias
 * @param {?} uvx1
 * @param {?} uvy1
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {undefined}
 */
function invoke_viiiiiiiiiii(requestString, rootValue, effectivePath, f, g, zoomInPercentage, xBias, uvx1, uvy1, a, b, areMutuallyExclusive) {
  try {
    Neptune[_$_81a2[1915]](requestString, rootValue, effectivePath, f, g, zoomInPercentage, xBias, uvx1, uvy1, a, b, areMutuallyExclusive);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @return {undefined}
 */
function invoke_vif(CallAtEnd, a, b) {
  try {
    Neptune[_$_81a2[1916]](CallAtEnd, a, b);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} f
 * @param {?} e
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @return {?}
 */
function invoke_fffff(f, e, b, areMutuallyExclusive, parentType1) {
  try {
    return Neptune[_$_81a2[1917]](f, e, b, areMutuallyExclusive, parentType1);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @param {?} selectionSet1
 * @return {undefined}
 */
function invoke_viffff(CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1) {
  try {
    Neptune[_$_81a2[1918]](CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @param {?} selectionSet1
 * @return {?}
 */
function invoke_iiiiii(CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1) {
  try {
    return Neptune[_$_81a2[1919]](CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {?}
 */
function invoke_iidi(CallAtEnd, a, b, areMutuallyExclusive) {
  try {
    return Neptune[_$_81a2[1920]](CallAtEnd, a, b, areMutuallyExclusive);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} a3
 * @param {?} a4
 * @param {?} a5
 * @param {?} a6
 * @return {?}
 */
function invoke_iiii(a3, a4, a5, a6) {
  try {
    return Neptune[_$_81a2[1921]](a3, a4, a5, a6);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @param {?} selectionSet1
 * @param {?} parentType2
 * @return {undefined}
 */
function invoke_viiiiif(CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2) {
  try {
    Neptune[_$_81a2[1922]](CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {undefined}
 */
function invoke_viff(CallAtEnd, a, b, areMutuallyExclusive) {
  try {
    Neptune[_$_81a2[1923]](CallAtEnd, a, b, areMutuallyExclusive);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} f
 * @param {?} e
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @return {undefined}
 */
function invoke_vifff(f, e, b, areMutuallyExclusive, parentType1) {
  try {
    Neptune[_$_81a2[1924]](f, e, b, areMutuallyExclusive, parentType1);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function invoke_fii(CallAtEnd, a, b) {
  try {
    return Neptune[_$_81a2[1925]](CallAtEnd, a, b);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {?}
 */
function invoke_iiif(CallAtEnd, a, b, areMutuallyExclusive) {
  try {
    return Neptune[_$_81a2[1926]](CallAtEnd, a, b, areMutuallyExclusive);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @param {?} selectionSet1
 * @param {?} parentType2
 * @param {?} mmCoreSplitViewBlock
 * @param {?} $state
 * @return {undefined}
 */
function invoke_viiiiiiii(CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2, mmCoreSplitViewBlock, $state) {
  try {
    Neptune[_$_81a2[1927]](CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2, mmCoreSplitViewBlock, $state);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} submitId
 * @param {?} blindMarking
 * @param {?} plugins
 * @param {?} type
 * @param {?} providers
 * @param {?} src
 * @param {?} newSrc
 * @param {?} isBgroundImg
 * @param {?} stgs
 * @param {?} index
 * @param {?} m_e
 * @param {?} m_u
 * @param {?} m_c
 * @param {?} dt
 * @param {?} dt_inv
 * @return {undefined}
 */
function invoke_viiiiiiiiiiiiii(submitId, blindMarking, plugins, type, providers, src, newSrc, isBgroundImg, stgs, index, m_e, m_u, m_c, dt, dt_inv) {
  try {
    Neptune[_$_81a2[1928]](submitId, blindMarking, plugins, type, providers, src, newSrc, isBgroundImg, stgs, index, m_e, m_u, m_c, dt, dt_inv);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {?}
 */
function invoke_fiii(CallAtEnd, a, b, areMutuallyExclusive) {
  try {
    return Neptune[_$_81a2[1929]](CallAtEnd, a, b, areMutuallyExclusive);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @param {?} selectionSet1
 * @param {?} parentType2
 * @return {undefined}
 */
function invoke_viiffff(CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2) {
  try {
    Neptune[_$_81a2[1930]](CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function invoke_iif(CallAtEnd, a, b) {
  try {
    return Neptune[_$_81a2[1931]](CallAtEnd, a, b);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @param {?} selectionSet1
 * @param {?} parentType2
 * @param {?} selectionSet2
 * @return {undefined}
 */
function invoke_viiiiiii(CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {
  try {
    Neptune[_$_81a2[1932]](CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @param {?} selectionSet1
 * @param {?} parentType2
 * @param {?} selectionSet2
 * @param {?} i
 * @param {?} forceOptional
 * @return {undefined}
 */
function invoke_viiiiiiiii(CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2, i, forceOptional) {
  try {
    Neptune[_$_81a2[1933]](CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2, i, forceOptional);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function invoke_iii(CallAtEnd, a, b) {
  try {
    return Neptune[_$_81a2[1934]](CallAtEnd, a, b);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} a5
 * @param {?} a6
 * @param {?} a1
 * @param {?} a2
 * @param {?} a3
 * @param {?} a4
 * @param {?} index
 * @return {undefined}
 */
function invoke_viiiiii(a5, a6, a1, a2, a3, a4, index) {
  try {
    Neptune[_$_81a2[1935]](a5, a6, a1, a2, a3, a4, index);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @return {undefined}
 */
function invoke_vfi(CallAtEnd, a, b) {
  try {
    Neptune[_$_81a2[1936]](CallAtEnd, a, b);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {undefined}
 */
function invoke_viii(CallAtEnd, a, b, areMutuallyExclusive) {
  try {
    Neptune[_$_81a2[1744]](CallAtEnd, a, b, areMutuallyExclusive);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} a
 * @return {?}
 */
function invoke_i(a) {
  try {
    return Neptune[_$_81a2[1937]](a);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @return {undefined}
 */
function invoke_vff(CallAtEnd, a, b) {
  try {
    Neptune[_$_81a2[1938]](CallAtEnd, a, b);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} f
 * @param {?} e
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @return {undefined}
 */
function invoke_vffff(f, e, b, areMutuallyExclusive, parentType1) {
  try {
    Neptune[_$_81a2[1939]](f, e, b, areMutuallyExclusive, parentType1);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} f
 * @param {?} e
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @return {?}
 */
function invoke_iiiii(f, e, b, areMutuallyExclusive, parentType1) {
  try {
    return Neptune[_$_81a2[1940]](f, e, b, areMutuallyExclusive, parentType1);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @param {?} selectionSet1
 * @param {?} parentType2
 * @return {undefined}
 */
function invoke_vdddddd(CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2) {
  try {
    Neptune[_$_81a2[1941]](CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @return {undefined}
 */
function invoke_vdd(CallAtEnd, a, b) {
  try {
    Neptune[_$_81a2[1942]](CallAtEnd, a, b);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} index
 * @return {undefined}
 */
function invoke_v(index) {
  try {
    Neptune[_$_81a2[196]](index);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @param {?} selectionSet1
 * @param {?} parentType2
 * @param {?} mmCoreSplitViewBlock
 * @param {?} $state
 * @return {?}
 */
function invoke_iiiiiiiii(CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2, mmCoreSplitViewBlock, $state) {
  try {
    return Neptune[_$_81a2[1943]](CallAtEnd, a, b, areMutuallyExclusive, parentType1, selectionSet1, parentType2, mmCoreSplitViewBlock, $state);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} CallAtEnd
 * @param {?} a
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @return {undefined}
 */
function invoke_viif(CallAtEnd, a, b, areMutuallyExclusive) {
  try {
    Neptune[_$_81a2[1944]](CallAtEnd, a, b, areMutuallyExclusive);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} a4
 * @param {?} a5
 * @param {?} a6
 * @param {?} a7
 * @param {?} a8
 * @return {undefined}
 */
function invoke_viiii(a4, a5, a6, a7, a8) {
  try {
    Neptune[_$_81a2[1762]](a4, a5, a6, a7, a8);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
/**
 * @param {?} f
 * @param {?} e
 * @param {?} b
 * @param {?} areMutuallyExclusive
 * @param {?} parentType1
 * @return {?}
 */
function invoke_iiiif(f, e, b, areMutuallyExclusive, parentType1) {
  try {
    return Neptune[_$_81a2[1945]](f, e, b, areMutuallyExclusive, parentType1);
  } catch (e) {
    if (typeof e !== _$_81a2[110] && e !== _$_81a2[1638]) {
      throw e;
    }
    Neptune[_$_81a2[1637]](1, 0);
  }
}
Neptune[_$_81a2[1946]] = {
  "Math" : Math,
  "Int8Array" : Int8Array,
  "Int16Array" : Int16Array,
  "Int32Array" : Int32Array,
  "Uint8Array" : Uint8Array,
  "Uint16Array" : Uint16Array,
  "Uint32Array" : Uint32Array,
  "Float32Array" : Float32Array,
  "Float64Array" : Float64Array,
  "NaN" : NaN,
  "Infinity" : Infinity
};
Neptune[_$_81a2[1947]] = {
  "abort" : abort,
  "assert" : assert,
  "enlargeMemory" : enlargeMemory,
  "getTotalMemory" : getTotalMemory,
  "abortOnCannotGrowMemory" : abortOnCannotGrowMemory,
  "invoke_iiiiiiii" : invoke_iiiiiiii,
  "invoke_viiiii" : invoke_viiiii,
  "invoke_vd" : invoke_vd,
  "invoke_vf" : invoke_vf,
  "invoke_vi" : invoke_vi,
  "invoke_vii" : invoke_vii,
  "invoke_iiiiiii" : invoke_iiiiiii,
  "invoke_ii" : invoke_ii,
  "invoke_viiiiiiiiiii" : invoke_viiiiiiiiiii,
  "invoke_vif" : invoke_vif,
  "invoke_fffff" : invoke_fffff,
  "invoke_viffff" : invoke_viffff,
  "invoke_iiiiii" : invoke_iiiiii,
  "invoke_iidi" : invoke_iidi,
  "invoke_iiii" : invoke_iiii,
  "invoke_viiiiif" : invoke_viiiiif,
  "invoke_viff" : invoke_viff,
  "invoke_vifff" : invoke_vifff,
  "invoke_fii" : invoke_fii,
  "invoke_iiif" : invoke_iiif,
  "invoke_viiiiiiii" : invoke_viiiiiiii,
  "invoke_viiiiiiiiiiiiii" : invoke_viiiiiiiiiiiiii,
  "invoke_fiii" : invoke_fiii,
  "invoke_viiffff" : invoke_viiffff,
  "invoke_iif" : invoke_iif,
  "invoke_viiiiiii" : invoke_viiiiiii,
  "invoke_viiiiiiiii" : invoke_viiiiiiiii,
  "invoke_iii" : invoke_iii,
  "invoke_viiiiii" : invoke_viiiiii,
  "invoke_vfi" : invoke_vfi,
  "invoke_viii" : invoke_viii,
  "invoke_i" : invoke_i,
  "invoke_vff" : invoke_vff,
  "invoke_vffff" : invoke_vffff,
  "invoke_iiiii" : invoke_iiiii,
  "invoke_vdddddd" : invoke_vdddddd,
  "invoke_vdd" : invoke_vdd,
  "invoke_v" : invoke_v,
  "invoke_iiiiiiiii" : invoke_iiiiiiiii,
  "invoke_viif" : invoke_viif,
  "invoke_viiii" : invoke_viiii,
  "invoke_iiiif" : invoke_iiiif,
  "_emscripten_glGetTexParameterfv" : _emscripten_glGetTexParameterfv,
  "_genbc1fl" : _genbc1fl,
  "_genlink_subblock" : _genlink_subblock,
  "__inet_ntop6_raw" : __inet_ntop6_raw,
  "___syscall220" : ___syscall220,
  "_emscripten_glBlendFuncSeparate" : _emscripten_glBlendFuncSeparate,
  "_gensll" : _gensll,
  "_emscripten_glGetIntegerv" : _emscripten_glGetIntegerv,
  "_glUniformMatrix4fv" : _glUniformMatrix4fv,
  "_genslt" : _genslt,
  "_gencvt_d_s" : _gencvt_d_s,
  "___assert_fail" : ___assert_fail,
  "_genfloor_w_s" : _genfloor_w_s,
  "_glVertexAttrib4f" : _glVertexAttrib4f,
  "_emscripten_glDepthFunc" : _emscripten_glDepthFunc,
  "_gendaddiu" : _gendaddiu,
  "_genround_l_s" : _genround_l_s,
  "_gensdc1" : _gensdc1,
  "_aayuq8971" : _aayuq8971,
  "_glDisableVertexAttribArray" : _glDisableVertexAttribArray,
  "_genfloor_w_d" : _genfloor_w_d,
  "_emscripten_memcpy_big" : _emscripten_memcpy_big,
  "_genround_l_d" : _genround_l_d,
  "_emscripten_glUniform1f" : _emscripten_glUniform1f,
  "_genj" : _genj,
  "emscriptenWebGLComputeImageSize" : emscriptenWebGLComputeImageSize,
  "___syscall221" : ___syscall221,
  "_emscripten_glUniform1i" : _emscripten_glUniform1i,
  "_glUniform3f" : _glUniform3f,
  "_emscripten_glIsProgram" : _emscripten_glIsProgram,
  "_glFramebufferRenderbuffer" : _glFramebufferRenderbuffer,
  "_emscripten_glCopyTexImage2D" : _emscripten_glCopyTexImage2D,
  "_gendsrlv" : _gendsrlv,
  "_emscripten_glTexParameteriv" : _emscripten_glTexParameteriv,
  "_genc_ngle_d" : _genc_ngle_d,
  "_gendsubu" : _gendsubu,
  "_nbxyqu778" : _nbxyqu778,
  "___syscall140" : ___syscall140,
  "___syscall142" : ___syscall142,
  "___syscall145" : ___syscall145,
  "___syscall146" : ___syscall146,
  "_emscripten_glAttachShader" : _emscripten_glAttachShader,
  "_emscripten_get_now_is_monotonic" : _emscripten_get_now_is_monotonic,
  "_genbgezall_idle" : _genbgezall_idle,
  "_emscripten_glTexParameterfv" : _emscripten_glTexParameterfv,
  "__inet_ntop4_raw" : __inet_ntop4_raw,
  "_emscripten_glUniformMatrix2fv" : _emscripten_glUniformMatrix2fv,
  "_genbgez_idle" : _genbgez_idle,
  "_glDepthMask" : _glDepthMask,
  "_gendiv" : _gendiv,
  "_emscripten_glVertexAttrib2fv" : _emscripten_glVertexAttrib2fv,
  "_glViewport" : _glViewport,
  "_genceil_l_d" : _genceil_l_d,
  "_emscripten_glFlush" : _emscripten_glFlush,
  "_genceil_l_s" : _genceil_l_s,
  "_genmflo" : _genmflo,
  "_kkauyq554" : _kkauyq554,
  "_nanosleep" : _nanosleep,
  "___syscall91" : ___syscall91,
  "_genabs_s" : _genabs_s,
  "_sasiu89" : _sasiu89,
  "_gensrl" : _gensrl,
  "_genabs_d" : _genabs_d,
  "_eglWaitClient" : _eglWaitClient,
  "_gensra" : _gensra,
  "_genjr" : _genjr,
  "_genadd_s" : _genadd_s,
  "_glCreateProgram" : _glCreateProgram,
  "_gensub" : _gensub,
  "__addDays" : __addDays,
  "_genblezl_out" : _genblezl_out,
  "_emscripten_glLoadMatrixf" : _emscripten_glLoadMatrixf,
  "_emscripten_glStencilFuncSeparate" : _emscripten_glStencilFuncSeparate,
  "_emscripten_glVertexAttrib3f" : _emscripten_glVertexAttrib3f,
  "_genaddiu" : _genaddiu,
  "_genadd_d" : _genadd_d,
  "_glUniform2i" : _glUniform2i,
  "_glUniform2f" : _glUniform2f,
  "_passe2" : _passe2,
  "_genc_ngl_d" : _genc_ngl_d,
  "_glCullFace" : _glCullFace,
  "_genbltzal_idle" : _genbltzal_idle,
  "_genc_ngl_s" : _genc_ngl_s,
  "___syscall20" : ___syscall20,
  "_genbnel" : _genbnel,
  "_emscripten_glUniform1iv" : _emscripten_glUniform1iv,
  "_genbgez_out" : _genbgez_out,
  "_glBlendFunc" : _glBlendFunc,
  "emscriptenWebGLGetUniform" : emscriptenWebGLGetUniform,
  "_glClearColor" : _glClearColor,
  "_glFinish" : _glFinish,
  "_emscripten_glUniform3iv" : _emscripten_glUniform3iv,
  "_emscripten_glGetBufferParameteriv" : _emscripten_glGetBufferParameteriv,
  "_emscripten_glVertexAttrib4fv" : _emscripten_glVertexAttrib4fv,
  "_shyuu8897" : _shyuu8897,
  "_pthread_getspecific" : _pthread_getspecific,
  "_glDrawArrays" : _glDrawArrays,
  "_glGetError" : _glGetError,
  "_RWebCamStart" : _RWebCamStart,
  "_emscripten_glDepthRange" : _emscripten_glDepthRange,
  "_RWebCamInit" : _RWebCamInit,
  "_glActiveTexture" : _glActiveTexture,
  "_genbgtz_out" : _genbgtz_out,
  "_emscripten_asm_const_iii" : _emscripten_asm_const_iii,
  "_eglMakeCurrent" : _eglMakeCurrent,
  "_gensqrt_d" : _gensqrt_d,
  "_emscripten_glFramebufferTexture2D" : _emscripten_glFramebufferTexture2D,
  "_sysconf" : _sysconf,
  "_glEnableVertexAttribArray" : _glEnableVertexAttribArray,
  "_emscripten_glStencilFunc" : _emscripten_glStencilFunc,
  "_genbeq_idle" : _genbeq_idle,
  "_gensqrt_s" : _gensqrt_s,
  "_glVertexAttrib4fv" : _glVertexAttrib4fv,
  "_glDeleteBuffers" : _glDeleteBuffers,
  "_localtime" : _localtime,
  "_genand" : _genand,
  "_genldr" : _genldr,
  "___lock" : ___lock,
  "_genfin_block" : _genfin_block,
  "_genbc1fl_idle" : _genbc1fl_idle,
  "_emscripten_glRenderbufferStorage" : _emscripten_glRenderbufferStorage,
  "_genbgtz_idle" : _genbgtz_idle,
  "_emscripten_glVertexPointer" : _emscripten_glVertexPointer,
  "__read_sockaddr" : __read_sockaddr,
  "_eglInitialize" : _eglInitialize,
  "_genldl" : _genldl,
  "_emscripten_glBindRenderbuffer" : _emscripten_glBindRenderbuffer,
  "_genj_idle" : _genj_idle,
  "_genslti" : _genslti,
  "_glLinkProgram" : _glLinkProgram,
  "_genjal_out" : _genjal_out,
  "_emscripten_glGetUniformfv" : _emscripten_glGetUniformfv,
  "_genbc1t_idle" : _genbc1t_idle,
  "_gencfc1" : _gencfc1,
  "_gendivu" : _gendivu,
  "_gensltu" : _gensltu,
  "_emscripten_glStencilOp" : _emscripten_glStencilOp,
  "_emscripten_glBlendEquation" : _emscripten_glBlendEquation,
  "_genaddi" : _genaddi,
  "_genaddu" : _genaddu,
  "_emscripten_glBufferSubData" : _emscripten_glBufferSubData,
  "_emscripten_glGetProgramInfoLog" : _emscripten_glGetProgramInfoLog,
  "_emscripten_glUniform4fv" : _emscripten_glUniform4fv,
  "___cxa_throw" : ___cxa_throw,
  "_gentlbwr" : _gentlbwr,
  "_genbltzall" : _genbltzall,
  "_emscripten_glUniform2fv" : _emscripten_glUniform2fv,
  "_emscripten_glBindBuffer" : _emscripten_glBindBuffer,
  "_emscripten_glGetFloatv" : _emscripten_glGetFloatv,
  "_glTexSubImage2D" : _glTexSubImage2D,
  "_glUseProgram" : _glUseProgram,
  "_genbgezl" : _genbgezl,
  "_eglGetDisplay" : _eglGetDisplay,
  "_genbgtz" : _genbgtz,
  "_genc_ngt_s" : _genc_ngt_s,
  "_gensdr" : _gensdr,
  "_emscripten_glCullFace" : _emscripten_glCullFace,
  "_gensdl" : _gensdl,
  "_emscripten_glStencilMaskSeparate" : _emscripten_glStencilMaskSeparate,
  "_genc_ngt_d" : _genc_ngt_d,
  "_emscripten_glVertexAttrib3fv" : _emscripten_glVertexAttrib3fv,
  "_emscripten_glUniform3fv" : _emscripten_glUniform3fv,
  "_emscripten_glEnable" : _emscripten_glEnable,
  "_glBindBuffer" : _glBindBuffer,
  "_genbeq" : _genbeq,
  "_dyna_jump" : _dyna_jump,
  "_eglBindAPI" : _eglBindAPI,
  "_emscripten_glDrawArraysInstanced" : _emscripten_glDrawArraysInstanced,
  "_glPolygonOffset" : _glPolygonOffset,
  "_eglCreateContext" : _eglCreateContext,
  "_clock" : _clock,
  "_emscripten_glGetBooleanv" : _emscripten_glGetBooleanv,
  "_emscripten_glVertexAttribDivisor" : _emscripten_glVertexAttribDivisor,
  "_genround_w_s" : _genround_w_s,
  "_emscripten_glGenBuffers" : _emscripten_glGenBuffers,
  "_gencvt_s_w" : _gencvt_s_w,
  "_emscripten_glGetShaderPrecisionFormat" : _emscripten_glGetShaderPrecisionFormat,
  "_genreserved" : _genreserved,
  "_emscripten_glIsEnabled" : _emscripten_glIsEnabled,
  "_gensltiu" : _gensltiu,
  "_gendsll32" : _gendsll32,
  "_emscripten_glStencilOpSeparate" : _emscripten_glStencilOpSeparate,
  "_psdqaq78" : _psdqaq78,
  "_emscripten_glGetActiveAttrib" : _emscripten_glGetActiveAttrib,
  "_glGenerateMipmap" : _glGenerateMipmap,
  "_gendiv_s" : _gendiv_s,
  "_gendiv_d" : _gendiv_d,
  "___cxa_find_matching_catch" : ___cxa_find_matching_catch,
  "_emscripten_glClear" : _emscripten_glClear,
  "_gencache" : _gencache,
  "_emscripten_glValidateProgram" : _emscripten_glValidateProgram,
  "_emscripten_glUniform4iv" : _emscripten_glUniform4iv,
  "_genbc1fl_out" : _genbc1fl_out,
  "___setErrNo" : ___setErrNo,
  "_genbgtzl_out" : _genbgtzl_out,
  "_genbne_idle" : _genbne_idle,
  "_gensrav" : _gensrav,
  "_emscripten_glVertexAttrib2f" : _emscripten_glVertexAttrib2f,
  "___resumeException" : ___resumeException,
  "_emscripten_glBlendFunc" : _emscripten_glBlendFunc,
  "_emscripten_glGetError" : _emscripten_glGetError,
  "_emscripten_glBufferData" : _emscripten_glBufferData,
  "_emscripten_glVertexAttrib1fv" : _emscripten_glVertexAttrib1fv,
  "_glGenTextures" : _glGenTextures,
  "_glGetIntegerv" : _glGetIntegerv,
  "_eglCreateWindowSurface" : _eglCreateWindowSurface,
  "_emscripten_glClearStencil" : _emscripten_glClearStencil,
  "emscriptenWebGLGet" : emscriptenWebGLGet,
  "_genbeql" : _genbeql,
  "_genadd" : _genadd,
  "_emscripten_glFinish" : _emscripten_glFinish,
  "_genc_f_s" : _genc_f_s,
  "_emscripten_glClearDepth" : _emscripten_glClearDepth,
  "_gencvt_l_d" : _gencvt_l_d,
  "_emscripten_glUniform1fv" : _emscripten_glUniform1fv,
  "_genc_f_d" : _genc_f_d,
  "_glBindFramebuffer" : _glBindFramebuffer,
  "_glGenFramebuffers" : _glGenFramebuffers,
  "_genlwr" : _genlwr,
  "_gencvt_l_s" : _gencvt_l_s,
  "_emscripten_glUniform4i" : _emscripten_glUniform4i,
  "_glUniform1fv" : _glUniform1fv,
  "_llvm_pow_f64" : _llvm_pow_f64,
  "_glDeleteFramebuffers" : _glDeleteFramebuffers,
  "_genblezl_idle" : _genblezl_idle,
  "_emscripten_glUniform4f" : _emscripten_glUniform4f,
  "_genbgez" : _genbgez,
  "_glCheckFramebufferStatus" : _glCheckFramebufferStatus,
  "_glVertexAttribPointer" : _glVertexAttribPointer,
  "_emscripten_glStencilMask" : _emscripten_glStencilMask,
  "_genc_nge_s" : _genc_nge_s,
  "_emscripten_glGetActiveUniform" : _emscripten_glGetActiveUniform,
  "_localtime_r" : _localtime_r,
  "_glBindTexture" : _glBindTexture,
  "_glUniform1f" : _glUniform1f,
  "_genbeql_idle" : _genbeql_idle,
  "_glGetFloatv" : _glGetFloatv,
  "_genmthi" : _genmthi,
  "_strftime" : _strftime,
  "__write_sockaddr" : __write_sockaddr,
  "_emscripten_glGetVertexAttribiv" : _emscripten_glGetVertexAttribiv,
  "_glReadPixels" : _glReadPixels,
  "_dyna_stop" : _dyna_stop,
  "_genmfc1" : _genmfc1,
  "_genmfc0" : _genmfc0,
  "_emscripten_glUniformMatrix3fv" : _emscripten_glUniformMatrix3fv,
  "_genbltz_out" : _genbltz_out,
  "_genbc1f_idle" : _genbc1f_idle,
  "_pthread_key_create" : _pthread_key_create,
  "_emscripten_glDeleteFramebuffers" : _emscripten_glDeleteFramebuffers,
  "___syscall39" : ___syscall39,
  "_genld" : _genld,
  "_genc_ult_d" : _genc_ult_d,
  "_emscripten_glGetObjectParameterivARB" : _emscripten_glGetObjectParameterivARB,
  "_genlb" : _genlb,
  "_genll" : _genll,
  "_genjalr" : _genjalr,
  "_genlh" : _genlh,
  "_emscripten_glGetUniformiv" : _emscripten_glGetUniformiv,
  "_genlw" : _genlw,
  "_genlhu" : _genlhu,
  "_genteq" : _genteq,
  "_eglGetError" : _eglGetError,
  "_glGetProgramiv" : _glGetProgramiv,
  "_genlui" : _genlui,
  "_glScissor" : _glScissor,
  "_eglDestroySurface" : _eglDestroySurface,
  "_RWebCamStop" : _RWebCamStop,
  "_gendsrl32" : _gendsrl32,
  "_gendsll" : _gendsll,
  "_genlwc1" : _genlwc1,
  "_emscripten_glDeleteTextures" : _emscripten_glDeleteTextures,
  "_eglDestroyContext" : _eglDestroyContext,
  "_genblez_out" : _genblez_out,
  "_glGetShaderiv" : _glGetShaderiv,
  "_gendmfc1" : _gendmfc1,
  "_glUniform4fv" : _glUniform4fv,
  "_glRenderbufferStorage" : _glRenderbufferStorage,
  "__exit" : __exit,
  "_glBindAttribLocation" : _glBindAttribLocation,
  "_gentlbwi" : _gentlbwi,
  "_emscripten_glBindTexture" : _emscripten_glBindTexture,
  "_genbltzal" : _genbltzal,
  "_glFramebufferTexture2D" : _glFramebufferTexture2D,
  "_emscripten_set_main_loop" : _emscripten_set_main_loop,
  "_genbltzl_idle" : _genbltzl_idle,
  "_genbc1t_out" : _genbc1t_out,
  "_RWebCamPoll" : _RWebCamPoll,
  "_emscripten_glIsShader" : _emscripten_glIsShader,
  "_emscripten_glCompressedTexImage2D" : _emscripten_glCompressedTexImage2D,
  "_genbltz_idle" : _genbltz_idle,
  "_glDisable" : _glDisable,
  "_emscripten_glGetInfoLogARB" : _emscripten_glGetInfoLogARB,
  "_gencvt_w_s" : _gencvt_w_s,
  "_gencvt_d_w" : _gencvt_d_w,
  "_emscripten_glGenRenderbuffers" : _emscripten_glGenRenderbuffers,
  "_genmtc1" : _genmtc1,
  "_genmtc0" : _genmtc0,
  "_emscripten_glReleaseShaderCompiler" : _emscripten_glReleaseShaderCompiler,
  "_genbeq_out" : _genbeq_out,
  "_genlbu" : _genlbu,
  "_glUniform2fv" : _glUniform2fv,
  "_emscripten_glFrontFace" : _emscripten_glFrontFace,
  "_gencvt_d_l" : _gencvt_d_l,
  "_glDeleteProgram" : _glDeleteProgram,
  "__ZSt18uncaught_exceptionv" : __ZSt18uncaught_exceptionv,
  "_glBlendEquation" : _glBlendEquation,
  "_emscripten_glUseProgram" : _emscripten_glUseProgram,
  "_genc_lt_d" : _genc_lt_d,
  "_clock_gettime" : _clock_gettime,
  "_genbc1t" : _genbc1t,
  "_genc_lt_s" : _genc_lt_s,
  "_glGetAttribLocation" : _glGetAttribLocation,
  "_glCreateShader" : _glCreateShader,
  "_genbltzl" : _genbltzl,
  "_getnameinfo" : _getnameinfo,
  "_genbc1f" : _genbc1f,
  "_genc_sf_d" : _genc_sf_d,
  "_gendsub" : _gendsub,
  "_genc_sf_s" : _genc_sf_s,
  "_glGenBuffers" : _glGenBuffers,
  "_glShaderSource" : _glShaderSource,
  "_genc_un_d" : _genc_un_d,
  "_emscripten_glScissor" : _emscripten_glScissor,
  "_genswl" : _genswl,
  "_gencvt_s_d" : _gencvt_s_d,
  "_genswr" : _genswr,
  "_genc_un_s" : _genc_un_s,
  "_gencvt_s_l" : _gencvt_s_l,
  "_emscripten_glIsBuffer" : _emscripten_glIsBuffer,
  "_emscripten_glVertexAttrib1f" : _emscripten_glVertexAttrib1f,
  "_genxor" : _genxor,
  "_emscripten_glCompressedTexSubImage2D" : _emscripten_glCompressedTexSubImage2D,
  "_abort" : _abort,
  "_sswqwr7" : _sswqwr7,
  "_emscripten_glGetAttachedShaders" : _emscripten_glGetAttachedShaders,
  "_emscripten_glGenTextures" : _emscripten_glGenTextures,
  "_gendmtc1" : _gendmtc1,
  "_glBindRenderbuffer" : _glBindRenderbuffer,
  "_emscripten_glGetTexParameteriv" : _emscripten_glGetTexParameteriv,
  "_genblez_idle" : _genblez_idle,
  "_glDeleteTextures" : _glDeleteTextures,
  "_genc_ult_s" : _genc_ult_s,
  "_emscripten_glClientActiveTexture" : _emscripten_glClientActiveTexture,
  "_genblezl" : _genblezl,
  "_emscripten_glCheckFramebufferStatus" : _emscripten_glCheckFramebufferStatus,
  "_emscripten_glUniform3f" : _emscripten_glUniform3f,
  "_emscripten_glUniform3i" : _emscripten_glUniform3i,
  "_genbgezall_out" : _genbgezall_out,
  "_emscripten_glDeleteShader" : _emscripten_glDeleteShader,
  "_glEnable" : _glEnable,
  "_genbgezall" : _genbgezall,
  "_pthread_once" : _pthread_once,
  "_genbltz" : _genbltz,
  "_emscripten_glGetUniformLocation" : _emscripten_glGetUniformLocation,
  "_emscripten_glEnableVertexAttribArray" : _emscripten_glEnableVertexAttribArray,
  "_genc_ule_d" : _genc_ule_d,
  "_emscripten_get_now" : _emscripten_get_now,
  "_gensw" : _gensw,
  "_llvm_exp2_f32" : _llvm_exp2_f32,
  "_gensubu" : _gensubu,
  "_genori" : _genori,
  "_gensh" : _gensh,
  "_gensd" : _gensd,
  "_genbeql_out" : _genbeql_out,
  "_gensb" : _gensb,
  "_gensc" : _gensc,
  "_gendsrav" : _gendsrav,
  "_eglChooseConfig" : _eglChooseConfig,
  "_gendmultu" : _gendmultu,
  "_genc_seq_s" : _genc_seq_s,
  "_emscripten_glReadPixels" : _emscripten_glReadPixels,
  "_genbltzal_out" : _genbltzal_out,
  "_emscripten_glDrawElements" : _emscripten_glDrawElements,
  "___buildEnvironment" : ___buildEnvironment,
  "_genbltzall_idle" : _genbltzall_idle,
  "_gentrunc_l_d" : _gentrunc_l_d,
  "_emscripten_glDisableVertexAttribArray" : _emscripten_glDisableVertexAttribArray,
  "_emscripten_glGetAttribLocation" : _emscripten_glGetAttribLocation,
  "_gennotcompiled" : _gennotcompiled,
  "_genor" : _genor,
  "_emscripten_glDisable" : _emscripten_glDisable,
  "_gendsra" : _gendsra,
  "_gendsrl" : _gendsrl,
  "_emscripten_glDeleteRenderbuffers" : _emscripten_glDeleteRenderbuffers,
  "_gentrunc_l_s" : _gentrunc_l_s,
  "_emscripten_glDrawElementsInstanced" : _emscripten_glDrawElementsInstanced,
  "_emscripten_glVertexAttrib4f" : _emscripten_glVertexAttrib4f,
  "_gennop" : _gennop,
  "_emscripten_glPixelStorei" : _emscripten_glPixelStorei,
  "_glAttachShader" : _glAttachShader,
  "_zsqqwe32" : _zsqqwe32,
  "_genmtlo" : _genmtlo,
  "_getenv" : _getenv,
  "_emscripten_glTexCoordPointer" : _emscripten_glTexCoordPointer,
  "_emscripten_glShaderSource" : _emscripten_glShaderSource,
  "_genddivu" : _genddivu,
  "_eglQuerySurface" : _eglQuerySurface,
  "_emscripten_glFramebufferRenderbuffer" : _emscripten_glFramebufferRenderbuffer,
  "_glBufferData" : _glBufferData,
  "_emscripten_glRotatef" : _emscripten_glRotatef,
  "_emscripten_glGetShaderiv" : _emscripten_glGetShaderiv,
  "_genctc1" : _genctc1,
  "___cxa_pure_virtual" : ___cxa_pure_virtual,
  "_emscripten_glUniformMatrix4fv" : _emscripten_glUniformMatrix4fv,
  "_genc_ngle_s" : _genc_ngle_s,
  "_emscripten_glGetPointerv" : _emscripten_glGetPointerv,
  "emscriptenWebGLGetTexPixelData" : emscriptenWebGLGetTexPixelData,
  "_emscripten_glIsRenderbuffer" : _emscripten_glIsRenderbuffer,
  "_gendaddi" : _gendaddi,
  "_genj_out" : _genj_out,
  "___syscall40" : ___syscall40,
  "_gendaddu" : _gendaddu,
  "_llvm_bswap_i64" : _llvm_bswap_i64,
  "_genc_ule_s" : _genc_ule_s,
  "__inet_pton6_raw" : __inet_pton6_raw,
  "_glDeleteRenderbuffers" : _glDeleteRenderbuffers,
  "_emscripten_glGetVertexAttribfv" : _emscripten_glGetVertexAttribfv,
  "_jjkhyu95" : _jjkhyu95,
  "_genbc1tl_out" : _genbc1tl_out,
  "_glGetUniformLocation" : _glGetUniformLocation,
  "_emscripten_glCompileShader" : _emscripten_glCompileShader,
  "_glClear" : _glClear,
  "_gentlbp" : _gentlbp,
  "_gentlbr" : _gentlbr,
  "__arraySum" : __arraySum,
  "_emscripten_glLinkProgram" : _emscripten_glLinkProgram,
  "_emscripten_glDrawRangeElements" : _emscripten_glDrawRangeElements,
  "___unlock" : ___unlock,
  "_pthread_setspecific" : _pthread_setspecific,
  "_genc_eq_d" : _genc_eq_d,
  "_free_all_registers" : _free_all_registers,
  "_emscripten_glClearColor" : _emscripten_glClearColor,
  "_emscripten_glCreateProgram" : _emscripten_glCreateProgram,
  "_glTexParameteri" : _glTexParameteri,
  "_glBlendColor" : _glBlendColor,
  "_emscripten_glDetachShader" : _emscripten_glDetachShader,
  "_emscripten_glEnableClientState" : _emscripten_glEnableClientState,
  "_glTexParameterf" : _glTexParameterf,
  "_genc_eq_s" : _genc_eq_s,
  "_emscripten_glGetRenderbufferParameteriv" : _emscripten_glGetRenderbufferParameteriv,
  "_emscripten_glVertexAttribPointer" : _emscripten_glVertexAttribPointer,
  "_genneg_d" : _genneg_d,
  "_glLineWidth" : _glLineWidth,
  "_genswc1" : _genswc1,
  "_genbgezal_out" : _genbgezal_out,
  "_genneg_s" : _genneg_s,
  "_genmfhi" : _genmfhi,
  "_emscripten_glDrawArrays" : _emscripten_glDrawArrays,
  "_emscripten_glPolygonOffset" : _emscripten_glPolygonOffset,
  "_genbltzl_out" : _genbltzl_out,
  "_longjmp" : _longjmp,
  "_emscripten_glBlendColor" : _emscripten_glBlendColor,
  "_genmult" : _genmult,
  "_glGetShaderInfoLog" : _glGetShaderInfoLog,
  "_eglGetCurrentContext" : _eglGetCurrentContext,
  "_signal" : _signal,
  "_genbgezal_idle" : _genbgezal_idle,
  "_emscripten_set_main_loop_timing" : _emscripten_set_main_loop_timing,
  "___cxa_begin_catch" : ___cxa_begin_catch,
  "_emscripten_glGetProgramiv" : _emscripten_glGetProgramiv,
  "_init_cache" : _init_cache,
  "_gensyscall" : _gensyscall,
  "_genblez" : _genblez,
  "_genc_ueq_s" : _genc_ueq_s,
  "_emscripten_glGetShaderSource" : _emscripten_glGetShaderSource,
  "_glUniform4i" : _glUniform4i,
  "_glUniform4f" : _glUniform4f,
  "_genc_ueq_d" : _genc_ueq_d,
  "_emscripten_glTexImage2D" : _emscripten_glTexImage2D,
  "_genbgezl_out" : _genbgezl_out,
  "_emscripten_get_canvas_size" : _emscripten_get_canvas_size,
  "__isLeapYear" : __isLeapYear,
  "_emscripten_glBlendEquationSeparate" : _emscripten_glBlendEquationSeparate,
  "_emscripten_glGetString" : _emscripten_glGetString,
  "_emscripten_glIsFramebuffer" : _emscripten_glIsFramebuffer,
  "_genbgezal" : _genbgezal,
  "_genxori" : _genxori,
  "_genc_le_d" : _genc_le_d,
  "_getaddrinfo" : _getaddrinfo,
  "_emscripten_glBindProgramARB" : _emscripten_glBindProgramARB,
  "_gendadd" : _gendadd,
  "_genbc1tl_idle" : _genbc1tl_idle,
  "_glutCreateWindow" : _glutCreateWindow,
  "_genc_le_s" : _genc_le_s,
  "_genldc1" : _genldc1,
  "_init_assembler" : _init_assembler,
  "_gendmult" : _gendmult,
  "_emscripten_glUniform2i" : _emscripten_glUniform2i,
  "_emscripten_glUniform2f" : _emscripten_glUniform2f,
  "_gensub_s" : _gensub_s,
  "_genfloor_l_d" : _genfloor_l_d,
  "_genandi" : _genandi,
  "_glGetProgramInfoLog" : _glGetProgramInfoLog,
  "_emscripten_glTexParameterf" : _emscripten_glTexParameterf,
  "_emscripten_glTexParameteri" : _emscripten_glTexParameteri,
  "_genbc1f_out" : _genbc1f_out,
  "_gensub_d" : _gensub_d,
  "_emscripten_glColorMask" : _emscripten_glColorMask,
  "_glGetString" : _glGetString,
  "_glutInitDisplayMode" : _glutInitDisplayMode,
  "_emscripten_glGenVertexArrays" : _emscripten_glGenVertexArrays,
  "_genceil_w_d" : _genceil_w_d,
  "_llvm_cttz_i32" : _llvm_cttz_i32,
  "_eglGetProcAddress" : _eglGetProcAddress,
  "_emscripten_glBindAttribLocation" : _emscripten_glBindAttribLocation,
  "_llvm_pow_f32" : _llvm_pow_f32,
  "_glDepthFunc" : _glDepthFunc,
  "___cxa_allocate_exception" : ___cxa_allocate_exception,
  "_emscripten_set_canvas_size" : _emscripten_set_canvas_size,
  "_emscripten_glIsTexture" : _emscripten_glIsTexture,
  "_emscripten_glTexSubImage2D" : _emscripten_glTexSubImage2D,
  "_genceil_w_s" : _genceil_w_s,
  "_gensync" : _gensync,
  "_emscripten_glClearDepthf" : _emscripten_glClearDepthf,
  "_gendsllv" : _gendsllv,
  "_emscripten_glMatrixMode" : _emscripten_glMatrixMode,
  "_free_assembler" : _free_assembler,
  "___syscall10" : ___syscall10,
  "_emscripten_glNormalPointer" : _emscripten_glNormalPointer,
  "_emscripten_glHint" : _emscripten_glHint,
  "_ssyyquu71" : _ssyyquu71,
  "_genmov_d" : _genmov_d,
  "___syscall3" : ___syscall3,
  "_genc_ole_d" : _genc_ole_d,
  "_emscripten_glBindFramebuffer" : _emscripten_glBindFramebuffer,
  "___syscall6" : ___syscall6,
  "___syscall5" : ___syscall5,
  "___syscall4" : ___syscall4,
  "_genmov_s" : _genmov_s,
  "_time" : _time,
  "_emscripten_glGetFramebufferAttachmentParameteriv" : _emscripten_glGetFramebufferAttachmentParameteriv,
  "_exit" : _exit,
  "_genc_ole_s" : _genc_ole_s,
  "_glIsProgram" : _glIsProgram,
  "__inet_pton4_raw" : __inet_pton4_raw,
  "_emscripten_glDeleteBuffers" : _emscripten_glDeleteBuffers,
  "___syscall102" : ___syscall102,
  "___syscall85" : ___syscall85,
  "_gensrlv" : _gensrlv,
  "_tzset" : _tzset,
  "_genbne_out" : _genbne_out,
  "_emscripten_glShaderBinary" : _emscripten_glShaderBinary,
  "_emscripten_glGetShaderInfoLog" : _emscripten_glGetShaderInfoLog,
  "_glUniform3fv" : _glUniform3fv,
  "_emscripten_glGetVertexAttribPointerv" : _emscripten_glGetVertexAttribPointerv,
  "_genbnel_idle" : _genbnel_idle,
  "_gentrunc_w_d" : _gentrunc_w_d,
  "_genlwu" : _genlwu,
  "___syscall192" : ___syscall192,
  "emscriptenWebGLGetVertexAttrib" : emscriptenWebGLGetVertexAttrib,
  "___syscall197" : ___syscall197,
  "___syscall195" : ___syscall195,
  "_genlwl" : _genlwl,
  "_gentrunc_w_s" : _gentrunc_w_s,
  "_emscripten_glDeleteProgram" : _emscripten_glDeleteProgram,
  "_glUniform1i" : _glUniform1i,
  "_glutDestroyWindow" : _glutDestroyWindow,
  "_emscripten_glCreateShader" : _emscripten_glCreateShader,
  "_emscripten_glColorPointer" : _emscripten_glColorPointer,
  "_gendsra32" : _gendsra32,
  "_genjal_idle" : _genjal_idle,
  "_RWebCamFree" : _RWebCamFree,
  "_emscripten_glViewport" : _emscripten_glViewport,
  "_emscripten_glDepthMask" : _emscripten_glDepthMask,
  "_emscripten_glDrawBuffers" : _emscripten_glDrawBuffers,
  "_emscripten_glLineWidth" : _emscripten_glLineWidth,
  "_glCompileShader" : _glCompileShader,
  "_genbgtzl" : _genbgtzl,
  "_genbne" : _genbne,
  "_generet" : _generet,
  "_emscripten_glGenerateMipmap" : _emscripten_glGenerateMipmap,
  "_glTexImage2D" : _glTexImage2D,
  "_emscripten_glGenFramebuffers" : _emscripten_glGenFramebuffers,
  "_genbltzall_out" : _genbltzall_out,
  "_glFlush" : _glFlush,
  "_emscripten_glLoadIdentity" : _emscripten_glLoadIdentity,
  "_genddiv" : _genddiv,
  "_glDeleteShader" : _glDeleteShader,
  "_genbgtzl_idle" : _genbgtzl_idle,
  "_gencvt_w_d" : _gencvt_w_d,
  "_juyqtdu77" : _juyqtdu77,
  "_genc_seq_d" : _genc_seq_d,
  "___gxx_personality_v0" : ___gxx_personality_v0,
  "_usleep" : _usleep,
  "_pposiqu87" : _pposiqu87,
  "_genc_olt_s" : _genc_olt_s,
  "_gennor" : _gennor,
  "_glGenRenderbuffers" : _glGenRenderbuffers,
  "_eglTerminate" : _eglTerminate,
  "_genc_olt_d" : _genc_olt_d,
  "_emscripten_glSampleCoverage" : _emscripten_glSampleCoverage,
  "_genjal" : _genjal,
  "_emscripten_glFrustum" : _emscripten_glFrustum,
  "_emscripten_glDepthRangef" : _emscripten_glDepthRangef,
  "_genmultu" : _genmultu,
  "_genround_w_d" : _genround_w_d,
  "_glPixelStorei" : _glPixelStorei,
  "_genbnel_out" : _genbnel_out,
  "_genbc1tl" : _genbc1tl,
  "_emscripten_glBindVertexArray" : _emscripten_glBindVertexArray,
  "_emscripten_glDeleteObjectARB" : _emscripten_glDeleteObjectARB,
  "_emscripten_glActiveTexture" : _emscripten_glActiveTexture,
  "_gensllv" : _gensllv,
  "_genfloor_l_s" : _genfloor_l_s,
  "_emscripten_glDeleteVertexArrays" : _emscripten_glDeleteVertexArrays,
  "___syscall54" : ___syscall54,
  "_emscripten_glUniform2iv" : _emscripten_glUniform2iv,
  "_genbgezl_idle" : _genbgezl_idle,
  "_glBufferSubData" : _glBufferSubData,
  "_genni" : _genni,
  "_genmul_s" : _genmul_s,
  "_emscripten_glCopyTexSubImage2D" : _emscripten_glCopyTexSubImage2D,
  "_genc_nge_d" : _genc_nge_d,
  "_genmul_d" : _genmul_d,
  "DYNAMICTOP_PTR" : DYNAMICTOP_PTR,
  "tempDoublePtr" : tempDoublePtr,
  "ABORT" : ABORT,
  "STACKTOP" : STACKTOP,
  "STACK_MAX" : STACK_MAX,
  "cttz_i8" : cttz_i8
};
var asm = Neptune[_$_81a2[256]](Neptune[_$_81a2[1946]], Neptune[_$_81a2[1947]], buffer);
Neptune[_$_81a2[256]] = asm;
/** @type {function(): ?} */
var _roundf = Neptune[_$_81a2[1948]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1948]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _bitshift64Ashr = Neptune[_$_81a2[1949]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1949]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _main = Neptune[_$_81a2[1950]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1950]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _ioiuyrfv1789 = Neptune[_$_81a2[1951]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1951]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _uigbcvxde457 = Neptune[_$_81a2[1952]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1952]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var stackSave = Neptune[_$_81a2[100]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[100]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var getTempRet0 = Neptune[_$_81a2[1953]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1953]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var ___udivdi3 = Neptune[_$_81a2[1954]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1954]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var setThrew = Neptune[_$_81a2[1637]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1637]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _uuyteree7874 = Neptune[_$_81a2[1955]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1955]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var __GLOBAL__sub_I_GLSLCombiner_gles2_cpp = Neptune[_$_81a2[1956]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1956]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _bitshift64Lshr = Neptune[_$_81a2[1957]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1957]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _poutfhjcxs21 = Neptune[_$_81a2[1958]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1958]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _ytrdvbuj4578 = Neptune[_$_81a2[1959]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1959]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _bitshift64Shl = Neptune[_$_81a2[1960]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1960]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _JALR_IDLE = Neptune[_$_81a2[1961]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1961]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _reyuyuyih897222 = Neptune[_$_81a2[1962]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1962]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var setTempRet0 = Neptune[_$_81a2[1779]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1779]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _uytrffs48571 = Neptune[_$_81a2[1963]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1963]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var ___cxa_is_pointer_type = Neptune[_$_81a2[1780]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1780]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _x74215uytrfs = Neptune[_$_81a2[1964]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1964]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _iomnvffrt417 = Neptune[_$_81a2[1965]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1965]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _iuytrewqa872 = Neptune[_$_81a2[1966]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1966]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _memset = Neptune[_$_81a2[1967]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1967]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _JR_IDLE = Neptune[_$_81a2[1968]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1968]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _iuhmhgdxs789 = Neptune[_$_81a2[1969]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1969]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _memcpy = Neptune[_$_81a2[1970]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1970]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var ___errno_location = Neptune[_$_81a2[283]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[283]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var ___muldi3 = Neptune[_$_81a2[1971]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1971]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _dffawqer478d = Neptune[_$_81a2[1972]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1972]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _reyuyuyih897 = Neptune[_$_81a2[1973]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1973]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var ___uremdi3 = Neptune[_$_81a2[1974]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1974]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _dfsdae45fsae = Neptune[_$_81a2[1975]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1975]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var ___divdi3 = Neptune[_$_81a2[1976]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1976]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _utyrrggdssc7 = Neptune[_$_81a2[1977]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1977]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _i64Subtract = Neptune[_$_81a2[1978]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1978]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _ntohs = Neptune[_$_81a2[1979]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1979]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _htonl = Neptune[_$_81a2[1980]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1980]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _realloc = Neptune[_$_81a2[1981]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1981]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _i64Add = Neptune[_$_81a2[1982]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1982]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _gcxx47952jgt = Neptune[_$_81a2[1983]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1983]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _saveSetjmp = Neptune[_$_81a2[1984]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1984]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _saewqrdsf879 = Neptune[_$_81a2[1985]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1985]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _trwqsx178953 = Neptune[_$_81a2[1986]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1986]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _llvm_bswap_i16 = Neptune[_$_81a2[1987]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1987]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _emscripten_get_global_libc = Neptune[_$_81a2[1988]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1988]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var ___remdi3 = Neptune[_$_81a2[1989]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1989]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _sbrk = Neptune[_$_81a2[1990]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1990]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _htons = Neptune[_$_81a2[1991]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1991]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _emscripten_GetProcAddress = Neptune[_$_81a2[1992]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1992]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _ioiyttr87954 = Neptune[_$_81a2[1993]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1993]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _llvm_bswap_i32 = Neptune[_$_81a2[1994]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1994]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var stackAlloc = Neptune[_$_81a2[102]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[102]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _x7ooiujgfgda = Neptune[_$_81a2[1995]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1995]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _testSetjmp = Neptune[_$_81a2[1996]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1996]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var ___cxa_can_catch = Neptune[_$_81a2[1781]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1781]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _trgfsdsse879 = Neptune[_$_81a2[1997]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1997]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _free = Neptune[_$_81a2[1998]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1998]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var runPostSets = Neptune[_$_81a2[1999]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1999]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _round = Neptune[_$_81a2[2E3]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[2E3]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _axiop55x2218 = Neptune[_$_81a2[2001]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[2001]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _yytrd9852hhf = Neptune[_$_81a2[2002]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[2002]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _strstr = Neptune[_$_81a2[2003]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[2003]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var stackRestore = Neptune[_$_81a2[101]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[101]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _JR_IDLE_1248 = Neptune[_$_81a2[2004]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[2004]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _malloc = Neptune[_$_81a2[2005]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[2005]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var establishStackSpace = Neptune[_$_81a2[2006]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[2006]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _ouikjgdre879 = Neptune[_$_81a2[2007]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[2007]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _memalign = Neptune[_$_81a2[2008]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[2008]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _terwq7895412 = Neptune[_$_81a2[2009]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[2009]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _memmove = Neptune[_$_81a2[2010]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[2010]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _x79oiugncs11 = Neptune[_$_81a2[2011]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[2011]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _JALR_IDLE_1247 = Neptune[_$_81a2[2012]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[2012]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _jhghferrety5 = Neptune[_$_81a2[2013]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[2013]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var _treewqero871 = Neptune[_$_81a2[2014]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[2014]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_iiiiiiii = Neptune[_$_81a2[1909]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1909]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_viiiii = Neptune[_$_81a2[1910]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1910]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_vd = Neptune[_$_81a2[1911]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1911]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_vf = Neptune[_$_81a2[1912]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1912]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_vi = Neptune[_$_81a2[197]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[197]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_vii = Neptune[_$_81a2[1737]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1737]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_iiiiiii = Neptune[_$_81a2[1913]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1913]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_ii = Neptune[_$_81a2[1914]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1914]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_viiiiiiiiiii = Neptune[_$_81a2[1915]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1915]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_vif = Neptune[_$_81a2[1916]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1916]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_fffff = Neptune[_$_81a2[1917]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1917]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_viffff = Neptune[_$_81a2[1918]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1918]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_iiiiii = Neptune[_$_81a2[1919]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1919]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_iidi = Neptune[_$_81a2[1920]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1920]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_iiii = Neptune[_$_81a2[1921]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1921]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_viiiiif = Neptune[_$_81a2[1922]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1922]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_viff = Neptune[_$_81a2[1923]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1923]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_vifff = Neptune[_$_81a2[1924]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1924]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_fii = Neptune[_$_81a2[1925]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1925]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_iiif = Neptune[_$_81a2[1926]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1926]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_viiiiiiii = Neptune[_$_81a2[1927]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1927]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_viiiiiiiiiiiiii = Neptune[_$_81a2[1928]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1928]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_fiii = Neptune[_$_81a2[1929]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1929]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_viiffff = Neptune[_$_81a2[1930]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1930]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_iif = Neptune[_$_81a2[1931]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1931]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_viiiiiii = Neptune[_$_81a2[1932]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1932]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_viiiiiiiii = Neptune[_$_81a2[1933]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1933]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_iii = Neptune[_$_81a2[1934]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1934]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_viiiiii = Neptune[_$_81a2[1935]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1935]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_vfi = Neptune[_$_81a2[1936]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1936]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_viii = Neptune[_$_81a2[1744]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1744]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_i = Neptune[_$_81a2[1937]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1937]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_vff = Neptune[_$_81a2[1938]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1938]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_vffff = Neptune[_$_81a2[1939]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1939]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_iiiii = Neptune[_$_81a2[1940]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1940]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_vdddddd = Neptune[_$_81a2[1941]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1941]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_vdd = Neptune[_$_81a2[1942]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1942]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_v = Neptune[_$_81a2[196]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[196]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_iiiiiiiii = Neptune[_$_81a2[1943]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1943]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_viif = Neptune[_$_81a2[1944]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1944]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_viiii = Neptune[_$_81a2[1762]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1762]][_$_81a2[84]](null, arguments);
};
/** @type {function(): ?} */
var dynCall_iiiif = Neptune[_$_81a2[1945]] = function() {
  return Neptune[_$_81a2[256]][_$_81a2[1945]][_$_81a2[84]](null, arguments);
};
Runtime[_$_81a2[102]] = Neptune[_$_81a2[102]];
Runtime[_$_81a2[100]] = Neptune[_$_81a2[100]];
Runtime[_$_81a2[101]] = Neptune[_$_81a2[101]];
Runtime[_$_81a2[2006]] = Neptune[_$_81a2[2006]];
Runtime[_$_81a2[1779]] = Neptune[_$_81a2[1779]];
Runtime[_$_81a2[1953]] = Neptune[_$_81a2[1953]];
Neptune[_$_81a2[256]] = asm;
if (memoryInitializer) {
  if (typeof Neptune[_$_81a2[240]] === _$_81a2[22]) {
    memoryInitializer = Neptune[_$_81a2[240]](memoryInitializer);
  } else {
    if (Neptune[_$_81a2[2015]]) {
      memoryInitializer = Neptune[_$_81a2[2015]] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Neptune[_$_81a2[32]](memoryInitializer);
    HEAPU8[_$_81a2[148]](data, Runtime[_$_81a2[280]]);
  } else {
    /**
     * @return {undefined}
     */
    var doBrowserLoad = function() {
      Neptune[_$_81a2[57]](memoryInitializer, applyMemoryInitializer, function() {
        throw _$_81a2[2018] + memoryInitializer;
      });
    };
    addRunDependency(_$_81a2[2016]);
    /**
     * @param {!Array} data
     * @return {undefined}
     */
    var applyMemoryInitializer = function(data) {
      if (data[_$_81a2[245]]) {
        /** @type {!Uint8Array} */
        data = new Uint8Array(data);
      }
      HEAPU8[_$_81a2[148]](data, Runtime[_$_81a2[280]]);
      if (Neptune[_$_81a2[2017]]) {
        delete Neptune[_$_81a2[2017]][_$_81a2[56]];
      }
      removeRunDependency(_$_81a2[2016]);
    };
    if (Neptune[_$_81a2[2017]]) {
      /**
       * @return {undefined}
       */
      var useRequest = function() {
        var a = Neptune[_$_81a2[2017]];
        if (a[_$_81a2[59]] !== 200 && a[_$_81a2[59]] !== 0) {
          console[_$_81a2[26]](_$_81a2[2019] + a[_$_81a2[59]] + _$_81a2[2020] + memoryInitializer);
          doBrowserLoad();
          return;
        }
        applyMemoryInitializer(a[_$_81a2[56]]);
      };
      if (Neptune[_$_81a2[2017]][_$_81a2[56]]) {
        setTimeout(useRequest, 0);
      } else {
        Neptune[_$_81a2[2017]][_$_81a2[355]](_$_81a2[34], useRequest);
      }
    } else {
      doBrowserLoad();
    }
  }
}
/**
 * @param {?} status
 * @return {undefined}
 */
function ExitStatus(status) {
  this[_$_81a2[428]] = _$_81a2[2021];
  this[_$_81a2[453]] = _$_81a2[2022] + status + _$_81a2[188];
  this[_$_81a2[59]] = status;
}
/** @type {!Error} */
ExitStatus[_$_81a2[92]] = new Error;
/** @type {function(?): undefined} */
ExitStatus[_$_81a2[92]][_$_81a2[1205]] = ExitStatus;
var initialStackTop;
/** @type {null} */
var preloadStartTime = null;
/** @type {boolean} */
var calledMain = false;
/**
 * @return {undefined}
 */
dependenciesFulfilled = function runCaller() {
  if (!Neptune[_$_81a2[2023]]) {
    run();
  }
  if (!Neptune[_$_81a2[2023]]) {
    /** @type {function(): undefined} */
    dependenciesFulfilled = runCaller;
  }
};
/** @type {function(number): undefined} */
Neptune[_$_81a2[2024]] = Neptune[_$_81a2[2024]] = function callMain(args) {
  /**
   * @return {undefined}
   */
  function pad() {
    /** @type {number} */
    var a = 0;
    for (; a < 4 - 1; a++) {
      argv[_$_81a2[107]](0);
    }
  }
  args = args || [];
  ensureInitRuntime();
  var level = args[_$_81a2[36]] + 1;
  /** @type {!Array} */
  var argv = [allocate(intArrayFromString(Neptune[_$_81a2[35]]), _$_81a2[69], ALLOC_NORMAL)];
  pad();
  /** @type {number} */
  var i = 0;
  for (; i < level - 1; i = i + 1) {
    argv[_$_81a2[107]](allocate(intArrayFromString(args[i]), _$_81a2[69], ALLOC_NORMAL));
    pad();
  }
  argv[_$_81a2[107]](0);
  argv = allocate(argv, _$_81a2[71], ALLOC_NORMAL);
  try {
    var ret = Neptune[_$_81a2[1950]](level, argv, 0);
    exit(ret, true);
  } catch (e) {
    if (e instanceof ExitStatus) {
      return;
    } else {
      if (e == _$_81a2[474]) {
        /** @type {boolean} */
        Neptune[_$_81a2[457]] = true;
        return;
      } else {
        var data = e;
        if (e && typeof e === _$_81a2[21] && e[_$_81a2[169]]) {
          /** @type {!Array} */
          data = [e, e[_$_81a2[169]]];
        }
        Neptune[_$_81a2[25]](_$_81a2[480] + data);
        Neptune[_$_81a2[49]](1, e);
      }
    }
  } finally {
    /** @type {boolean} */
    calledMain = true;
  }
};
/**
 * @param {?} astRegistry
 * @return {undefined}
 */
function run(astRegistry) {
  /**
   * @return {undefined}
   */
  function doRun() {
    if (Neptune[_$_81a2[2023]]) {
      return;
    }
    /** @type {boolean} */
    Neptune[_$_81a2[2023]] = true;
    if (ABORT) {
      return;
    }
    ensureInitRuntime();
    preMain();
    if (Neptune[_$_81a2[2025]]) {
      Neptune[_$_81a2[2025]]();
    }
    if (Neptune[_$_81a2[1950]] && shouldRunNow) {
      Neptune[_$_81a2[2024]](astRegistry);
    }
    postRun();
  }
  astRegistry = astRegistry || Neptune[_$_81a2[40]];
  if (preloadStartTime === null) {
    preloadStartTime = Date[_$_81a2[461]]();
  }
  if (runDependencies > 0) {
    return;
  }
  preRun();
  if (runDependencies > 0) {
    return;
  }
  if (Neptune[_$_81a2[2023]]) {
    return;
  }
  if (Neptune[_$_81a2[475]]) {
    Neptune[_$_81a2[475]](_$_81a2[2026]);
    setTimeout(function() {
      setTimeout(function() {
        Neptune[_$_81a2[475]](_$_81a2[4]);
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
/** @type {function(?): undefined} */
Neptune[_$_81a2[2027]] = Neptune[_$_81a2[2027]] = run;
/**
 * @param {number} status
 * @param {boolean} killed
 * @return {undefined}
 */
function exit(status, killed) {
  if (killed && Neptune[_$_81a2[457]]) {
    return;
  }
  if (Neptune[_$_81a2[457]]) {
  } else {
    /** @type {boolean} */
    ABORT = true;
    /** @type {number} */
    EXITSTATUS = status;
    STACKTOP = initialStackTop;
    exitRuntime();
    if (Neptune[_$_81a2[2028]]) {
      Neptune[_$_81a2[2028]](status);
    }
  }
  if (ENVIRONMENT_IS_NODE) {
    process[_$_81a2[1808]](status);
  }
  Neptune[_$_81a2[49]](status, new ExitStatus(status));
}
/** @type {function(number, boolean): undefined} */
Neptune[_$_81a2[1808]] = Neptune[_$_81a2[1808]] = exit;
/** @type {!Array} */
var abortDecorators = [];
/**
 * @param {number} data
 * @return {undefined}
 */
function abort(data) {
  if (Neptune[_$_81a2[2029]]) {
    Neptune[_$_81a2[2029]](data);
  }
  if (data !== undefined) {
    Neptune[_$_81a2[23]](data);
    Neptune[_$_81a2[25]](data);
    data = JSON[_$_81a2[366]](data);
  } else {
    data = _$_81a2[4];
  }
  /** @type {boolean} */
  ABORT = true;
  /** @type {number} */
  EXITSTATUS = 1;
  var content = _$_81a2[2030];
  var result = _$_81a2[2031] + data + _$_81a2[2032] + stackTrace() + content;
  if (abortDecorators) {
    abortDecorators[_$_81a2[421]](function(callback) {
      result = callback(result, data);
    });
  }
  throw result;
}
/** @type {function(number): undefined} */
Neptune[_$_81a2[1320]] = Neptune[_$_81a2[1320]] = abort;
if (Neptune[_$_81a2[2033]]) {
  if (typeof Neptune[_$_81a2[2033]] == _$_81a2[22]) {
    /** @type {!Array} */
    Neptune[_$_81a2[2033]] = [Neptune[_$_81a2[2033]]];
  }
  for (; Neptune[_$_81a2[2033]][_$_81a2[36]] > 0;) {
    Neptune[_$_81a2[2033]][_$_81a2[976]]()();
  }
}
/** @type {boolean} */
var shouldRunNow = true;
if (Neptune[_$_81a2[2034]]) {
  /** @type {boolean} */
  shouldRunNow = false;
}
/** @type {boolean} */
Neptune[_$_81a2[457]] = true;
run();
